{"version":3,"sources":["docs/src/scripts.js","src/utils/is.js","src/config.js","src/models/Product.js","src/models/Cart.js","src/models/Category.js","src/models/Store.js","node_modules/humps/humps.js","src/utils/objects.js","src/utils/strings.js","src/utils/form-data.js","src/utils/fetch.js","src/utils/http.js","src/utils/storage.js","src/utils/parseUrl.js","src/utils/arrays.js","src/client.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","_defineProperty","value","_slicedToArray","arr","Array","isArray","_arrayWithHoles","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","_iterableToArrayLimit","_nonIterableRest","getConstructor","input","isObject","isString","String","isNullOrUndefined","isEmpty","keys","is","array","object","number","Number","isNaN","string","boolean","Boolean","function","Function","nullOrUndefined","objectId","test","currencyCode","url","strict","arguments","instanceOf","window","URL","concat","hostname","e","empty","getBase","env","config","product","products","id","keyword","category","page","categories","store","buy","createCart","getCart","checkCarts","ids","addToCart","updateCartItemQuantity","removeFromCart","client","ProductUrls","a","urls","this","assign","ProductImage","image","ProductMedia","media","cover","ProductFile","file","ProductVariant","variant","selected","ProductVariantAttributeOption","label","ProductVariantAttribute","options","map","Product","variantId","images","files","hasVariants","variants","hasVariantAttributes","variantAttributes","attribute","get","find","CartItem","item","cartId","CartAddItem","productId","quantity","discountCode","buyersUnitPrice","isProduct","Cart","cart","active","items","from","index","Category","Store","commonjsGlobal","globalThis","global","self","module","humps","_processKeys","camelize","pascalize","decamelize","toString","_isFunction","_isObject","_isArray","_isDate","_isRegExp","_isBoolean","_isNumerical","_processor","convert","output","l","hasOwnProperty","call","replace","match","chr","toUpperCase","substr","toLowerCase","camelized","separator","split","join","separateWords","callback","process","depascalize","camelizeKeys","decamelizeKeys","pascalizeKeys","depascalizeKeys","apply","exports","fn","extend","b","sources","d","source","shift","forEach","includes","replaceAll","RegExp","buildFormData","formKey","form","namespace","formData","FormData","data","JSON","parse","stringify","cloneDeep","error","File","append","text","charAt","toTitleCase","toPascalCase","defaults","type","body","responseType","fetch","c","Promise","resolve","reject","xhr","XMLHttpRequest","Error","request","fail","status","addEventListener","response","parseJSON","then","json","success","errors","catch","open","send","queue","http","remove","storage","Map","getKey","parsed","parseUrl","host","pathname","Storage","root","carts","stores","ttl","schema","Date","getTime","purge","supported","stored","localStorage","getItem","merge","set","setItem","removeItem","filter","now","currency","getCarts","s","existing","indexOf","dedupe","Client","getStore","cached","setStore","getStoreId","p","cartItem","discount","setCart","currentCart","isCurrency","isObjectId","getCartId","activeId","getActiveCart","validate","entries","setCarts","values","setActiveCart","currencies","document","log","details","createElement","summary","innerHTML","appendChild","contents","pre","classList","add","prettyPrint","detail","updatedCart","getElementById","getProduct"],"mappings":"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","file":"scripts.js","sourcesContent":["import Client, { CartAddItem } from '../../src/client';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const output = document.getElementById('output');\n\n    function log(label, data) {\n        const details = document.createElement('details');\n        const summary = document.createElement('summary');\n        summary.innerHTML = label;\n        details.appendChild(summary);\n\n        const contents = document.createElement('div');\n        const pre = document.createElement('pre');\n        pre.classList.add('prettyprint');\n        pre.innerHTML = JSON.stringify(data, null, 4);\n        contents.appendChild(pre);\n        details.appendChild(contents);\n\n        output.appendChild(details);\n\n        window.prettyPrint();\n    }\n\n    function fail(label, error) {\n        if (error instanceof Error) {\n            log(`${label} (error)`, {\n                error: error.toString(),\n                detail: error.errors,\n            });\n\n            return;\n        }\n\n        log(`${label} (failed)`, error);\n    }\n\n    const client = new Client({\n        store: 'local.sampotts.me',\n        env: 'local-selz.com',\n    });\n\n    // Expose\n    window.client = client;\n\n    log('Client', client);\n\n    function getCart(currency) {\n        return new Promise((resolve, reject) => {\n            if (window.cart) {\n                resolve(window.cart);\n                return;\n            }\n\n            client\n                .getCart(currency)\n                .then(cart => {\n                    log('Get cart', cart);\n\n                    window.cart = cart;\n\n                    resolve(cart);\n                })\n                .catch(error => reject(error));\n        });\n    }\n\n    function addToCart(product) {\n        getCart(product.currencyCode)\n            .then(cart => {\n                const cartItem = new CartAddItem(product);\n                cartItem.quantity = 2;\n\n                cart.add(cartItem)\n                    .then(updatedCart => {\n                        log('Add to cart', updatedCart);\n\n                        window.cart = updatedCart;\n                    })\n                    .catch(error => fail('Add to cart', error));\n            })\n            .catch(error => fail('Get cart', error));\n    }\n\n    /* function buy(product) {\n        client\n            .buy(product)\n            .then(cart => {\n                log('Buy now', cart);\n\n                window.cart = cart;\n            })\n            .catch(error => fail('Buy now', error));\n    } */\n\n    const products = {\n        GBP: 'http://selz.co/1MaSYRU',\n        USD: 'http://selz.co/1rvbhT6',\n    };\n\n    client\n        .getProduct(products.USD)\n        .then(product => {\n            log('Product', product);\n\n            // Expose\n            window.product = product;\n\n            // buy(product);\n\n            addToCart(product);\n        })\n        .catch(errors => fail('Product', errors));\n\n    // Listen for messages from parent\n    /* window.addEventListener('message', event => {\n        // console.warn(event.data);\n        const json = JSON.parse(event.data);\n\n        if (json.key !== 'add-to-cart') {\n            return;\n        }\n\n        addToCart(json.data);\n    }); */\n});\n","// ==========================================================================\n// Type checking\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\nconst isArray = input => Array.isArray(input);\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObjectId = input => isString(input) && /^[a-f\\d]{24}$/i.test(input);\nconst isCurrencyCode = input => isString(input) && /^[A-z]{3}$/.test(input);\n\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nconst isUrl = (input, strict = false) => {\n    // Accept a URL object\n    if (instanceOf(input, window.URL)) {\n        return true;\n    }\n\n    // Add the protocol if required\n    let string = input;\n    if (!strict && !/^https?:\\/\\/*/.test(input)) {\n        string = `http://${input}`;\n    }\n\n    try {\n        return !isEmpty(new URL(string).hostname);\n    } catch (e) {\n        return false;\n    }\n};\n\nconst is = {\n    array: isArray,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    nullOrUndefined: isNullOrUndefined,\n    objectId: isObjectId,\n    currencyCode: isCurrencyCode,\n    url: isUrl,\n    empty: isEmpty,\n};\n\nexport default is;\n","import is from './utils/is';\n\nconst getBase = env => `https://${is.empty(env) || env === 'selz.com' ? 'sdk.selz.com' : `${env}/sdk`}/`;\n\nconst config = {\n    urls: {\n        /**\n         * Get URL for product data by URL\n         * @param {String} env - Environment (for internal use)\n         * @param {String} url - Short or full URL for a product\n         */\n        product(env, url = '') {\n            return `${getBase(env)}products/find?url=${url}`;\n        },\n\n        /**\n         * Get URL for all products by store ID\n         * @param {String} env - Environment (for internal use)\n         * @param {Number|String} id - The store ID\n         * @param {String} keyword - Search keyword\n         * @param {ObjectId|String} category - Category ID or relative path\n         * @param {Number} page - Page to fetch\n         */\n        products(env, id, keyword = '', category = '', page = 1) {\n            return `${getBase(env)}products/all/${id}?q=${keyword}&c=${category}&p=${page}`;\n        },\n\n        /**\n         * Get all categories for a given store ID\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - The store ID\n         */\n        categories(env, id) {\n            return `${getBase(env)}categories/${id}`;\n        },\n\n        /**\n         * Get URL for finding a store by URL or ID\n         * @param {String} env - Environment (for internal use)\n         * @param {Number|String} input - The ID or URL to lookup\n         */\n        store(env, input = null) {\n            if (is.number(input)) {\n                return `${getBase(env)}store/find/${input}`;\n            }\n\n            return `${getBase(env)}store/find?url=${input}`;\n        },\n\n        /**\n         * Buy a product\n         * @param {String} env - Environment (for internal use)\n         */\n        buy(env) {\n            return `${getBase(env)}cart/buy`;\n        },\n\n        /**\n         * Create a new cart\n         * @param {String} env - Environment (for internal use)\n         * @param {Number} id - Store ID\n         */\n        createCart(env, id = '') {\n            return `${getBase(env)}cart/create/${id}`;\n        },\n\n        /**\n         * Get cart from ID\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        getCart(env, id = '') {\n            return `${getBase(env)}cart/${id}`;\n        },\n\n        /**\n         * Check carts still exist server side\n         * @param {String} env - Environment (for internal use)\n         * @param {Number} id - Cart IDs\n         */\n        checkCarts(env, ids = '') {\n            return `${getBase(env)}cart/verify?ids=${ids}`;\n        },\n\n        /**\n         * Add product to cart\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        addToCart(env, id = '') {\n            return `${getBase(env)}cart/add/${id}`;\n        },\n\n        /**\n         * Update a cart item quantity\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        updateCartItemQuantity(env, id = '') {\n            return `${getBase(env)}cart/updateitemquantity/${id}`;\n        },\n\n        /**\n         * Remove product from cart\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        removeFromCart(env, id = '') {\n            return `${getBase(env)}cart/remove/${id}`;\n        },\n    },\n};\n\nexport default config;\n","import is from '../utils/is';\n\nlet client = null;\n\nclass ProductUrls {\n    constructor(urls) {\n        // Take all properties by default\n        Object.assign(this, urls);\n    }\n}\n\nclass ProductImage {\n    constructor(image) {\n        // Take all properties by default\n        Object.assign(this, image);\n    }\n}\n\nclass ProductMedia {\n    constructor(media) {\n        // Take all properties by default\n        Object.assign(this, media);\n\n        // Map cover image\n        this.cover = new ProductImage(media.cover);\n    }\n}\n\nclass ProductFile {\n    constructor(file) {\n        // Take all properties by default\n        Object.assign(this, file);\n    }\n}\n\nclass ProductVariant {\n    constructor(variant, selected = '') {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        this.selected = variant.id === selected;\n    }\n}\n\nclass ProductVariantAttributeOption {\n    constructor(id, label) {\n        this.id = id;\n        this.label = label;\n    }\n}\n\nclass ProductVariantAttribute {\n    constructor(variant) {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        // Map options\n        this.options = Object.keys(variant.options).map(\n            id => new ProductVariantAttributeOption(id, variant.options[id]),\n        );\n    }\n}\n\nclass Product {\n    constructor(instance, product, variantId = '') {\n        if (!is.object(product)) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, product);\n\n        // Map store\n        this.store = client.store;\n\n        // Product URLs\n        if (is.object(product.urls)) {\n            this.urls = new ProductUrls(product.urls);\n        }\n\n        // Media (Video, YouTube, Vimeo, Audio)\n        if (is.object(product.media)) {\n            this.media = new ProductMedia(product.media);\n        }\n\n        // Images\n        if (is.array(product.images)) {\n            this.images = product.images.map(image => new ProductImage(image));\n        }\n\n        // Files for digital products\n        if (is.array(product.files)) {\n            this.files = product.files.map(file => new ProductFile(file));\n        }\n\n        // Variants\n        if (product.hasVariants) {\n            const selected = !is.empty(variantId) ? variantId : product.variants[0].id;\n            this.variants = product.variants.map(variant => new ProductVariant(variant, selected));\n        }\n        if (product.hasVariantAttributes) {\n            this.variantAttributes = product.variantAttributes.map(attribute => new ProductVariantAttribute(attribute));\n        }\n    }\n\n    get selectedVariant() {\n        if (is.empty(this.variants)) {\n            return null;\n        }\n\n        return this.variants.find(variant => variant.selected);\n    }\n}\n\nexport default Product;\n","import is from '../utils/is';\nimport Product from './Product';\n\nlet client = null;\nconst isProduct = input => !is.empty(input) && input instanceof Product;\n\nexport class CartItem {\n    constructor(item, cartId) {\n        this.cartId = cartId;\n\n        // Take all properties by default\n        Object.assign(this, item);\n\n        // Map product\n        this.product = new Product(client, item.product, item.variantId);\n    }\n}\n\nexport class CartAddItem {\n    constructor(item) {\n        this.productId = null;\n        this.variantId = null;\n        this.quantity = 1;\n        this.discountCode = null;\n        this.buyersUnitPrice = null;\n\n        if (isProduct(item) || is.object(item)) {\n            this.productId = item.id;\n            this.variantId = is.objectId(item.variant) ? item.variant : null;\n        }\n    }\n}\n\nexport class Cart {\n    constructor(instance, cart, active = false) {\n        if (cart === null) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, cart);\n\n        // Map store\n        this.store = client.store;\n\n        // Set active state\n        this.active = active;\n\n        // Map items\n        this.items = Array.from(cart.items).map(item => new CartItem(item, cart.id));\n    }\n\n    /**\n     * Add a product to this cart\n     * @param {Object} item - The cart item\n     */\n    add(item) {\n        return client.addToCart(this.id, item);\n    }\n\n    /**\n     * Remove a product from this cart\n     * @param {String} index\n     */\n    remove(index) {\n        return client.removeFromCart(this.id, index);\n    }\n}\n\nexport default Cart;\n","import is from '../utils/is';\n\nclass Category {\n    constructor(category = null) {\n        if (!is.object(category)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, category);\n    }\n}\n\nexport default Category;\n","import is from '../utils/is';\n\nclass Store {\n    constructor(store = null) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, store);\n    }\n}\n\nexport default Store;\n","// =========\n// = humps =\n// =========\n// Underscore-to-camelCase converter (and vice versa)\n// for strings and object keys\n\n// humps is copyright © 2012+ Dom Christie\n// Released under the MIT license.\n\n\n;(function(global) {\n\n  var _processKeys = function(convert, obj, options) {\n    if(!_isObject(obj) || _isDate(obj) || _isRegExp(obj) || _isBoolean(obj) || _isFunction(obj)) {\n      return obj;\n    }\n\n    var output,\n        i = 0,\n        l = 0;\n\n    if(_isArray(obj)) {\n      output = [];\n      for(l=obj.length; i<l; i++) {\n        output.push(_processKeys(convert, obj[i], options));\n      }\n    }\n    else {\n      output = {};\n      for(var key in obj) {\n        if(Object.prototype.hasOwnProperty.call(obj, key)) {\n          output[convert(key, options)] = _processKeys(convert, obj[key], options);\n        }\n      }\n    }\n    return output;\n  };\n\n  // String conversion methods\n\n  var separateWords = function(string, options) {\n    options = options || {};\n    var separator = options.separator || '_';\n    var split = options.split || /(?=[A-Z])/;\n\n    return string.split(split).join(separator);\n  };\n\n  var camelize = function(string) {\n    if (_isNumerical(string)) {\n      return string;\n    }\n    string = string.replace(/[\\-_\\s]+(.)?/g, function(match, chr) {\n      return chr ? chr.toUpperCase() : '';\n    });\n    // Ensure 1st char is always lowercase\n    return string.substr(0, 1).toLowerCase() + string.substr(1);\n  };\n\n  var pascalize = function(string) {\n    var camelized = camelize(string);\n    // Ensure 1st char is always uppercase\n    return camelized.substr(0, 1).toUpperCase() + camelized.substr(1);\n  };\n\n  var decamelize = function(string, options) {\n    return separateWords(string, options).toLowerCase();\n  };\n\n  // Utilities\n  // Taken from Underscore.js\n\n  var toString = Object.prototype.toString;\n\n  var _isFunction = function(obj) {\n    return typeof(obj) === 'function';\n  };\n  var _isObject = function(obj) {\n    return obj === Object(obj);\n  };\n  var _isArray = function(obj) {\n    return toString.call(obj) == '[object Array]';\n  };\n  var _isDate = function(obj) {\n    return toString.call(obj) == '[object Date]';\n  };\n  var _isRegExp = function(obj) {\n    return toString.call(obj) == '[object RegExp]';\n  };\n  var _isBoolean = function(obj) {\n    return toString.call(obj) == '[object Boolean]';\n  };\n\n  // Performant way to determine if obj coerces to a number\n  var _isNumerical = function(obj) {\n    obj = obj - 0;\n    return obj === obj;\n  };\n\n  // Sets up function which handles processing keys\n  // allowing the convert function to be modified by a callback\n  var _processor = function(convert, options) {\n    var callback = options && 'process' in options ? options.process : options;\n\n    if(typeof(callback) !== 'function') {\n      return convert;\n    }\n\n    return function(string, options) {\n      return callback(string, convert, options);\n    }\n  };\n\n  var humps = {\n    camelize: camelize,\n    decamelize: decamelize,\n    pascalize: pascalize,\n    depascalize: decamelize,\n    camelizeKeys: function(object, options) {\n      return _processKeys(_processor(camelize, options), object);\n    },\n    decamelizeKeys: function(object, options) {\n      return _processKeys(_processor(decamelize, options), object, options);\n    },\n    pascalizeKeys: function(object, options) {\n      return _processKeys(_processor(pascalize, options), object);\n    },\n    depascalizeKeys: function () {\n      return this.decamelizeKeys.apply(this, arguments);\n    }\n  };\n\n  if (typeof define === 'function' && define.amd) {\n    define(humps);\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = humps;\n  } else {\n    global.humps = humps;\n  }\n\n})(this);\n","// ==========================================================================\n// Extend objects\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Clone nested objects\n * @param {object} object\n */\nexport function cloneDeep(object) {\n    return JSON.parse(JSON.stringify(object));\n}\n\n/**\n * Deep extend destination object with N more objects\n * @param {Object} target\n * @param {...Object} sources\n */\nexport function extend(target = {}, ...sources) {\n    if (!sources.length) {\n        return target;\n    }\n\n    const source = sources.shift();\n\n    if (!is.object(source)) {\n        return target;\n    }\n\n    Object.keys(source).forEach(key => {\n        if (is.object(source[key])) {\n            if (!Object.keys(target).includes(key)) {\n                Object.assign(target, { [key]: {} });\n            }\n\n            extend(target[key], source[key]);\n        } else {\n            Object.assign(target, { [key]: source[key] });\n        }\n    });\n\n    return extend(target, ...sources);\n}\n\n/**\n * Safer JSON parsing\n * @param {Object} data\n */\nexport function parseJSON(data = {}) {\n    return new Promise((resolve, reject) => {\n        try {\n            resolve(JSON.parse(data));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// String utils\n// ==========================================================================\n\n// Replace all occurances of a string in a string\nexport function replaceAll(input = '', find = '', replace = '') {\n    return input.replace(\n        new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'),\n        replace.toString(),\n    );\n}\n\n// Convert to title case\nexport function toTitleCase(input = '') {\n    return input.toString().replace(/\\w\\S*/g, text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase());\n}\n\n// Convert string to pascalCase\nexport function toPascalCase(input = '') {\n    let string = input.toString();\n\n    // Convert kebab case\n    string = replaceAll(string, '-', ' ');\n\n    // Convert snake case\n    string = replaceAll(string, '_', ' ');\n\n    // Convert to title case\n    string = toTitleCase(string);\n\n    // Convert to pascal case\n    return replaceAll(string, ' ', '');\n}\n\n// Convert string to pascalCase\nexport function toCamelCase(input = '') {\n    let string = input.toString();\n\n    // Convert to pascal case\n    string = toPascalCase(string);\n\n    // Convert first character to lowercase\n    return string.charAt(0).toLowerCase() + string.slice(1);\n}\n","// ==========================================================================\n// Form Data utils\n// ==========================================================================\n\nimport is from './is';\nimport { cloneDeep } from './objects';\nimport { toPascalCase } from './strings';\n\n/**\n * Convert an Object to FormData\n * @param {Object} source - source Object\n * @param {FormData} form - existing FormData object\n * @param {String} namespace - namespace for FormData\n */\nconst buildFormData = (source = {}, form, namespace) => {\n    const formData = form || new FormData();\n    let formKey;\n    let data = null;\n\n    // Parse as an object\n    try {\n        data = cloneDeep(source);\n    } catch (error) {\n        return formData;\n    }\n\n    // Source must be an object\n    if (!is.object(data)) {\n        return formData;\n    }\n\n    // Loop through the object to convert\n    Object.keys(data).forEach(key => {\n        if (namespace) {\n            formKey = `${namespace}[${key}]`;\n        } else {\n            formKey = key;\n        }\n\n        // If the property is an object, but not a File, use recursivity\n        if (typeof source[key] === 'object' && !(source[key] instanceof File)) {\n            buildFormData(source[key], formData, key);\n        } else {\n            formData.append(toPascalCase(formKey), source[key]);\n        }\n    });\n\n    return formData;\n};\n\nexport default buildFormData;\n","// ==========================================================================\n// Fetch\n// ==========================================================================\n\nimport humps from 'humps';\n\nimport buildFormData from './form-data';\nimport { extend, parseJSON } from './objects';\n\nconst defaults = {\n    type: 'GET',\n    body: {},\n    responseType: 'json',\n};\n\n/**\n * Custom immitation fetch using XHR\n * @param {String} url - The URL of the endpoint\n * @param {Object} options - Object of options for the request\n */\nexport default function(url, options = {}) {\n    const { type, body, responseType } = extend({}, defaults, options);\n\n    return new Promise((resolve, reject) => {\n        try {\n            const xhr = new XMLHttpRequest();\n\n            // Check for CORS support\n            if (!('withCredentials' in xhr)) {\n                const error = new Error('No CORS support');\n                error.request = xhr;\n                throw error;\n            }\n\n            // Handle failures\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status\n            const fail = () => {\n                const error = new Error(xhr.status);\n                error.request = xhr;\n                reject(error);\n            };\n\n            // Successfully made the request\n            xhr.addEventListener('load', () => {\n                const { response } = xhr;\n\n                // Something went wrong either with the request or server\n                if (xhr.status >= 400) {\n                    fail();\n                    return;\n                }\n\n                // Parse JSON responses\n                if (responseType === 'json') {\n                    parseJSON(response)\n                        .then(json => {\n                            if (json.success) {\n                                const data = humps.camelizeKeys(json.data);\n                                resolve(data);\n                            } else {\n                                const error = new Error('Request failed');\n                                error.errors = json.errors;\n                                reject(error);\n                            }\n                        })\n                        .catch(reject);\n                } else {\n                    resolve(response);\n                }\n            });\n\n            // Request failed\n            xhr.addEventListener('error', fail);\n\n            // Start the request\n            xhr.open(type, url, true);\n\n            // Set the required response type\n            // 'json' responseType is much slower, so we parse later\n            // https://github.com/arendjr/fetch-vs-xhr-perf\n            if (responseType !== 'json') {\n                xhr.responseType = responseType;\n            }\n\n            // Send data if passed\n            xhr.send(buildFormData(body));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// Common fetch actions\n// ==========================================================================\n\nimport fetch from './fetch';\n\nconst queue = {};\n\nconst http = {\n    /**\n     * GET remote URL and parse as JSON\n     * @param {String} url - The endpoint URL\n     */\n    get(url) {\n        // Queue requests to prevent hammering\n        if (!Object.keys(queue).includes(url)) {\n            queue[url] = fetch(url);\n\n            const remove = () => {\n                delete queue[url];\n            };\n\n            // Remove from queue on completed\n            queue[url].then(remove).catch(remove);\n        }\n\n        return queue[url];\n    },\n\n    /**\n     * POST to remote URL and parse as JSON\n     * @param {String} url - The endpoint URL\n     * @param {Object} data - The POST data payload\n     */\n    post(url, data = {}) {\n        const options = {\n            type: 'POST',\n            body: data,\n        };\n\n        return fetch(url, options);\n    },\n};\n\nexport default http;\n","// ==========================================================================\n// Local storage wrapper\n// TODO: methods should return promises?\n// ==========================================================================\n\nimport Store from '../models/Store';\nimport { dedupe } from './arrays';\nimport is from './is';\nimport { extend } from './objects';\nimport parseUrl from './parseUrl';\n\nconst storage = new Map();\n\nconst getKey = url => {\n    if (url === null) {\n        return null;\n    }\n\n    const parsed = parseUrl(url);\n\n    if (parsed === null) {\n        return null;\n    }\n\n    return `${parsed.host}${parsed.pathname}`.replace(/\\/$/, '');\n};\n\nclass Storage {\n    constructor(config) {\n        this.config = Object.assign(\n            {\n                keys: {\n                    root: 'selz-js-sdk',\n                    carts: 'carts',\n                    stores: 'stores',\n                },\n                ttl: 3600, // 1 hour\n                schema: new Date('2018-07-02').getTime(), // Schema version (allowing us to change data schema and invalidate storage)\n            },\n            config,\n        );\n\n        this.purge();\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        if (!window.localStorage) {\n            return false;\n        }\n\n        const key = '___test';\n\n        // Try to use it\n        try {\n            window.localStorage.setItem(key, key);\n            window.localStorage.removeItem(key);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        let data = storage.get(this.config.keys.root);\n\n        // Grab from real storage if we can or use faux-storage\n        if (Storage.supported) {\n            const stored = window.localStorage.getItem(this.config.keys.root);\n\n            if (!is.empty(stored)) {\n                data = JSON.parse(stored);\n            }\n        }\n\n        if (is.empty(data)) {\n            return null;\n        }\n\n        if (!is.empty(key)) {\n            return Object.keys(data).includes(key) ? data[key] : null;\n        }\n\n        return data;\n    }\n\n    set(key, value, merge = false) {\n        // Get current storage\n        const data = this.get() || {};\n\n        // Extend with the new data\n        if (merge && Object.keys(data).includes(key)) {\n            data[key] = extend(data[key], value);\n        } else {\n            data[key] = value;\n        }\n\n        // Set in faux-storage\n        storage.set(this.config.keys.root, data);\n\n        // Bail if no real support\n        if (!Storage.supported) {\n            return;\n        }\n\n        // Set schema version\n        data.schema = this.config.schema;\n\n        // Update storage\n        try {\n            window.localStorage.setItem(this.config.keys.root, JSON.stringify(data));\n        } catch (e) {\n            // Do nothing\n        }\n    }\n\n    // Clean up stale storage\n    purge() {\n        // Check schema\n        const data = this.get();\n\n        // Nothing to purge\n        if (is.empty(data)) {\n            return;\n        }\n\n        // If schema does not match, kill it\n        if (Number(data.schema) !== this.config.schema) {\n            window.localStorage.removeItem(this.config.keys.root);\n            return;\n        }\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n\n        // Nothing to cleanup\n        if (is.empty(stores)) {\n            return;\n        }\n\n        // Check TTL is valid\n        this.set(\n            this.config.keys.stores,\n            stores.filter(store => {\n                const ttl = Number(store.ttl);\n                return ttl > 0 && ttl > Date.now();\n            }),\n        );\n    }\n\n    getCarts(store) {\n        const data = this.get(this.config.keys.carts) || {};\n\n        // If no carts\n        if (is.empty(data)) {\n            return null;\n        }\n\n        // Get all carts\n        if (!is.number(store)) {\n            return data;\n        }\n\n        // Store not found\n        if (!Object.keys(data).includes(store.toString())) {\n            return null;\n        }\n\n        // Get all for a store\n        return data[store.toString()];\n    }\n\n    getCart(store, currency) {\n        const carts = this.getCarts(store);\n\n        // No carts\n        if (is.empty(carts)) {\n            return null;\n        }\n\n        // Get all for a store\n        if (!is.string(currency)) {\n            return carts;\n        }\n\n        // Currency not found\n        if (!Object.keys(carts).includes(currency.toUpperCase())) {\n            return null;\n        }\n\n        return carts[currency.toUpperCase()];\n    }\n\n    setCart(store, currency, cart) {\n        this.set(\n            this.config.keys.carts,\n            {\n                [store]: {\n                    [currency.toUpperCase()]: {\n                        id: cart.id,\n                        active: cart.active,\n                    },\n                },\n            },\n            true,\n        );\n    }\n\n    setCarts(store, carts = {}) {\n        this.set(this.config.keys.carts, {\n            [store]: carts,\n        });\n    }\n\n    getStore(input) {\n        let store = null;\n\n        if (!is.number(input) && !is.url(input)) {\n            return null;\n        }\n\n        const stores = this.get(this.config.keys.stores) || [];\n\n        if (is.number(input)) {\n            store = stores.find(s => is.object(s.data) && s.data.id === input);\n        } else if (is.url(input)) {\n            const key = getKey(input);\n\n            // Bail if invalid URL\n            if (key === null) {\n                return null;\n            }\n\n            store = stores.find(s => is.array(s.urls) && s.urls.includes(key));\n        }\n\n        if (!is.object(store)) {\n            return null;\n        }\n\n        // Check TTL is valid\n        const ttl = Number(store.ttl);\n\n        if (ttl > 0 && ttl < Date.now()) {\n            this.purge();\n            return null;\n        }\n\n        return new Store(store.data);\n    }\n\n    setStore(data, url = null) {\n        // Strip the protocol from the lookup url\n        const key = getKey(url);\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n        let existing = null;\n\n        if (!is.empty(stores)) {\n            // Find existing store by id\n            existing = stores.find(s => s.data.id === data.id);\n        }\n\n        // Extend TTL each\n        const ttl = Date.now() + this.config.ttl;\n\n        // If we found something\n        if (is.object(existing)) {\n            // Update data and extend TTL\n            Object.assign(existing, {\n                data,\n                ttl,\n            });\n\n            if (key !== null) {\n                // Add the URL key for later lookup\n                if (!is.array(existing.urls)) {\n                    existing.urls = [key];\n                } else {\n                    existing.urls.push(key);\n                }\n\n                // Remove duplicate entries\n                const urls = dedupe(existing.urls);\n\n                // Add to existing record\n                Object.assign(existing, {\n                    urls,\n                });\n            }\n        } else {\n            const store = {\n                data,\n                ttl,\n            };\n\n            if (key !== null) {\n                Object.assign(store, {\n                    urls: [key],\n                });\n            }\n\n            stores.push(store);\n        }\n\n        this.set(this.config.keys.stores, stores);\n    }\n}\n\nexport default Storage;\n","/**\n * Parse a string to URL object\n * @param {String} url\n */\nexport default function parseUrl(url) {\n    let string = url;\n\n    // Add the protocol if required\n    if (!/^https?:\\/\\/*/.test(url)) {\n        string = `http://${url}`;\n    }\n\n    try {\n        return new URL(string);\n    } catch (e) {\n        return null;\n    }\n}\n","// ==========================================================================\n// Array utils\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Remove duplicates in an array\n * @param {array} array\n */\nexport function dedupe(array) {\n    if (!is.array(array)) {\n        return array;\n    }\n\n    return array.filter((item, index) => array.indexOf(item) === index);\n}\n\n// Rounding methods for .closest()\nconst closestRounding = {\n    none: 0,\n    ceil: 1,\n    floor: 2,\n};\nexport { closestRounding };\n\n/**\n * Get the closest value in an array\n * @param {array} array\n * @param {number} value\n * @param {number} rounding\n */\nexport function closest(array, value, rounding = closestRounding.none) {\n    if (!is.array(array) || !array.length) {\n        return null;\n    }\n\n    return array.reduce((prev, curr) => {\n        if (Math.abs(curr - value) <= Math.abs(prev - value)) {\n            switch (rounding) {\n                case closestRounding.ceil:\n                    return curr >= value ? curr : prev;\n\n                case closestRounding.floor:\n                    return curr <= value ? curr : prev;\n\n                default:\n                    return curr;\n            }\n        }\n\n        return prev;\n    });\n}\n","import config from './config';\nimport { Cart, CartAddItem, CartItem } from './models/Cart';\nimport Category from './models/Category';\nimport Product from './models/Product';\nimport Store from './models/Store';\nimport http from './utils/http';\nimport is from './utils/is';\nimport Storage from './utils/storage';\n\nclass Client {\n    constructor(props) {\n        const { env, store, source } = props;\n\n        this.env = !is.empty(env) ? env : '';\n        this.store = store;\n        this.source = source;\n\n        if (!is.url(store) && !is.number(store)) {\n            throw Error('A store ID or URL is required to create a client');\n        }\n\n        this.storage = new Storage();\n    }\n\n    /**\n     * Get the store ID only\n     */\n    getStoreId() {\n        return new Promise((resolve, reject) => {\n            if (is.number(this.store)) {\n                resolve(this.store);\n                return;\n            }\n\n            if (this.store instanceof Store) {\n                resolve(this.store.id);\n                return;\n            }\n\n            // URL is required\n            if (!is.url(this.store)) {\n                reject(new Error('Url is required for user lookup'));\n            }\n\n            // Get by URL\n            this.getStore()\n                .then(store => {\n                    resolve(store.id);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the Store for current instance\n     */\n    getStore() {\n        return new Promise((resolve, reject) => {\n            // Try from cache by ID or URL\n            if (is.number(this.store) || is.url(this.store)) {\n                const cached = this.storage.getStore(this.store);\n\n                // Return cached if we have it\n                if (cached !== null && cached instanceof Store) {\n                    resolve(cached);\n                    return;\n                }\n            }\n\n            // If already fetched\n            if (this.store instanceof Store) {\n                resolve(this.store);\n                return;\n            }\n\n            // Fetch from remote by ID or URL\n            const url = config.urls.store(this.env, this.store);\n\n            http.get(url)\n                .then(store => {\n                    this.setStore(store);\n                    resolve(this.store);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the store details\n     * @param {object} store\n     */\n    setStore(store) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Store reference to lookup URL\n        const url = is.url(this.store) ? this.store : null;\n\n        // Map to Store\n        this.store = new Store(store);\n\n        // Add to storage for cache\n        this.storage.setStore(this.store, url);\n    }\n\n    /**\n     * Get product data\n     * @param {String} url - Short or full URL for a product\n     */\n    getProduct(url) {\n        return new Promise((resolve, reject) => {\n            http.get(config.urls.product(this.env, url))\n                .then(json => {\n                    if (!(this.store instanceof Store)) {\n                        this.setStore(json.store);\n                    }\n\n                    resolve(new Product(this, json));\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all products\n     */\n    getProducts(keyword = '', category = '', page = 1) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    http.get(\n                        config.urls.products(\n                            this.env,\n                            id,\n                            !is.empty(keyword) ? keyword : '',\n                            is.string(category) ? category : '',\n                            !is.number(page) || page < 1 ? 1 : page,\n                        ),\n                    )\n                        .then(json => {\n                            resolve(\n                                Object.assign({}, json, {\n                                    products: json.products.map(p => new Product(this, p)),\n                                }),\n                            );\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all categories\n     */\n    getCategories() {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    http.get(config.urls.categories(this.env, id))\n                        .then(json => {\n                            resolve(\n                                Object.assign({}, json, {\n                                    categories: json.categories.map(c => new Category(c)),\n                                }),\n                            );\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Buy a product\n     * @param {Object} item - The cart item\n     * @returns {Cart}\n     */\n    buy(item) {\n        return new Promise((resolve, reject) => {\n            if (is.empty(item)) {\n                reject(new Error('A cart item is required'));\n                return;\n            }\n\n            // Map the cart item if required\n            let cartItem = item;\n            if (is.object(item) || item instanceof Product) {\n                cartItem = new CartAddItem(item);\n            }\n\n            if (!(cartItem instanceof CartAddItem)) {\n                reject(new Error('A valid cart item is required'));\n            }\n\n            http.post(config.urls.buy(this.env), cartItem)\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Cache store\n                    this.setStore(cart.store);\n\n                    resolve(cart);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Create a new shopping cart\n     * @param {String} currency - ISO currency code\n     * @param {String} discount - Discount code\n     */\n    createCart(currency, discount) {\n        return new Promise((resolve, reject) => {\n            if (is.empty(currency)) {\n                reject(new Error('currency is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n\n                    http.post(config.urls.createCart(this.env, id), {\n                        currency: currencyCode,\n                        discount: !is.empty(discount) ? discount : null,\n                        source: this.source,\n                    })\n                        .then(json => {\n                            const cart = new Cart(this, json);\n\n                            // Store reference to cart id for later\n                            this.storage.setCart(id, currencyCode, cart);\n\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart or create one if needed\n     * @param {String} currency - The shopping cart ISO currency code\n     */\n    getCartId(currency) {\n        return new Promise((resolve, reject) => {\n            if (!is.currencyCode(currency)) {\n                reject(new Error('A valid currency code is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n                    const currentCart = this.storage.getCart(id, currencyCode);\n\n                    // Create cart if it doesn't exist\n                    if (is.empty(currentCart)) {\n                        this.createCart(currencyCode)\n                            .then(cart => resolve(cart.id))\n                            .catch(reject);\n                    } else {\n                        resolve(currentCart.id);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart\n     * @param {String} input - The shopping cart ISO currency code or cart ID\n     */\n    getCart(input) {\n        return new Promise((resolve, reject) => {\n            const isCurrency = is.currencyCode(input);\n            const isObjectId = is.objectId(input);\n\n            if (!isCurrency && !isObjectId) {\n                reject(new Error('A valid currency code or cart id are required'));\n                return;\n            }\n\n            if (isCurrency) {\n                const currencyCode = input.toUpperCase();\n\n                this.getCartId(currencyCode)\n                    .then(id => {\n                        if (is.empty(id)) {\n                            reject(new Error(`Could not find matching cart for currency code '${currencyCode}'`));\n                            return;\n                        }\n\n                        this.getCart(id)\n                            .then(cart => {\n                                // Update store\n                                this.setStore(cart.store);\n\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    })\n                    .catch(reject);\n            } else {\n                http.get(config.urls.getCart(this.env, input))\n                    .then(json => {\n                        const activeId = this.getActiveCart();\n                        const cart = new Cart(this, json, json.id === activeId);\n\n                        // Update store\n                        this.setStore(cart.store);\n\n                        resolve(cart);\n                    })\n                    .catch(reject);\n            }\n        });\n    }\n\n    /**\n     * Get all current carts\n     */\n    getCarts(validate = true) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (is.empty(carts)) {\n                        resolve(null);\n                        return;\n                    }\n\n                    // Check the carts still exist in the server\n                    if (validate) {\n                        const ids = Object.keys(carts).map(currency => carts[currency].id);\n\n                        http.get(config.urls.checkCarts(this.env, ids.join(',')))\n                            .then(json => {\n                                // Remove non existant carts\n                                Object.entries(json).forEach(([cartId, exists]) => {\n                                    if (!exists) {\n                                        const currency = Object.keys(carts).find(c => carts[c].id === cartId);\n                                        delete carts[currency];\n                                    }\n                                });\n\n                                // Store again\n                                this.storage.setCarts(id, carts);\n\n                                // Set active\n                                if (!Object.values(carts).find(cart => cart.active)) {\n                                    this.setActiveCart()\n                                        .then(resolve)\n                                        .catch(reject);\n                                } else {\n                                    resolve(carts);\n                                }\n                            })\n                            .catch(reject);\n                    } else {\n                        resolve(carts);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the active cart based on currency\n     * @param {String} input - The shopping cart ISO currency code or cart ID\n     */\n    setActiveCart(input = null) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    this.getCarts(false).then(data => {\n                        const carts = data;\n\n                        // No carts\n                        if (is.empty(carts)) {\n                            resolve(null);\n                            return;\n                        }\n\n                        // Currency code was passed...\n                        if (is.currencyCode(input)) {\n                            const currencyCode = input.toUpperCase();\n                            const currencies = Object.keys(carts);\n\n                            // Bail if not included\n                            if (!currencies.includes(currencyCode)) {\n                                reject(new Error(`No carts for ${currencyCode}`));\n                                return;\n                            }\n\n                            // Set active\n                            currencies.forEach(currency => {\n                                carts[currency].active = currency === currencyCode;\n                            });\n                        } else {\n                            // Set to id if specified, otherwise first\n                            const cartId = is.objectId(input) ? input : carts[Object.keys(carts)[0]].id;\n\n                            // Set active\n                            Object.keys(carts).forEach(currency => {\n                                const cart = carts[currency];\n                                cart.active = cart.id === cartId;\n                            });\n                        }\n\n                        // Store again\n                        this.storage.setCarts(id, carts);\n\n                        resolve(carts);\n                    });\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the current active cart\n     */\n    getActiveCart(fetch = false) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (!Object.keys(carts).length) {\n                        resolve(null);\n                        return;\n                    }\n\n                    const active = Object.values(carts).find(cart => cart.active);\n\n                    if (!active) {\n                        resolve(null);\n                        return;\n                    }\n\n                    if (!fetch) {\n                        resolve(active.id);\n                        return;\n                    }\n\n                    this.getCart(active.id)\n                        .then(resolve)\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Add a product to a cart\n     * @param {String} id - The cart ID\n     * @param {Object} item - The cart item\n     */\n    addToCart(id, item) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(item)) {\n                reject(new Error('A cart item is required'));\n                return;\n            }\n\n            // Map the cart item if required\n            let cartItem = item;\n            if (is.object(item) || item instanceof Product) {\n                cartItem = new CartAddItem(item);\n            }\n\n            if (!(cartItem instanceof CartAddItem)) {\n                reject(new Error('A valid cart item is required'));\n            }\n\n            http.post(config.urls.addToCart(this.env, id), cartItem)\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Update an items quantity in the shopping cart\n     * @param {String} id - The shopping cart ID\n     * @param {String} index - The shopping cart item quid\n     * @param {Number} quantity - Desired quantity\n     */\n    updateCartItemQuantity(id, index, quantity = 1) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.updateCartItemQuantity(this.env, id), { index, quantity })\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Remove a product from a cart\n     * @param {String} id - The shopping cart id\n     * @param {String} index - The shopping cart item guid\n     */\n    removeFromCart(id, index) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.removeFromCart(this.env, id), { index })\n                .then(json => {\n                    // If there's actually a cart left, map it\n                    if (!is.empty(json)) {\n                        const cart = new Cart(this, json, true);\n\n                        // Set the active cart\n                        this.setActiveCart(cart.id)\n                            .then(() => {\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    } else {\n                        // Otherwise, update carts (as one removed)\n                        this.getCarts()\n                            .then(() => resolve(null))\n                            .catch(reject);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n}\n\nexport { Product, Category, Cart, CartItem, CartAddItem, Store };\n\nexport default Client;\n"]}