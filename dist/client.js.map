{"version":3,"sources":["src/utils/is.js","src/config.js","src/models/Product.js","src/models/Cart.js","src/models/Store.js","src/utils/strings.js","src/utils/form-data.js","src/utils/objects.js","src/utils/fetch.js","src/utils/http.js","src/utils/storage.js","src/utils/parseUrl.js","src/utils/arrays.js","src/client.js"],"names":["getConstructor","input","constructor","isArray","Array","isObject","Object","isString","String","isNullOrUndefined","isEmpty","length","keys","is","array","object","number","Number","isNaN","string","boolean","Boolean","function","Function","nullOrUndefined","objectId","test","currencyCode","url","strict","arguments","instanceOf","window","URL","concat","hostname","e","empty","getBase","env","config","product","products","id","query","page","store","createCart","getCart","checkCarts","ids","addToCart","updateCartItemQuantity","removeFromCart","client","ProductUrls","a","urls","_classCallCheck","this","assign","ProductImage","image","ProductMedia","media","cover","ProductFile","file","ProductVariant","variant","selected","ProductVariantAttributeOption","label","ProductVariantAttribute","options","map","Product","instance","variantId","images","files","has_variants","variants","has_variant_attributes","variant_attributes","attribute","find","CartItem","item","cartId","variant_id","Cart","cart","active","items","from","index","Store","replaceAll","replace","RegExp","toString","buildFormData","formKey","source","form","namespace","data","FormData","forEach","key","_typeof","File","append","text","charAt","toUpperCase","substr","toLowerCase","toTitleCase","toPascalCase","extend","target","b","sources","d","shift","includes","_defineProperty","apply","defaults","type","body","responseType","fetch","c","Promise","resolve","reject","xhr","XMLHttpRequest","error","Error","request","addEventListener","response","JSON","parse","parseJSON","then","json","success","errors","catch","status","open","send","queue","http","remove","storage","Map","getKey","parsed","parseUrl","host","pathname","Storage","root","carts","stores","ttl","schema","Date","getTime","purge","get","supported","stored","localStorage","getItem","value","merge","set","setItem","stringify","removeItem","filter","now","currency","getCarts","s","existing","push","indexOf","dedupe","Client","props","getStore","cached","setStore","getStoreId","keyword","p","discount","setCart","currentCart","isObjectId","isCurrency","getCartId","activeId","getActiveCart","validate","join","entries","_slicedToArray","setCarts","values","setActiveCart","currencies","quantity"],"mappings":"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","file":"client.js","sourcesContent":["// ==========================================================================\n// Type checking\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\nconst isArray = input => Array.isArray(input);\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObjectId = input => isString(input) && /^[a-f\\d]{24}$/i.test(input);\nconst isCurrencyCode = input => isString(input) && /^[A-z]{3}$/.test(input);\n\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nconst isUrl = (input, strict = false) => {\n    // Accept a URL object\n    if (instanceOf(input, window.URL)) {\n        return true;\n    }\n\n    // Add the protocol if required\n    let string = input;\n    if (!strict && !/^https?:\\/\\/*/.test(input)) {\n        string = `http://${input}`;\n    }\n\n    try {\n        return !isEmpty(new URL(string).hostname);\n    } catch (e) {\n        return false;\n    }\n};\n\nconst is = {\n    array: isArray,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    nullOrUndefined: isNullOrUndefined,\n    objectId: isObjectId,\n    currencyCode: isCurrencyCode,\n    url: isUrl,\n    empty: isEmpty,\n};\n\nexport default is;\n","import is from './utils/is';\n\nconst getBase = env => `https://${is.empty(env) ? 'sdk.selz.com' : `${env}-selz.com/sdk`}/`;\n\nconst config = {\n    urls: {\n        /**\n         * Get URL for product data by URL\n         * @param {string} env - Environment (for internal use)\n         * @param {string} url - Short or full URL for a product\n         */\n        product(env, url = '') {\n            return `${getBase(env)}products/find?url=${url}`;\n        },\n\n        /**\n         * Get URL for all products by store ID\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - The store ID\n         * @param {string} query - Search query\n         * @param {number} page - Page to fetch\n         */\n        products(env, id, query = '', page = 1) {\n            return `${getBase(env)}products/all/${id}?q=${query}&p=${page}`;\n        },\n\n        /**\n         * Get URL for finding a store by URL or ID\n         * @param {string} env - Environment (for internal use)\n         * @param {number|string} input - The ID or URL to lookup\n         */\n        store(env, input = null) {\n            if (is.number(input)) {\n                return `${getBase(env)}store/find/${input}`;\n            }\n\n            return `${getBase(env)}store/find?url=${input}`;\n        },\n\n        /**\n         * Create a new cart\n         * @param {string} env - Environment (for internal use)\n         * @param {number} id - Store ID\n         */\n        createCart(env, id = '') {\n            return `${getBase(env)}cart/create/${id}`;\n        },\n\n        /**\n         * Get cart from ID\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - Cart ID\n         */\n        getCart(env, id = '') {\n            return `${getBase(env)}cart/${id}`;\n        },\n\n        /**\n         * Check carts still exist server side\n         * @param {string} env - Environment (for internal use)\n         * @param {number} id - Cart IDs\n         */\n        checkCarts(env, ids = '') {\n            return `${getBase(env)}cart/verify?ids=${ids}`;\n        },\n\n        /**\n         * Add product to cart\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - Cart ID\n         */\n        addToCart(env, id = '') {\n            return `${getBase(env)}cart/add/${id}`;\n        },\n\n        /**\n         * Update a cart item quantity\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - Cart ID\n         */\n        updateCartItemQuantity(env, id = '') {\n            return `${getBase(env)}cart/updateitemquantity/${id}`;\n        },\n\n        /**\n         * Remove product from cart\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - Cart ID\n         */\n        removeFromCart(env, id = '') {\n            return `${getBase(env)}cart/remove/${id}`;\n        },\n    },\n};\n\nexport default config;\n","import is from '../utils/is';\n\nlet client = null;\n\nclass ProductUrls {\n    constructor(urls) {\n        // Take all properties by default\n        Object.assign(this, urls);\n    }\n}\n\nclass ProductImage {\n    constructor(image) {\n        // Take all properties by default\n        Object.assign(this, image);\n    }\n}\n\nclass ProductMedia {\n    constructor(media) {\n        // Take all properties by default\n        Object.assign(this, media);\n\n        // Map cover image\n        this.cover = new ProductImage(media.cover);\n    }\n}\n\nclass ProductFile {\n    constructor(file) {\n        // Take all properties by default\n        Object.assign(this, file);\n    }\n}\n\nclass ProductVariant {\n    constructor(variant, selected = '') {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        this.selected = variant.id === selected;\n    }\n}\n\nclass ProductVariantAttributeOption {\n    constructor(id, label) {\n        this.id = id;\n        this.label = label;\n    }\n}\n\nclass ProductVariantAttribute {\n    constructor(variant) {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        // Map options\n        this.options = Object.keys(variant.options).map(\n            id => new ProductVariantAttributeOption(id, variant.options[id]),\n        );\n    }\n}\n\nclass Product {\n    constructor(instance, product, variantId = '') {\n        if (!is.object(product)) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, product);\n\n        // Map store\n        this.store = client.store;\n\n        // Product URLs\n        if (is.object(product.urls)) {\n            this.urls = new ProductUrls(product.urls);\n        }\n\n        // Media (Video, YouTube, Vimeo, Audio)\n        if (is.object(product.media)) {\n            this.media = new ProductMedia(product.media);\n        }\n\n        // Images\n        if (is.array(product.images)) {\n            this.images = product.images.map(image => new ProductImage(image));\n        }\n\n        // Files for digital products\n        if (is.array(product.files)) {\n            this.files = product.files.map(file => new ProductFile(file));\n        }\n\n        // Variants\n        if (product.has_variants) {\n            const selected = !is.empty(variantId) ? variantId : product.variants[0].id;\n            this.variants = product.variants.map(variant => new ProductVariant(variant, selected));\n        }\n        if (product.has_variant_attributes) {\n            this.variant_attributes = product.variant_attributes.map(\n                attribute => new ProductVariantAttribute(attribute),\n            );\n        }\n    }\n\n    // eslint-disable-next-line camelcase\n    get selected_variant() {\n        if (is.empty(this.variants)) {\n            return null;\n        }\n\n        return this.variants.find(variant => variant.selected);\n    }\n}\n\nexport default Product;\n","import Product from './Product';\n\nlet client = null;\n\nclass CartItem {\n    constructor(item, cartId) {\n        this.cartId = cartId;\n\n        // Take all properties by default\n        Object.assign(this, item);\n\n        // Map product\n        this.product = new Product(client, item.product, item.variant_id);\n    }\n}\n\nclass Cart {\n    constructor(instance, cart, active = false) {\n        if (cart === null) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, cart);\n\n        // Map store\n        this.store = client.store;\n\n        // Set active state\n        this.active = active;\n\n        // Map items\n        this.items = Array.from(cart.items).map(item => new CartItem(item, cart.id));\n    }\n\n    /**\n     * Add a product to this cart\n     * @param {object} product - The product details\n     */\n    add(product) {\n        return client.addToCart(this.id, product);\n    }\n\n    /**\n     * Remove a product from this cart\n     * @param {string} index\n     */\n    remove(index) {\n        return client.removeFromCart(this.id, index);\n    }\n}\n\nexport default Cart;\n","import is from '../utils/is';\n\nclass Store {\n    constructor(store = null) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, store);\n    }\n}\n\nexport default Store;\n","// ==========================================================================\n// String utils\n// ==========================================================================\n\n// Replace all occurances of a string in a string\nexport function replaceAll(input = '', find = '', replace = '') {\n    return input.replace(\n        new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'),\n        replace.toString(),\n    );\n}\n\n// Convert to title case\nexport function toTitleCase(input = '') {\n    return input.toString().replace(/\\w\\S*/g, text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase());\n}\n\n// Convert string to pascalCase\nexport function toPascalCase(input = '') {\n    let string = input.toString();\n\n    // Convert kebab case\n    string = replaceAll(string, '-', ' ');\n\n    // Convert snake case\n    string = replaceAll(string, '_', ' ');\n\n    // Convert to title case\n    string = toTitleCase(string);\n\n    // Convert to pascal case\n    return replaceAll(string, ' ', '');\n}\n\n// Convert string to pascalCase\nexport function toCamelCase(input = '') {\n    let string = input.toString();\n\n    // Convert to pascal case\n    string = toPascalCase(string);\n\n    // Convert first character to lowercase\n    return string.charAt(0).toLowerCase() + string.slice(1);\n}\n","// ==========================================================================\n// Form Data utils\n// ==========================================================================\n\nimport is from './is';\nimport { toPascalCase } from './strings';\n\n/**\n * Convert an Object to FormData\n * @param {Object} source - source Object\n * @param {FormData} form - existing FormData object\n * @param {String} namespace - namespace for FormData\n */\nconst buildFormData = (source = {}, form, namespace) => {\n    const data = form || new FormData();\n    let formKey;\n\n    // Source must be an object\n    if (!is.object(source)) {\n        return data;\n    }\n\n    // Loop through the object to convert\n    Object.keys(source).forEach(key => {\n        if (namespace) {\n            formKey = `${namespace}[${key}]`;\n        } else {\n            formKey = key;\n        }\n\n        // If the property is an object, but not a File, use recursivity\n        if (typeof source[key] === 'object' && !(source[key] instanceof File)) {\n            buildFormData(source[key], data, key);\n        } else {\n            data.append(toPascalCase(formKey), source[key]);\n        }\n    });\n\n    return data;\n};\n\nexport default buildFormData;\n","// ==========================================================================\n// Extend objects\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Deep extend destination object with N more objects\n * @param {Object} target\n * @param {...Object} sources\n */\nexport function extend(target = {}, ...sources) {\n    if (!sources.length) {\n        return target;\n    }\n\n    const source = sources.shift();\n\n    if (!is.object(source)) {\n        return target;\n    }\n\n    Object.keys(source).forEach(key => {\n        if (is.object(source[key])) {\n            if (!Object.keys(target).includes(key)) {\n                Object.assign(target, { [key]: {} });\n            }\n\n            extend(target[key], source[key]);\n        } else {\n            Object.assign(target, { [key]: source[key] });\n        }\n    });\n\n    return extend(target, ...sources);\n}\n\n/**\n * Safer JSON parsing\n * @param {Object} data\n */\nexport function parseJSON(data = {}) {\n    return new Promise((resolve, reject) => {\n        try {\n            resolve(JSON.parse(data));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// Fetch\n// ==========================================================================\n\nimport buildFormData from './form-data';\nimport { extend, parseJSON } from './objects';\n\nconst defaults = {\n    type: 'GET',\n    body: {},\n    responseType: 'json',\n};\n\n/**\n * Custom immitation fetch using XHR\n * @param {string} url - The URL of the endpoint\n * @param {object} options - Object of options for the request\n */\nexport default function(url, options = {}) {\n    const { type, body, responseType } = extend({}, defaults, options);\n\n    return new Promise((resolve, reject) => {\n        try {\n            const xhr = new XMLHttpRequest();\n\n            // Check for CORS support\n            if (!('withCredentials' in xhr)) {\n                const error = new Error('No CORS support');\n                error.request = xhr;\n                throw error;\n            }\n\n            xhr.addEventListener('load', () => {\n                const { response } = xhr;\n\n                // Parse JSON responses\n                if (responseType === 'json') {\n                    parseJSON(response)\n                        .then(json => {\n                            if (json.success) {\n                                resolve(json.data);\n                            } else {\n                                const error = new Error('Request failed');\n                                error.errors = json.errors;\n                                throw error;\n                            }\n                        })\n                        .catch(reject);\n                } else {\n                    resolve(response);\n                }\n            });\n\n            xhr.addEventListener('error', () => {\n                const error = new Error(xhr.status);\n                error.request = xhr;\n                throw error;\n            });\n\n            // Start the request\n            xhr.open(type, url, true);\n\n            // Set the required response type\n            // 'json' responseType is much slower, so we parse later\n            // https://github.com/arendjr/fetch-vs-xhr-perf\n            if (responseType !== 'json') {\n                xhr.responseType = responseType;\n            }\n\n            // Send data if passed\n            xhr.send(buildFormData(body));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// Common fetch actions\n// ==========================================================================\n\nimport fetch from './fetch';\n\nconst queue = {};\n\nconst http = {\n    /**\n     * GET remote URL and parse as JSON\n     * @param {string} url - The endpoint URL\n     */\n    get(url) {\n        // Queue requests to prevent hammering\n        if (!Object.keys(queue).includes(url)) {\n            queue[url] = fetch(url);\n\n            const remove = () => {\n                delete queue[url];\n            };\n\n            // Remove from queue on completed\n            queue[url].then(remove).catch(remove);\n        }\n\n        return queue[url];\n    },\n\n    /**\n     * POST to remote URL and parse as JSON\n     * @param {string} url - The endpoint URL\n     * @param {object} data - The POST data payload\n     */\n    post(url, data = {}) {\n        const options = {\n            type: 'POST',\n            body: data,\n        };\n\n        return fetch(url, options);\n    },\n};\n\nexport default http;\n","// ==========================================================================\n// Local storage wrapper\n// TODO: methods should return promises?\n// ==========================================================================\n\nimport Store from '../models/Store';\nimport { dedupe } from './arrays';\nimport is from './is';\nimport { extend } from './objects';\nimport parseUrl from './parseUrl';\n\nconst storage = new Map();\n\nconst getKey = url => {\n    if (url === null) {\n        return null;\n    }\n\n    const parsed = parseUrl(url);\n\n    if (parsed === null) {\n        return null;\n    }\n\n    return `${parsed.host}${parsed.pathname}`.replace(/\\/$/, '');\n};\n\nclass Storage {\n    constructor(config) {\n        this.config = Object.assign(\n            {\n                keys: {\n                    root: 'selz-js-sdk',\n                    carts: 'carts',\n                    stores: 'stores',\n                },\n                ttl: 3600, // 1 hour\n                schema: new Date('2018-07-02').getTime(), // Schema version (allowing us to change data schema and invalidate storage)\n            },\n            config,\n        );\n\n        this.purge();\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        if (!window.localStorage) {\n            return false;\n        }\n\n        const key = '___test';\n\n        // Try to use it\n        try {\n            window.localStorage.setItem(key, key);\n            window.localStorage.removeItem(key);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        let data = storage.get(this.config.keys.root);\n\n        // Grab from real storage if we can or use faux-storage\n        if (Storage.supported) {\n            const stored = window.localStorage.getItem(this.config.keys.root);\n\n            if (!is.empty(stored)) {\n                data = JSON.parse(stored);\n            }\n        }\n\n        if (is.empty(data)) {\n            return null;\n        }\n\n        if (!is.empty(key)) {\n            return Object.keys(data).includes(key) ? data[key] : null;\n        }\n\n        return data;\n    }\n\n    set(key, value, merge = false) {\n        // Get current storage\n        const data = this.get() || {};\n\n        // Extend with the new data\n        if (merge && Object.keys(data).includes(key)) {\n            data[key] = extend(data[key], value);\n        } else {\n            data[key] = value;\n        }\n\n        // Set in faux-storage\n        storage.set(this.config.keys.root, data);\n\n        // Bail if no real support\n        if (!Storage.supported) {\n            return;\n        }\n\n        // Set schema version\n        data.schema = this.config.schema;\n\n        // Update storage\n        try {\n            window.localStorage.setItem(this.config.keys.root, JSON.stringify(data));\n        } catch (e) {\n            // Do nothing\n        }\n    }\n\n    // Clean up stale storage\n    purge() {\n        // Check schema\n        const data = this.get();\n\n        // Nothing to purge\n        if (is.empty(data)) {\n            return;\n        }\n\n        // If schema does not match, kill it\n        if (Number(data.schema) !== this.config.schema) {\n            window.localStorage.removeItem(this.config.keys.root);\n            return;\n        }\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n\n        // Nothing to cleanup\n        if (is.empty(stores)) {\n            return;\n        }\n\n        // Check TTL is valid\n        this.set(\n            this.config.keys.stores,\n            stores.filter(store => {\n                const ttl = Number(store.ttl);\n                return ttl > 0 && ttl > Date.now();\n            }),\n        );\n    }\n\n    getCarts(store) {\n        const data = this.get(this.config.keys.carts) || {};\n\n        // If no carts\n        if (is.empty(data)) {\n            return null;\n        }\n\n        // Get all carts\n        if (!is.number(store)) {\n            return data;\n        }\n\n        // Store not found\n        if (!Object.keys(data).includes(store.toString())) {\n            return null;\n        }\n\n        // Get all for a store\n        return data[store.toString()];\n    }\n\n    getCart(store, currency) {\n        const carts = this.getCarts(store);\n\n        // No carts\n        if (is.empty(carts)) {\n            return null;\n        }\n\n        // Get all for a store\n        if (!is.string(currency)) {\n            return carts;\n        }\n\n        // Currency not found\n        if (!Object.keys(carts).includes(currency.toUpperCase())) {\n            return null;\n        }\n\n        return carts[currency.toUpperCase()];\n    }\n\n    setCart(store, currency, cart) {\n        this.set(\n            this.config.keys.carts,\n            {\n                [store]: {\n                    [currency.toUpperCase()]: {\n                        id: cart.id,\n                        active: cart.active,\n                    },\n                },\n            },\n            true,\n        );\n    }\n\n    setCarts(store, carts = {}) {\n        this.set(this.config.keys.carts, {\n            [store]: carts,\n        });\n    }\n\n    getStore(input) {\n        let store = null;\n\n        if (!is.number(input) && !is.url(input)) {\n            return null;\n        }\n\n        const stores = this.get(this.config.keys.stores) || [];\n\n        if (is.number(input)) {\n            store = stores.find(s => is.object(s.data) && s.data.id === input);\n        } else if (is.url(input)) {\n            const key = getKey(input);\n\n            // Bail if invalid URL\n            if (key === null) {\n                return null;\n            }\n\n            store = stores.find(s => is.array(s.urls) && s.urls.includes(key));\n        }\n\n        if (!is.object(store)) {\n            return null;\n        }\n\n        // Check TTL is valid\n        const ttl = Number(store.ttl);\n\n        if (ttl > 0 && ttl < Date.now()) {\n            this.purge();\n            return null;\n        }\n\n        return new Store(store.data);\n    }\n\n    setStore(data, url = null) {\n        // Strip the protocol from the lookup url\n        const key = getKey(url);\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n        let existing = null;\n\n        if (!is.empty(stores)) {\n            // Find existing store by id\n            existing = stores.find(s => s.data.id === data.id);\n        }\n\n        // Extend TTL each\n        const ttl = Date.now() + this.config.ttl;\n\n        // If we found something\n        if (is.object(existing)) {\n            // Update data and extend TTL\n            Object.assign(existing, {\n                data,\n                ttl,\n            });\n\n            if (key !== null) {\n                // Add the URL key for later lookup\n                if (!is.array(existing.urls)) {\n                    existing.urls = [key];\n                } else {\n                    existing.urls.push(key);\n                }\n\n                // Remove duplicate entries\n                const urls = dedupe(existing.urls);\n\n                // Add to existing record\n                Object.assign(existing, {\n                    urls,\n                });\n            }\n        } else {\n            const store = {\n                data,\n                ttl,\n            };\n\n            if (key !== null) {\n                Object.assign(store, {\n                    urls: [key],\n                });\n            }\n\n            stores.push(store);\n        }\n\n        this.set(this.config.keys.stores, stores);\n    }\n}\n\nexport default Storage;\n","/**\n * Parse a string to URL object\n * @param {String} url\n */\nexport default function parseUrl(url) {\n    let string = url;\n\n    // Add the protocol if required\n    if (!/^https?:\\/\\/*/.test(url)) {\n        string = `http://${url}`;\n    }\n\n    try {\n        return new URL(string);\n    } catch (e) {\n        return null;\n    }\n}\n","// ==========================================================================\n// Array utils\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Remove duplicates in an array\n * @param {array} array\n */\nexport function dedupe(array) {\n    if (!is.array(array)) {\n        return array;\n    }\n\n    return array.filter((item, index) => array.indexOf(item) === index);\n}\n\n// Rounding methods for .closest()\nconst closestRounding = {\n    none: 0,\n    ceil: 1,\n    floor: 2,\n};\nexport { closestRounding };\n\n/**\n * Get the closest value in an array\n * @param {array} array\n * @param {number} value\n * @param {number} rounding\n */\nexport function closest(array, value, rounding = closestRounding.none) {\n    if (!is.array(array) || !array.length) {\n        return null;\n    }\n\n    return array.reduce((prev, curr) => {\n        if (Math.abs(curr - value) <= Math.abs(prev - value)) {\n            switch (rounding) {\n                case closestRounding.ceil:\n                    return curr >= value ? curr : prev;\n\n                case closestRounding.floor:\n                    return curr <= value ? curr : prev;\n\n                default:\n                    return curr;\n            }\n        }\n\n        return prev;\n    });\n}\n","import config from './config';\nimport Cart from './models/Cart';\nimport Product from './models/Product';\nimport Store from './models/Store';\nimport http from './utils/http';\nimport is from './utils/is';\nimport Storage from './utils/storage';\n\nclass Client {\n    constructor(props) {\n        const { env, store } = props;\n\n        this.env = !is.empty(env) ? env : '';\n        this.store = store;\n\n        if (!is.url(store) && !is.number(store)) {\n            throw Error('A store ID or URL is required to create a client');\n        }\n\n        this.storage = new Storage();\n    }\n\n    /**\n     * Get the store ID only\n     */\n    getStoreId() {\n        return new Promise((resolve, reject) => {\n            if (is.number(this.store)) {\n                resolve(this.store);\n                return;\n            }\n\n            if (this.store instanceof Store) {\n                resolve(this.store.id);\n                return;\n            }\n\n            // URL is required\n            if (!is.url(this.store)) {\n                reject(new Error('Url is required for user lookup'));\n            }\n\n            // Get by URL\n            this.getStore()\n                .then(store => {\n                    resolve(store.id);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the Store for current instance\n     */\n    getStore() {\n        return new Promise((resolve, reject) => {\n            // Try from cache by ID or URL\n            if (is.number(this.store) || is.url(this.store)) {\n                const cached = this.storage.getStore(this.store);\n\n                // Return cached if we have it\n                if (cached !== null && cached instanceof Store) {\n                    resolve(cached);\n                    return;\n                }\n            }\n\n            // If already fetched\n            if (this.store instanceof Store) {\n                resolve(this.store);\n                return;\n            }\n\n            // Fetch from remote by ID or URL\n            const url = config.urls.store(this.env, this.store);\n\n            http.get(url)\n                .then(store => {\n                    this.setStore(store);\n                    resolve(this.store);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the store details\n     * @param {object} store\n     */\n    setStore(store) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Store reference to lookup URL\n        const url = is.url(this.store) ? this.store : null;\n\n        // Map to Store\n        this.store = new Store(store);\n\n        // Add to storage for cache\n        this.storage.setStore(this.store, url);\n    }\n\n    /**\n     * Get product data\n     * @param {string} url - Short or full URL for a product\n     */\n    getProduct(url) {\n        return new Promise((resolve, reject) => {\n            http.get(config.urls.product(this.env, url))\n                .then(json => {\n                    if (!(this.store instanceof Store)) {\n                        this.setStore(json.store);\n                    }\n\n                    resolve(new Product(this, json));\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all products\n     */\n    getProducts(query = '', page = 1) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const keyword = !is.empty(query) ? query : '';\n\n                    http.get(config.urls.products(this.env, id, keyword, page < 1 ? 1 : page))\n                        .then(json => {\n                            resolve(json.map(p => new Product(this, p)));\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Create a new shopping cart\n     * @param {string} currency - ISO currency code\n     * @param {string} discount - Discount code\n     */\n    createCart(currency, discount) {\n        return new Promise((resolve, reject) => {\n            if (is.empty(currency)) {\n                reject(new Error('currency is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n\n                    http.post(config.urls.createCart(this.env, id), {\n                        currency: currencyCode,\n                        discount: !is.empty(discount) ? discount : null,\n                    })\n                        .then(json => {\n                            const cart = new Cart(this, json);\n\n                            // Store reference to cart id for later\n                            this.storage.setCart(id, currencyCode, cart);\n\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart or create one if needed\n     * @param {string} currency - The shopping cart ISO currency code\n     */\n    getCartId(currency) {\n        return new Promise((resolve, reject) => {\n            if (!is.currencyCode(currency)) {\n                reject(new Error('A valid currency code is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n                    const currentCart = this.storage.getCart(id, currencyCode);\n\n                    // Create cart if it doesn't exist\n                    if (is.empty(currentCart)) {\n                        this.createCart(currencyCode)\n                            .then(cart => resolve(cart.id))\n                            .catch(reject);\n                    } else {\n                        resolve(currentCart.id);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart\n     * @param {string} input - The shopping cart ISO currency code or cart ID\n     */\n    getCart(input) {\n        return new Promise((resolve, reject) => {\n            const isCurrency = is.currencyCode(input);\n            const isObjectId = is.objectId(input);\n\n            if (!isCurrency && !isObjectId) {\n                reject(new Error('A valid currency code or cart id are required'));\n                return;\n            }\n\n            if (isCurrency) {\n                const currencyCode = input.toUpperCase();\n\n                this.getCartId(currencyCode)\n                    .then(id => {\n                        if (is.empty(id)) {\n                            reject(new Error(`Could not find matching cart for currency code '${currencyCode}'`));\n                            return;\n                        }\n\n                        this.getCart(id)\n                            .then(cart => {\n                                // Update store\n                                this.setStore(cart.store);\n\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    })\n                    .catch(reject);\n            } else {\n                http.get(config.urls.getCart(this.env, input))\n                    .then(json => {\n                        const activeId = this.getActiveCart();\n                        const cart = new Cart(this, json, json.id === activeId);\n\n                        // Update store\n                        this.setStore(cart.store);\n\n                        resolve(cart);\n                    })\n                    .catch(reject);\n            }\n        });\n    }\n\n    /**\n     * Get all current carts\n     */\n    getCarts(validate = true) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (is.empty(carts)) {\n                        resolve(null);\n                        return;\n                    }\n\n                    // Check the carts still exist in the server\n                    if (validate) {\n                        const ids = Object.keys(carts).map(currency => carts[currency].id);\n\n                        http.get(config.urls.checkCarts(this.env, ids.join(',')))\n                            .then(json => {\n                                // Remove non existant carts\n                                Object.entries(json).forEach(([cartId, exists]) => {\n                                    if (!exists) {\n                                        const currency = Object.keys(carts).find(c => carts[c].id === cartId);\n                                        delete carts[currency];\n                                    }\n                                });\n\n                                // Store again\n                                this.storage.setCarts(id, carts);\n\n                                // Set active\n                                if (!Object.values(carts).find(cart => cart.active)) {\n                                    this.setActiveCart()\n                                        .then(resolve)\n                                        .catch(reject);\n                                } else {\n                                    resolve(carts);\n                                }\n                            })\n                            .catch(reject);\n                    } else {\n                        resolve(carts);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the active cart based on currency\n     * @param {string} input - The shopping cart ISO currency code or cart ID\n     */\n    setActiveCart(input = null) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    this.getCarts(false).then(data => {\n                        const carts = data;\n\n                        // No carts\n                        if (is.empty(carts)) {\n                            resolve(null);\n                            return;\n                        }\n\n                        // Currency code was passed...\n                        if (is.currencyCode(input)) {\n                            const currencyCode = input.toUpperCase();\n                            const currencies = Object.keys(carts);\n\n                            // Bail if not included\n                            if (!currencies.includes(currencyCode)) {\n                                reject(new Error(`No carts for ${currencyCode}`));\n                                return;\n                            }\n\n                            // Set active\n                            currencies.forEach(currency => {\n                                carts[currency].active = currency === currencyCode;\n                            });\n                        } else {\n                            // Set to id if specified, otherwise first\n                            const cartId = is.objectId(input) ? input : carts[Object.keys(carts)[0]].id;\n\n                            // Set active\n                            Object.keys(carts).forEach(currency => {\n                                const cart = carts[currency];\n                                cart.active = cart.id === cartId;\n                            });\n                        }\n\n                        // Store again\n                        this.storage.setCarts(id, carts);\n\n                        resolve(carts);\n                    });\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the current active cart\n     */\n    getActiveCart(fetch = false) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (!Object.keys(carts).length) {\n                        resolve(null);\n                        return;\n                    }\n\n                    const active = Object.values(carts).find(cart => cart.active);\n\n                    if (!active) {\n                        resolve(null);\n                        return;\n                    }\n\n                    if (!fetch) {\n                        resolve(active.id);\n                        return;\n                    }\n\n                    this.getCart(active.id)\n                        .then(resolve)\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Add a product to a cart\n     * @param {string} id - The cart ID\n     * @param {object} product - The product details\n     */\n    addToCart(id, product) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(product)) {\n                reject(new Error('A valid product is required'));\n                return;\n            }\n\n            http.post(config.urls.addToCart(this.env, id), product)\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Update an items quantity in the shopping cart\n     * @param {string} id - The shopping cart ID\n     * @param {string} index - The shopping cart item quid\n     * @param {number} quantity - Desired quantity\n     */\n    updateCartItemQuantity(id, index, quantity = 1) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.updateCartItemQuantity(this.env, id), { index, quantity })\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Remove a product from a cart\n     * @param {string} id - The shopping cart id\n     * @param {string} index - The shopping cart item guid\n     */\n    removeFromCart(id, index) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.removeFromCart(this.env, id), { index })\n                .then(json => {\n                    // If there's actually a cart left, map it\n                    if (!is.empty(json)) {\n                        const cart = new Cart(this, json, true);\n\n                        // Set the active cart\n                        this.setActiveCart(cart.id)\n                            .then(() => {\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    } else {\n                        // Otherwise, update carts (as one removed)\n                        this.getCarts()\n                            .then(() => resolve(null))\n                            .catch(reject);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n}\n\nexport { Product, Cart, Store };\n\nexport default Client;\n"]}