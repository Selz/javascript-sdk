{"version":3,"sources":["src/client.js","src/utils/is.js","src/config.js","src/models/Product.js","src/models/Cart.js","src/models/Category.js","src/models/Store.js","src/utils/strings.js","src/utils/form-data.js","src/utils/objects.js","src/utils/fetch.js","src/utils/http.js","src/utils/arrays.js","src/utils/parseUrl.js","src/utils/storage.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","_defineProperty","value","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","Array","isArray","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","getConstructor","input","instanceOf","isObject","isNumber","Number","isNaN","isString","String","isBoolean","Boolean","isFunction","Function","isNullOrUndefined","isObjectId","test","isCurrencyCode","isEmpty","keys","isUrl","strict","arguments","window","URL","string","concat","hostname","e","is","array","object","number","boolean","function","nullOrUndefined","objectId","currencyCode","url","empty","getBase","env","config","urls","product","products","id","keyword","category","page","categories","store","createCart","getCart","checkCarts","ids","addToCart","updateCartItemQuantity","removeFromCart","client","ProductUrls","a","this","assign","ProductImage","image","ProductMedia","media","cover","ProductFile","file","ProductVariant","variant","selected","ProductVariantAttributeOption","label","ProductVariantAttribute","options","map","Product","variantId","images","files","has_variants","variants","has_variant_attributes","variant_attributes","attribute","get","find","CartItem","item","cartId","variant_id","Cart","cart","active","items","from","index","Category","Store","replaceAll","replace","RegExp","toString","toTitleCase","text","charAt","toUpperCase","substr","toLowerCase","toPascalCase","buildFormData","formKey","source","form","namespace","data","FormData","forEach","File","append","extend","b","sources","d","shift","includes","apply","parseJSON","Promise","resolve","reject","JSON","parse","error","defaults","type","body","responseType","fetch","c","xhr","XMLHttpRequest","Error","request","addEventListener","response","then","json","success","errors","catch","status","open","send","queue","http","remove","post","dedupe","filter","indexOf","parseUrl","storage","Map","getKey","parsed","host","pathname","Storage","root","carts","stores","ttl","schema","Date","getTime","purge","supported","stored","localStorage","getItem","merge","set","setItem","stringify","removeItem","now","currency","getCarts","s","existing","Client","getStore","cached","setStore","getStoreId","p","discount","setCart","currentCart","isCurrency","getCartId","activeId","getActiveCart","validate","join","entries","setCarts","values","setActiveCart","currencies","quantity"],"mappings":"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","file":"client.mjs","sourcesContent":["import config from './config';\nimport Cart from './models/Cart';\nimport Category from './models/Category';\nimport Product from './models/Product';\nimport Store from './models/Store';\nimport http from './utils/http';\nimport is from './utils/is';\nimport Storage from './utils/storage';\n\nclass Client {\n    constructor(props) {\n        const { env, store } = props;\n\n        this.env = !is.empty(env) ? env : '';\n        this.store = store;\n\n        if (!is.url(store) && !is.number(store)) {\n            throw Error('A store ID or URL is required to create a client');\n        }\n\n        this.storage = new Storage();\n    }\n\n    /**\n     * Get the store ID only\n     */\n    getStoreId() {\n        return new Promise((resolve, reject) => {\n            if (is.number(this.store)) {\n                resolve(this.store);\n                return;\n            }\n\n            if (this.store instanceof Store) {\n                resolve(this.store.id);\n                return;\n            }\n\n            // URL is required\n            if (!is.url(this.store)) {\n                reject(new Error('Url is required for user lookup'));\n            }\n\n            // Get by URL\n            this.getStore()\n                .then(store => {\n                    resolve(store.id);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the Store for current instance\n     */\n    getStore() {\n        return new Promise((resolve, reject) => {\n            // Try from cache by ID or URL\n            if (is.number(this.store) || is.url(this.store)) {\n                const cached = this.storage.getStore(this.store);\n\n                // Return cached if we have it\n                if (cached !== null && cached instanceof Store) {\n                    resolve(cached);\n                    return;\n                }\n            }\n\n            // If already fetched\n            if (this.store instanceof Store) {\n                resolve(this.store);\n                return;\n            }\n\n            // Fetch from remote by ID or URL\n            const url = config.urls.store(this.env, this.store);\n\n            http.get(url)\n                .then(store => {\n                    this.setStore(store);\n                    resolve(this.store);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the store details\n     * @param {object} store\n     */\n    setStore(store) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Store reference to lookup URL\n        const url = is.url(this.store) ? this.store : null;\n\n        // Map to Store\n        this.store = new Store(store);\n\n        // Add to storage for cache\n        this.storage.setStore(this.store, url);\n    }\n\n    /**\n     * Get product data\n     * @param {String} url - Short or full URL for a product\n     */\n    getProduct(url) {\n        return new Promise((resolve, reject) => {\n            http.get(config.urls.product(this.env, url))\n                .then(json => {\n                    if (!(this.store instanceof Store)) {\n                        this.setStore(json.store);\n                    }\n\n                    resolve(new Product(this, json));\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all products\n     */\n    getProducts(keyword = '', category = '', page = 1) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    http.get(\n                        config.urls.products(\n                            this.env,\n                            id,\n                            !is.empty(keyword) ? keyword : '',\n                            category,\n                            page < 1 ? 1 : page,\n                        ),\n                    )\n                        .then(json => {\n                            resolve(\n                                Object.assign(json, {\n                                    products: json.products.map(p => new Product(this, p)),\n                                }),\n                            );\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all categories\n     */\n    getCategories() {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    http.get(config.urls.categories(this.env, id))\n                        .then(json => {\n                            resolve(\n                                Object.assign(json, {\n                                    categories: json.categories.map(c => new Category(c)),\n                                }),\n                            );\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Create a new shopping cart\n     * @param {String} currency - ISO currency code\n     * @param {String} discount - Discount code\n     */\n    createCart(currency, discount) {\n        return new Promise((resolve, reject) => {\n            if (is.empty(currency)) {\n                reject(new Error('currency is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n\n                    http.post(config.urls.createCart(this.env, id), {\n                        currency: currencyCode,\n                        discount: !is.empty(discount) ? discount : null,\n                    })\n                        .then(json => {\n                            const cart = new Cart(this, json);\n\n                            // Store reference to cart id for later\n                            this.storage.setCart(id, currencyCode, cart);\n\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart or create one if needed\n     * @param {String} currency - The shopping cart ISO currency code\n     */\n    getCartId(currency) {\n        return new Promise((resolve, reject) => {\n            if (!is.currencyCode(currency)) {\n                reject(new Error('A valid currency code is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n                    const currentCart = this.storage.getCart(id, currencyCode);\n\n                    // Create cart if it doesn't exist\n                    if (is.empty(currentCart)) {\n                        this.createCart(currencyCode)\n                            .then(cart => resolve(cart.id))\n                            .catch(reject);\n                    } else {\n                        resolve(currentCart.id);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart\n     * @param {String} input - The shopping cart ISO currency code or cart ID\n     */\n    getCart(input) {\n        return new Promise((resolve, reject) => {\n            const isCurrency = is.currencyCode(input);\n            const isObjectId = is.objectId(input);\n\n            if (!isCurrency && !isObjectId) {\n                reject(new Error('A valid currency code or cart id are required'));\n                return;\n            }\n\n            if (isCurrency) {\n                const currencyCode = input.toUpperCase();\n\n                this.getCartId(currencyCode)\n                    .then(id => {\n                        if (is.empty(id)) {\n                            reject(new Error(`Could not find matching cart for currency code '${currencyCode}'`));\n                            return;\n                        }\n\n                        this.getCart(id)\n                            .then(cart => {\n                                // Update store\n                                this.setStore(cart.store);\n\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    })\n                    .catch(reject);\n            } else {\n                http.get(config.urls.getCart(this.env, input))\n                    .then(json => {\n                        const activeId = this.getActiveCart();\n                        const cart = new Cart(this, json, json.id === activeId);\n\n                        // Update store\n                        this.setStore(cart.store);\n\n                        resolve(cart);\n                    })\n                    .catch(reject);\n            }\n        });\n    }\n\n    /**\n     * Get all current carts\n     */\n    getCarts(validate = true) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (is.empty(carts)) {\n                        resolve(null);\n                        return;\n                    }\n\n                    // Check the carts still exist in the server\n                    if (validate) {\n                        const ids = Object.keys(carts).map(currency => carts[currency].id);\n\n                        http.get(config.urls.checkCarts(this.env, ids.join(',')))\n                            .then(json => {\n                                // Remove non existant carts\n                                Object.entries(json).forEach(([cartId, exists]) => {\n                                    if (!exists) {\n                                        const currency = Object.keys(carts).find(c => carts[c].id === cartId);\n                                        delete carts[currency];\n                                    }\n                                });\n\n                                // Store again\n                                this.storage.setCarts(id, carts);\n\n                                // Set active\n                                if (!Object.values(carts).find(cart => cart.active)) {\n                                    this.setActiveCart()\n                                        .then(resolve)\n                                        .catch(reject);\n                                } else {\n                                    resolve(carts);\n                                }\n                            })\n                            .catch(reject);\n                    } else {\n                        resolve(carts);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the active cart based on currency\n     * @param {String} input - The shopping cart ISO currency code or cart ID\n     */\n    setActiveCart(input = null) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    this.getCarts(false).then(data => {\n                        const carts = data;\n\n                        // No carts\n                        if (is.empty(carts)) {\n                            resolve(null);\n                            return;\n                        }\n\n                        // Currency code was passed...\n                        if (is.currencyCode(input)) {\n                            const currencyCode = input.toUpperCase();\n                            const currencies = Object.keys(carts);\n\n                            // Bail if not included\n                            if (!currencies.includes(currencyCode)) {\n                                reject(new Error(`No carts for ${currencyCode}`));\n                                return;\n                            }\n\n                            // Set active\n                            currencies.forEach(currency => {\n                                carts[currency].active = currency === currencyCode;\n                            });\n                        } else {\n                            // Set to id if specified, otherwise first\n                            const cartId = is.objectId(input) ? input : carts[Object.keys(carts)[0]].id;\n\n                            // Set active\n                            Object.keys(carts).forEach(currency => {\n                                const cart = carts[currency];\n                                cart.active = cart.id === cartId;\n                            });\n                        }\n\n                        // Store again\n                        this.storage.setCarts(id, carts);\n\n                        resolve(carts);\n                    });\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the current active cart\n     */\n    getActiveCart(fetch = false) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (!Object.keys(carts).length) {\n                        resolve(null);\n                        return;\n                    }\n\n                    const active = Object.values(carts).find(cart => cart.active);\n\n                    if (!active) {\n                        resolve(null);\n                        return;\n                    }\n\n                    if (!fetch) {\n                        resolve(active.id);\n                        return;\n                    }\n\n                    this.getCart(active.id)\n                        .then(resolve)\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Add a product to a cart\n     * @param {String} id - The cart ID\n     * @param {Object} product - The product details\n     */\n    addToCart(id, product) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(product)) {\n                reject(new Error('A valid product is required'));\n                return;\n            }\n\n            http.post(config.urls.addToCart(this.env, id), product)\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Update an items quantity in the shopping cart\n     * @param {String} id - The shopping cart ID\n     * @param {String} index - The shopping cart item quid\n     * @param {Number} quantity - Desired quantity\n     */\n    updateCartItemQuantity(id, index, quantity = 1) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.updateCartItemQuantity(this.env, id), { index, quantity })\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Remove a product from a cart\n     * @param {String} id - The shopping cart id\n     * @param {String} index - The shopping cart item guid\n     */\n    removeFromCart(id, index) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.removeFromCart(this.env, id), { index })\n                .then(json => {\n                    // If there's actually a cart left, map it\n                    if (!is.empty(json)) {\n                        const cart = new Cart(this, json, true);\n\n                        // Set the active cart\n                        this.setActiveCart(cart.id)\n                            .then(() => {\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    } else {\n                        // Otherwise, update carts (as one removed)\n                        this.getCarts()\n                            .then(() => resolve(null))\n                            .catch(reject);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n}\n\nexport { Product, Category, Cart, Store };\n\nexport default Client;\n","// ==========================================================================\n// Type checking\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\nconst isArray = input => Array.isArray(input);\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObjectId = input => isString(input) && /^[a-f\\d]{24}$/i.test(input);\nconst isCurrencyCode = input => isString(input) && /^[A-z]{3}$/.test(input);\n\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nconst isUrl = (input, strict = false) => {\n    // Accept a URL object\n    if (instanceOf(input, window.URL)) {\n        return true;\n    }\n\n    // Add the protocol if required\n    let string = input;\n    if (!strict && !/^https?:\\/\\/*/.test(input)) {\n        string = `http://${input}`;\n    }\n\n    try {\n        return !isEmpty(new URL(string).hostname);\n    } catch (e) {\n        return false;\n    }\n};\n\nconst is = {\n    array: isArray,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    nullOrUndefined: isNullOrUndefined,\n    objectId: isObjectId,\n    currencyCode: isCurrencyCode,\n    url: isUrl,\n    empty: isEmpty,\n};\n\nexport default is;\n","import is from './utils/is';\n\nconst getBase = env => `https://${is.empty(env) ? 'sdk.selz.com' : `${env}/sdk`}/`;\n\nconst config = {\n    urls: {\n        /**\n         * Get URL for product data by URL\n         * @param {String} env - Environment (for internal use)\n         * @param {String} url - Short or full URL for a product\n         */\n        product(env, url = '') {\n            return `${getBase(env)}products/find?url=${url}`;\n        },\n\n        /**\n         * Get URL for all products by store ID\n         * @param {String} env - Environment (for internal use)\n         * @param {Number|String} id - The store ID\n         * @param {String} keyword - Search keyword\n         * @param {ObjectId|String} category - Category ID or relative path\n         * @param {Number} page - Page to fetch\n         */\n        products(env, id, keyword = '', category = '', page = 1) {\n            return `${getBase(env)}products/all/${id}?q=${keyword}&c=${category}&p=${page}`;\n        },\n\n        /**\n         * Get all categories for a given store ID\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - The store ID\n         */\n        categories(env, id) {\n            return `${getBase(env)}categories/${id}`;\n        },\n\n        /**\n         * Get URL for finding a store by URL or ID\n         * @param {String} env - Environment (for internal use)\n         * @param {Number|String} input - The ID or URL to lookup\n         */\n        store(env, input = null) {\n            if (is.number(input)) {\n                return `${getBase(env)}store/find/${input}`;\n            }\n\n            return `${getBase(env)}store/find?url=${input}`;\n        },\n\n        /**\n         * Create a new cart\n         * @param {String} env - Environment (for internal use)\n         * @param {Number} id - Store ID\n         */\n        createCart(env, id = '') {\n            return `${getBase(env)}cart/create/${id}`;\n        },\n\n        /**\n         * Get cart from ID\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        getCart(env, id = '') {\n            return `${getBase(env)}cart/${id}`;\n        },\n\n        /**\n         * Check carts still exist server side\n         * @param {String} env - Environment (for internal use)\n         * @param {Number} id - Cart IDs\n         */\n        checkCarts(env, ids = '') {\n            return `${getBase(env)}cart/verify?ids=${ids}`;\n        },\n\n        /**\n         * Add product to cart\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        addToCart(env, id = '') {\n            return `${getBase(env)}cart/add/${id}`;\n        },\n\n        /**\n         * Update a cart item quantity\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        updateCartItemQuantity(env, id = '') {\n            return `${getBase(env)}cart/updateitemquantity/${id}`;\n        },\n\n        /**\n         * Remove product from cart\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        removeFromCart(env, id = '') {\n            return `${getBase(env)}cart/remove/${id}`;\n        },\n    },\n};\n\nexport default config;\n","import is from '../utils/is';\n\nlet client = null;\n\nclass ProductUrls {\n    constructor(urls) {\n        // Take all properties by default\n        Object.assign(this, urls);\n    }\n}\n\nclass ProductImage {\n    constructor(image) {\n        // Take all properties by default\n        Object.assign(this, image);\n    }\n}\n\nclass ProductMedia {\n    constructor(media) {\n        // Take all properties by default\n        Object.assign(this, media);\n\n        // Map cover image\n        this.cover = new ProductImage(media.cover);\n    }\n}\n\nclass ProductFile {\n    constructor(file) {\n        // Take all properties by default\n        Object.assign(this, file);\n    }\n}\n\nclass ProductVariant {\n    constructor(variant, selected = '') {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        this.selected = variant.id === selected;\n    }\n}\n\nclass ProductVariantAttributeOption {\n    constructor(id, label) {\n        this.id = id;\n        this.label = label;\n    }\n}\n\nclass ProductVariantAttribute {\n    constructor(variant) {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        // Map options\n        this.options = Object.keys(variant.options).map(\n            id => new ProductVariantAttributeOption(id, variant.options[id]),\n        );\n    }\n}\n\nclass Product {\n    constructor(instance, product, variantId = '') {\n        if (!is.object(product)) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, product);\n\n        // Map store\n        this.store = client.store;\n\n        // Product URLs\n        if (is.object(product.urls)) {\n            this.urls = new ProductUrls(product.urls);\n        }\n\n        // Media (Video, YouTube, Vimeo, Audio)\n        if (is.object(product.media)) {\n            this.media = new ProductMedia(product.media);\n        }\n\n        // Images\n        if (is.array(product.images)) {\n            this.images = product.images.map(image => new ProductImage(image));\n        }\n\n        // Files for digital products\n        if (is.array(product.files)) {\n            this.files = product.files.map(file => new ProductFile(file));\n        }\n\n        // Variants\n        if (product.has_variants) {\n            const selected = !is.empty(variantId) ? variantId : product.variants[0].id;\n            this.variants = product.variants.map(variant => new ProductVariant(variant, selected));\n        }\n        if (product.has_variant_attributes) {\n            this.variant_attributes = product.variant_attributes.map(\n                attribute => new ProductVariantAttribute(attribute),\n            );\n        }\n    }\n\n    // eslint-disable-next-line camelcase\n    get selected_variant() {\n        if (is.empty(this.variants)) {\n            return null;\n        }\n\n        return this.variants.find(variant => variant.selected);\n    }\n}\n\nexport default Product;\n","import Product from './Product';\n\nlet client = null;\n\nclass CartItem {\n    constructor(item, cartId) {\n        this.cartId = cartId;\n\n        // Take all properties by default\n        Object.assign(this, item);\n\n        // Map product\n        this.product = new Product(client, item.product, item.variant_id);\n    }\n}\n\nclass Cart {\n    constructor(instance, cart, active = false) {\n        if (cart === null) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, cart);\n\n        // Map store\n        this.store = client.store;\n\n        // Set active state\n        this.active = active;\n\n        // Map items\n        this.items = Array.from(cart.items).map(item => new CartItem(item, cart.id));\n    }\n\n    /**\n     * Add a product to this cart\n     * @param {object} product - The product details\n     */\n    add(product) {\n        return client.addToCart(this.id, product);\n    }\n\n    /**\n     * Remove a product from this cart\n     * @param {string} index\n     */\n    remove(index) {\n        return client.removeFromCart(this.id, index);\n    }\n}\n\nexport default Cart;\n","import is from '../utils/is';\n\nclass Category {\n    constructor(category = null) {\n        if (!is.object(category)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, category);\n    }\n}\n\nexport default Category;\n","import is from '../utils/is';\n\nclass Store {\n    constructor(store = null) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, store);\n    }\n}\n\nexport default Store;\n","// ==========================================================================\n// String utils\n// ==========================================================================\n\n// Replace all occurances of a string in a string\nexport function replaceAll(input = '', find = '', replace = '') {\n    return input.replace(\n        new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'),\n        replace.toString(),\n    );\n}\n\n// Convert to title case\nexport function toTitleCase(input = '') {\n    return input.toString().replace(/\\w\\S*/g, text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase());\n}\n\n// Convert string to pascalCase\nexport function toPascalCase(input = '') {\n    let string = input.toString();\n\n    // Convert kebab case\n    string = replaceAll(string, '-', ' ');\n\n    // Convert snake case\n    string = replaceAll(string, '_', ' ');\n\n    // Convert to title case\n    string = toTitleCase(string);\n\n    // Convert to pascal case\n    return replaceAll(string, ' ', '');\n}\n\n// Convert string to pascalCase\nexport function toCamelCase(input = '') {\n    let string = input.toString();\n\n    // Convert to pascal case\n    string = toPascalCase(string);\n\n    // Convert first character to lowercase\n    return string.charAt(0).toLowerCase() + string.slice(1);\n}\n","// ==========================================================================\n// Form Data utils\n// ==========================================================================\n\nimport is from './is';\nimport { toPascalCase } from './strings';\n\n/**\n * Convert an Object to FormData\n * @param {Object} source - source Object\n * @param {FormData} form - existing FormData object\n * @param {String} namespace - namespace for FormData\n */\nconst buildFormData = (source = {}, form, namespace) => {\n    const data = form || new FormData();\n    let formKey;\n\n    // Source must be an object\n    if (!is.object(source)) {\n        return data;\n    }\n\n    // Loop through the object to convert\n    Object.keys(source).forEach(key => {\n        if (namespace) {\n            formKey = `${namespace}[${key}]`;\n        } else {\n            formKey = key;\n        }\n\n        // If the property is an object, but not a File, use recursivity\n        if (typeof source[key] === 'object' && !(source[key] instanceof File)) {\n            buildFormData(source[key], data, key);\n        } else {\n            data.append(toPascalCase(formKey), source[key]);\n        }\n    });\n\n    return data;\n};\n\nexport default buildFormData;\n","// ==========================================================================\n// Extend objects\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Deep extend destination object with N more objects\n * @param {Object} target\n * @param {...Object} sources\n */\nexport function extend(target = {}, ...sources) {\n    if (!sources.length) {\n        return target;\n    }\n\n    const source = sources.shift();\n\n    if (!is.object(source)) {\n        return target;\n    }\n\n    Object.keys(source).forEach(key => {\n        if (is.object(source[key])) {\n            if (!Object.keys(target).includes(key)) {\n                Object.assign(target, { [key]: {} });\n            }\n\n            extend(target[key], source[key]);\n        } else {\n            Object.assign(target, { [key]: source[key] });\n        }\n    });\n\n    return extend(target, ...sources);\n}\n\n/**\n * Safer JSON parsing\n * @param {Object} data\n */\nexport function parseJSON(data = {}) {\n    return new Promise((resolve, reject) => {\n        try {\n            resolve(JSON.parse(data));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// Fetch\n// ==========================================================================\n\nimport buildFormData from './form-data';\nimport { extend, parseJSON } from './objects';\n\nconst defaults = {\n    type: 'GET',\n    body: {},\n    responseType: 'json',\n};\n\n/**\n * Custom immitation fetch using XHR\n * @param {string} url - The URL of the endpoint\n * @param {object} options - Object of options for the request\n */\nexport default function(url, options = {}) {\n    const { type, body, responseType } = extend({}, defaults, options);\n\n    return new Promise((resolve, reject) => {\n        try {\n            const xhr = new XMLHttpRequest();\n\n            // Check for CORS support\n            if (!('withCredentials' in xhr)) {\n                const error = new Error('No CORS support');\n                error.request = xhr;\n                throw error;\n            }\n\n            xhr.addEventListener('load', () => {\n                const { response } = xhr;\n\n                // Parse JSON responses\n                if (responseType === 'json') {\n                    parseJSON(response)\n                        .then(json => {\n                            if (json.success) {\n                                resolve(json.data);\n                            } else {\n                                const error = new Error('Request failed');\n                                error.errors = json.errors;\n                                throw error;\n                            }\n                        })\n                        .catch(reject);\n                } else {\n                    resolve(response);\n                }\n            });\n\n            xhr.addEventListener('error', () => {\n                const error = new Error(xhr.status);\n                error.request = xhr;\n                throw error;\n            });\n\n            // Start the request\n            xhr.open(type, url, true);\n\n            // Set the required response type\n            // 'json' responseType is much slower, so we parse later\n            // https://github.com/arendjr/fetch-vs-xhr-perf\n            if (responseType !== 'json') {\n                xhr.responseType = responseType;\n            }\n\n            // Send data if passed\n            xhr.send(buildFormData(body));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// Common fetch actions\n// ==========================================================================\n\nimport fetch from './fetch';\n\nconst queue = {};\n\nconst http = {\n    /**\n     * GET remote URL and parse as JSON\n     * @param {string} url - The endpoint URL\n     */\n    get(url) {\n        // Queue requests to prevent hammering\n        if (!Object.keys(queue).includes(url)) {\n            queue[url] = fetch(url);\n\n            const remove = () => {\n                delete queue[url];\n            };\n\n            // Remove from queue on completed\n            queue[url].then(remove).catch(remove);\n        }\n\n        return queue[url];\n    },\n\n    /**\n     * POST to remote URL and parse as JSON\n     * @param {string} url - The endpoint URL\n     * @param {object} data - The POST data payload\n     */\n    post(url, data = {}) {\n        const options = {\n            type: 'POST',\n            body: data,\n        };\n\n        return fetch(url, options);\n    },\n};\n\nexport default http;\n","// ==========================================================================\n// Array utils\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Remove duplicates in an array\n * @param {array} array\n */\nexport function dedupe(array) {\n    if (!is.array(array)) {\n        return array;\n    }\n\n    return array.filter((item, index) => array.indexOf(item) === index);\n}\n\n// Rounding methods for .closest()\nconst closestRounding = {\n    none: 0,\n    ceil: 1,\n    floor: 2,\n};\nexport { closestRounding };\n\n/**\n * Get the closest value in an array\n * @param {array} array\n * @param {number} value\n * @param {number} rounding\n */\nexport function closest(array, value, rounding = closestRounding.none) {\n    if (!is.array(array) || !array.length) {\n        return null;\n    }\n\n    return array.reduce((prev, curr) => {\n        if (Math.abs(curr - value) <= Math.abs(prev - value)) {\n            switch (rounding) {\n                case closestRounding.ceil:\n                    return curr >= value ? curr : prev;\n\n                case closestRounding.floor:\n                    return curr <= value ? curr : prev;\n\n                default:\n                    return curr;\n            }\n        }\n\n        return prev;\n    });\n}\n","/**\n * Parse a string to URL object\n * @param {String} url\n */\nexport default function parseUrl(url) {\n    let string = url;\n\n    // Add the protocol if required\n    if (!/^https?:\\/\\/*/.test(url)) {\n        string = `http://${url}`;\n    }\n\n    try {\n        return new URL(string);\n    } catch (e) {\n        return null;\n    }\n}\n","// ==========================================================================\n// Local storage wrapper\n// TODO: methods should return promises?\n// ==========================================================================\n\nimport Store from '../models/Store';\nimport { dedupe } from './arrays';\nimport is from './is';\nimport { extend } from './objects';\nimport parseUrl from './parseUrl';\n\nconst storage = new Map();\n\nconst getKey = url => {\n    if (url === null) {\n        return null;\n    }\n\n    const parsed = parseUrl(url);\n\n    if (parsed === null) {\n        return null;\n    }\n\n    return `${parsed.host}${parsed.pathname}`.replace(/\\/$/, '');\n};\n\nclass Storage {\n    constructor(config) {\n        this.config = Object.assign(\n            {\n                keys: {\n                    root: 'selz-js-sdk',\n                    carts: 'carts',\n                    stores: 'stores',\n                },\n                ttl: 3600, // 1 hour\n                schema: new Date('2018-07-02').getTime(), // Schema version (allowing us to change data schema and invalidate storage)\n            },\n            config,\n        );\n\n        this.purge();\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        if (!window.localStorage) {\n            return false;\n        }\n\n        const key = '___test';\n\n        // Try to use it\n        try {\n            window.localStorage.setItem(key, key);\n            window.localStorage.removeItem(key);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        let data = storage.get(this.config.keys.root);\n\n        // Grab from real storage if we can or use faux-storage\n        if (Storage.supported) {\n            const stored = window.localStorage.getItem(this.config.keys.root);\n\n            if (!is.empty(stored)) {\n                data = JSON.parse(stored);\n            }\n        }\n\n        if (is.empty(data)) {\n            return null;\n        }\n\n        if (!is.empty(key)) {\n            return Object.keys(data).includes(key) ? data[key] : null;\n        }\n\n        return data;\n    }\n\n    set(key, value, merge = false) {\n        // Get current storage\n        const data = this.get() || {};\n\n        // Extend with the new data\n        if (merge && Object.keys(data).includes(key)) {\n            data[key] = extend(data[key], value);\n        } else {\n            data[key] = value;\n        }\n\n        // Set in faux-storage\n        storage.set(this.config.keys.root, data);\n\n        // Bail if no real support\n        if (!Storage.supported) {\n            return;\n        }\n\n        // Set schema version\n        data.schema = this.config.schema;\n\n        // Update storage\n        try {\n            window.localStorage.setItem(this.config.keys.root, JSON.stringify(data));\n        } catch (e) {\n            // Do nothing\n        }\n    }\n\n    // Clean up stale storage\n    purge() {\n        // Check schema\n        const data = this.get();\n\n        // Nothing to purge\n        if (is.empty(data)) {\n            return;\n        }\n\n        // If schema does not match, kill it\n        if (Number(data.schema) !== this.config.schema) {\n            window.localStorage.removeItem(this.config.keys.root);\n            return;\n        }\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n\n        // Nothing to cleanup\n        if (is.empty(stores)) {\n            return;\n        }\n\n        // Check TTL is valid\n        this.set(\n            this.config.keys.stores,\n            stores.filter(store => {\n                const ttl = Number(store.ttl);\n                return ttl > 0 && ttl > Date.now();\n            }),\n        );\n    }\n\n    getCarts(store) {\n        const data = this.get(this.config.keys.carts) || {};\n\n        // If no carts\n        if (is.empty(data)) {\n            return null;\n        }\n\n        // Get all carts\n        if (!is.number(store)) {\n            return data;\n        }\n\n        // Store not found\n        if (!Object.keys(data).includes(store.toString())) {\n            return null;\n        }\n\n        // Get all for a store\n        return data[store.toString()];\n    }\n\n    getCart(store, currency) {\n        const carts = this.getCarts(store);\n\n        // No carts\n        if (is.empty(carts)) {\n            return null;\n        }\n\n        // Get all for a store\n        if (!is.string(currency)) {\n            return carts;\n        }\n\n        // Currency not found\n        if (!Object.keys(carts).includes(currency.toUpperCase())) {\n            return null;\n        }\n\n        return carts[currency.toUpperCase()];\n    }\n\n    setCart(store, currency, cart) {\n        this.set(\n            this.config.keys.carts,\n            {\n                [store]: {\n                    [currency.toUpperCase()]: {\n                        id: cart.id,\n                        active: cart.active,\n                    },\n                },\n            },\n            true,\n        );\n    }\n\n    setCarts(store, carts = {}) {\n        this.set(this.config.keys.carts, {\n            [store]: carts,\n        });\n    }\n\n    getStore(input) {\n        let store = null;\n\n        if (!is.number(input) && !is.url(input)) {\n            return null;\n        }\n\n        const stores = this.get(this.config.keys.stores) || [];\n\n        if (is.number(input)) {\n            store = stores.find(s => is.object(s.data) && s.data.id === input);\n        } else if (is.url(input)) {\n            const key = getKey(input);\n\n            // Bail if invalid URL\n            if (key === null) {\n                return null;\n            }\n\n            store = stores.find(s => is.array(s.urls) && s.urls.includes(key));\n        }\n\n        if (!is.object(store)) {\n            return null;\n        }\n\n        // Check TTL is valid\n        const ttl = Number(store.ttl);\n\n        if (ttl > 0 && ttl < Date.now()) {\n            this.purge();\n            return null;\n        }\n\n        return new Store(store.data);\n    }\n\n    setStore(data, url = null) {\n        // Strip the protocol from the lookup url\n        const key = getKey(url);\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n        let existing = null;\n\n        if (!is.empty(stores)) {\n            // Find existing store by id\n            existing = stores.find(s => s.data.id === data.id);\n        }\n\n        // Extend TTL each\n        const ttl = Date.now() + this.config.ttl;\n\n        // If we found something\n        if (is.object(existing)) {\n            // Update data and extend TTL\n            Object.assign(existing, {\n                data,\n                ttl,\n            });\n\n            if (key !== null) {\n                // Add the URL key for later lookup\n                if (!is.array(existing.urls)) {\n                    existing.urls = [key];\n                } else {\n                    existing.urls.push(key);\n                }\n\n                // Remove duplicate entries\n                const urls = dedupe(existing.urls);\n\n                // Add to existing record\n                Object.assign(existing, {\n                    urls,\n                });\n            }\n        } else {\n            const store = {\n                data,\n                ttl,\n            };\n\n            if (key !== null) {\n                Object.assign(store, {\n                    urls: [key],\n                });\n            }\n\n            stores.push(store);\n        }\n\n        this.set(this.config.keys.stores, stores);\n    }\n}\n\nexport default Storage;\n"]}