{"version":3,"sources":["docs/src/scripts.js","src/utils/is.js","src/classes/Product/ProductFile.js","src/classes/Product/ProductImage.js","src/classes/Product/ProductMedia.js","src/classes/Product/ProductUrls.js","src/classes/Product/ProductVariant.js","src/classes/Product/ProductVariantAttributeOption.js","src/classes/Product/ProductVariantAttribute.js","src/classes/Product/Product.js","src/classes/Cart/CartItem.js","src/classes/Cart/Cart.js","src/classes/Cart/CartAddItem.js","src/classes/Category/Category.js","src/classes/Store/Store.js","src/config.js","node_modules/humps/humps.js","src/utils/objects.js","src/utils/strings.js","src/utils/form-data.js","src/utils/fetch.js","src/utils/http.js","src/utils/arrays.js","src/utils/storage.js","src/utils/parseUrl.js","src/client.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","_defineProperty","value","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","_slicedToArray","arr","Array","isArray","_arrayWithHoles","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","_iterableToArrayLimit","_nonIterableRest","getConstructor","input","instanceOf","isObject","isString","String","isNullOrUndefined","isEmpty","is","Number","isNaN","test","strict","window","URL","string","concat","hostname","e","ProductFile","a","file","this","assign","ProductImage","image","ProductMedia","media","cover","ProductUrls","urls","ProductVariant","variant","selected","id","ProductVariantAttributeOption","label","ProductVariantAttribute","options","map","client","Product","product","variantId","store","images","files","hasVariants","variants","hasVariantAttributes","variantAttributes","attribute","get","find","CartItem","item","cartId","Cart","cart","active","items","from","addToCart","index","removeFromCart","CartAddItem","productId","quantity","discountCode","buyersUnitPrice","isProduct","Category","category","Store","getBase","env","config","url","products","keyword","page","categories","buy","createCart","getCart","checkCarts","ids","updateCartItemQuantity","commonjsGlobal","globalThis","global","self","module","humps","_processKeys","camelize","pascalize","decamelize","_isFunction","_isObject","_isArray","_isDate","_isRegExp","_isBoolean","_isNumerical","_processor","convert","output","l","hasOwnProperty","replace","match","chr","toUpperCase","substr","toLowerCase","camelized","separator","split","join","separateWords","callback","process","depascalize","camelizeKeys","decamelizeKeys","pascalizeKeys","depascalizeKeys","exports","fn","cloneDeep","JSON","parse","stringify","extend","b","sources","d","shift","includes","parseJSON","data","Promise","resolve","reject","error","replaceAll","RegExp","toTitleCase","text","charAt","toPascalCase","buildFormData","formKey","form","namespace","formData","FormData","File","append","defaults","type","body","responseType","fetch","c","xhr","XMLHttpRequest","Error","request","fail","status","addEventListener","response","then","json","success","errors","catch","open","send","queue","http","remove","dedupe","array","indexOf","storage","Map","getKey","parsed","parseUrl","host","pathname","Storage","root","carts","stores","ttl","schema","Date","getTime","purge","supported","stored","localStorage","getItem","merge","set","setItem","removeItem","now","currency","getCarts","s","existing","Client","getStore","cached","setStore","getStoreId","p","cartItem","discount","currencyCode","setCart","currentCart","isCurrency","isObjectId","getCartId","activeId","getActiveCart","validate","entries","setCarts","values","setActiveCart","currencies","document","log","details","createElement","summary","innerHTML","appendChild","contents","pre","classList","add","prettyPrint","detail","updatedCart","getElementById","getProduct"],"mappings":"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","file":"scripts.js","sourcesContent":["import Client, { CartAddItem } from '../../src/client';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const output = document.getElementById('output');\n\n    function log(label, data) {\n        const details = document.createElement('details');\n        const summary = document.createElement('summary');\n        summary.innerHTML = label;\n        details.appendChild(summary);\n\n        const contents = document.createElement('div');\n        const pre = document.createElement('pre');\n        pre.classList.add('prettyprint');\n        pre.innerHTML = JSON.stringify(data, null, 4);\n        contents.appendChild(pre);\n        details.appendChild(contents);\n\n        output.appendChild(details);\n\n        window.prettyPrint();\n    }\n\n    function fail(label, error) {\n        if (error instanceof Error) {\n            log(`${label} (error)`, {\n                error: error.toString(),\n                detail: error.errors,\n            });\n\n            return;\n        }\n\n        log(`${label} (failed)`, error);\n    }\n\n    const client = new Client({\n        store: 'local.sampotts.me',\n        env: 'app.local-selz.com',\n    });\n\n    // Expose\n    window.client = client;\n\n    log('Client', client);\n\n    function getCart(currency) {\n        return new Promise((resolve, reject) => {\n            if (window.cart) {\n                resolve(window.cart);\n                return;\n            }\n\n            client\n                .getCart(currency)\n                .then(cart => {\n                    log('Get cart', cart);\n\n                    window.cart = cart;\n\n                    resolve(cart);\n                })\n                .catch(error => reject(error));\n        });\n    }\n\n    function addToCart(product) {\n        getCart(product.currencyCode)\n            .then(cart => {\n                const cartItem = new CartAddItem(product);\n                cartItem.quantity = 2;\n\n                cart.add(cartItem)\n                    .then(updatedCart => {\n                        log('Add to cart', updatedCart);\n\n                        window.cart = updatedCart;\n                    })\n                    .catch(error => fail('Add to cart', error));\n            })\n            .catch(error => fail('Get cart', error));\n    }\n\n    /* function buy(product) {\n        client\n            .buy(product)\n            .then(cart => {\n                log('Buy now', cart);\n\n                window.cart = cart;\n            })\n            .catch(error => fail('Buy now', error));\n    } */\n\n    const products = {\n        GBP: 'http://selz.co/1MaSYRU',\n        USD: 'http://selz.co/1rvbhT6',\n    };\n\n    client\n        .getProduct(products.USD)\n        .then(product => {\n            log('Product', product);\n\n            // Expose\n            window.product = product;\n\n            // buy(product);\n\n            addToCart(product);\n        })\n        .catch(errors => fail('Product', errors));\n\n    // Listen for messages from parent\n    /* window.addEventListener('message', event => {\n        // console.warn(event.data);\n        const json = JSON.parse(event.data);\n\n        if (json.key !== 'add-to-cart') {\n            return;\n        }\n\n        addToCart(json.data);\n    }); */\n});\n","// ==========================================================================\n// Type checking\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\nconst isArray = input => Array.isArray(input);\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObjectId = input => isString(input) && /^[a-f\\d]{24}$/i.test(input);\nconst isCurrencyCode = input => isString(input) && /^[A-z]{3}$/.test(input);\n\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nconst isUrl = (input, strict = false) => {\n    // Accept a URL object\n    if (instanceOf(input, window.URL)) {\n        return true;\n    }\n\n    // Add the protocol if required\n    let string = input;\n    if (!strict && !/^https?:\\/\\/*/.test(input)) {\n        string = `http://${input}`;\n    }\n\n    try {\n        return !isEmpty(new URL(string).hostname);\n    } catch (e) {\n        return false;\n    }\n};\n\nconst is = {\n    array: isArray,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    nullOrUndefined: isNullOrUndefined,\n    objectId: isObjectId,\n    currencyCode: isCurrencyCode,\n    url: isUrl,\n    empty: isEmpty,\n};\n\nexport default is;\n","export default class ProductFile {\n    constructor(file) {\n        // Take all properties by default\n        Object.assign(this, file);\n    }\n}\n","export default class ProductImage {\n    constructor(image) {\n        // Take all properties by default\n        Object.assign(this, image);\n    }\n}\n","import ProductImage from './ProductImage';\n\nexport default class ProductMedia {\n    constructor(media) {\n        // Take all properties by default\n        Object.assign(this, media);\n\n        // Map cover image\n        this.cover = new ProductImage(media.cover);\n    }\n}\n","export default class ProductUrls {\n    constructor(urls) {\n        // Take all properties by default\n        Object.assign(this, urls);\n    }\n}\n","export default class ProductVariant {\n    constructor(variant, selected = '') {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        this.selected = variant.id === selected;\n    }\n}\n","export default class ProductVariantAttributeOption {\n    constructor(id, label) {\n        this.id = id;\n        this.label = label;\n    }\n}\n","import ProductVariantAttributeOption from './ProductVariantAttributeOption';\n\nexport default class ProductVariantAttribute {\n    constructor(variant) {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        // Map options\n        this.options = Object.keys(variant.options).map(\n            id => new ProductVariantAttributeOption(id, variant.options[id]),\n        );\n    }\n}\n","import is from '../../utils/is';\nimport ProductFile from './ProductFile';\nimport ProductImage from './ProductImage';\nimport ProductMedia from './ProductMedia';\nimport ProductUrls from './ProductUrls';\nimport ProductVariant from './ProductVariant';\nimport ProductVariantAttribute from './ProductVariantAttribute';\n\nlet client = null;\n\nexport default class Product {\n    constructor(instance, product, variantId = '') {\n        if (!is.object(product)) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, product);\n\n        // Map store\n        this.store = client.store;\n\n        // Product URLs\n        if (is.object(product.urls)) {\n            this.urls = new ProductUrls(product.urls);\n        }\n\n        // Media (Video, YouTube, Vimeo, Audio)\n        if (is.object(product.media)) {\n            this.media = new ProductMedia(product.media);\n        }\n\n        // Images\n        if (is.array(product.images)) {\n            this.images = product.images.map(image => new ProductImage(image));\n        }\n\n        // Files for digital products\n        if (is.array(product.files)) {\n            this.files = product.files.map(file => new ProductFile(file));\n        }\n\n        // Variants\n        if (product.hasVariants) {\n            const selected = !is.empty(variantId) ? variantId : product.variants[0].id;\n            this.variants = product.variants.map(variant => new ProductVariant(variant, selected));\n        }\n        if (product.hasVariantAttributes) {\n            this.variantAttributes = product.variantAttributes.map(attribute => new ProductVariantAttribute(attribute));\n        }\n    }\n\n    get selectedVariant() {\n        if (is.empty(this.variants)) {\n            return null;\n        }\n\n        return this.variants.find(variant => variant.selected);\n    }\n}\n","import Product from '../Product/Product';\n\nexport default class CartItem {\n    constructor(client, item, cartId) {\n        this.cartId = cartId;\n\n        // Take all properties by default\n        Object.assign(this, item);\n\n        // Map product\n        this.product = new Product(client, item.product, item.variantId);\n    }\n}\n","import CartItem from './CartItem';\n\nlet client = null;\n\nexport default class Cart {\n    constructor(instance, cart, active = false) {\n        if (cart === null) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, cart);\n\n        // Map store\n        this.store = client.store;\n\n        // Set active state\n        this.active = active;\n\n        // Map items\n        this.items = Array.from(cart.items).map(item => new CartItem(client, item, cart.id));\n    }\n\n    /**\n     * Add a product to this cart\n     * @param {Object} item - The cart item\n     */\n    add(item) {\n        return client.addToCart(this.id, item);\n    }\n\n    /**\n     * Remove a product from this cart\n     * @param {String} index\n     */\n    remove(index) {\n        return client.removeFromCart(this.id, index);\n    }\n}\n","import is from '../../utils/is';\nimport Product from '../Product/Product';\n\nconst isProduct = input => !is.empty(input) && input instanceof Product;\n\nexport default class CartAddItem {\n    constructor(item) {\n        this.productId = null;\n        this.variantId = null;\n        this.quantity = 1;\n        this.discountCode = null;\n        this.buyersUnitPrice = null;\n\n        if (isProduct(item) || is.object(item)) {\n            this.productId = item.id;\n            this.variantId = is.objectId(item.variant) ? item.variant : null;\n        }\n    }\n}\n","import is from '../../utils/is';\n\nexport default class Category {\n    constructor(category = null) {\n        if (!is.object(category)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, category);\n    }\n}\n","import is from '../../utils/is';\n\nexport default class Store {\n    constructor(store = null) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, store);\n    }\n}\n","import is from './utils/is';\n\nconst getBase = env => `https://${is.empty(env) || env === 'selz.com' ? 'sdk.selz.com' : `${env}/sdk`}/`;\n\nconst config = {\n    urls: {\n        /**\n         * Get URL for product data by URL\n         * @param {String} env - Environment (for internal use)\n         * @param {String} url - Short or full URL for a product\n         */\n        product(env, url = '') {\n            return `${getBase(env)}products/find?url=${url}`;\n        },\n\n        /**\n         * Get URL for all products by store ID\n         * @param {String} env - Environment (for internal use)\n         * @param {Number|String} id - The store ID\n         * @param {String} keyword - Search keyword\n         * @param {ObjectId|String} category - Category ID or relative path\n         * @param {Number} page - Page to fetch\n         */\n        products(env, id, keyword = '', category = '', page = 1) {\n            return `${getBase(env)}products/all/${id}?q=${keyword}&c=${category}&p=${page}`;\n        },\n\n        /**\n         * Get all categories for a given store ID\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - The store ID\n         */\n        categories(env, id) {\n            return `${getBase(env)}categories/${id}`;\n        },\n\n        /**\n         * Get URL for finding a store by URL or ID\n         * @param {String} env - Environment (for internal use)\n         * @param {Number|String} input - The ID or URL to lookup\n         */\n        store(env, input = null) {\n            if (is.number(input)) {\n                return `${getBase(env)}store/find/${input}`;\n            }\n\n            return `${getBase(env)}store/find?url=${input}`;\n        },\n\n        /**\n         * Buy a product\n         * @param {String} env - Environment (for internal use)\n         */\n        buy(env) {\n            return `${getBase(env)}cart/buy`;\n        },\n\n        /**\n         * Create a new cart\n         * @param {String} env - Environment (for internal use)\n         * @param {Number} id - Store ID\n         */\n        createCart(env, id = '') {\n            return `${getBase(env)}cart/create/${id}`;\n        },\n\n        /**\n         * Get cart from ID\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        getCart(env, id = '') {\n            return `${getBase(env)}cart/${id}`;\n        },\n\n        /**\n         * Check carts still exist server side\n         * @param {String} env - Environment (for internal use)\n         * @param {Number} id - Cart IDs\n         */\n        checkCarts(env, ids = '') {\n            return `${getBase(env)}cart/verify?ids=${ids}`;\n        },\n\n        /**\n         * Add product to cart\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        addToCart(env, id = '') {\n            return `${getBase(env)}cart/add/${id}`;\n        },\n\n        /**\n         * Update a cart item quantity\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        updateCartItemQuantity(env, id = '') {\n            return `${getBase(env)}cart/updateitemquantity/${id}`;\n        },\n\n        /**\n         * Remove product from cart\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        removeFromCart(env, id = '') {\n            return `${getBase(env)}cart/remove/${id}`;\n        },\n    },\n};\n\nexport default config;\n","// =========\n// = humps =\n// =========\n// Underscore-to-camelCase converter (and vice versa)\n// for strings and object keys\n\n// humps is copyright © 2012+ Dom Christie\n// Released under the MIT license.\n\n\n;(function(global) {\n\n  var _processKeys = function(convert, obj, options) {\n    if(!_isObject(obj) || _isDate(obj) || _isRegExp(obj) || _isBoolean(obj) || _isFunction(obj)) {\n      return obj;\n    }\n\n    var output,\n        i = 0,\n        l = 0;\n\n    if(_isArray(obj)) {\n      output = [];\n      for(l=obj.length; i<l; i++) {\n        output.push(_processKeys(convert, obj[i], options));\n      }\n    }\n    else {\n      output = {};\n      for(var key in obj) {\n        if(Object.prototype.hasOwnProperty.call(obj, key)) {\n          output[convert(key, options)] = _processKeys(convert, obj[key], options);\n        }\n      }\n    }\n    return output;\n  };\n\n  // String conversion methods\n\n  var separateWords = function(string, options) {\n    options = options || {};\n    var separator = options.separator || '_';\n    var split = options.split || /(?=[A-Z])/;\n\n    return string.split(split).join(separator);\n  };\n\n  var camelize = function(string) {\n    if (_isNumerical(string)) {\n      return string;\n    }\n    string = string.replace(/[\\-_\\s]+(.)?/g, function(match, chr) {\n      return chr ? chr.toUpperCase() : '';\n    });\n    // Ensure 1st char is always lowercase\n    return string.substr(0, 1).toLowerCase() + string.substr(1);\n  };\n\n  var pascalize = function(string) {\n    var camelized = camelize(string);\n    // Ensure 1st char is always uppercase\n    return camelized.substr(0, 1).toUpperCase() + camelized.substr(1);\n  };\n\n  var decamelize = function(string, options) {\n    return separateWords(string, options).toLowerCase();\n  };\n\n  // Utilities\n  // Taken from Underscore.js\n\n  var toString = Object.prototype.toString;\n\n  var _isFunction = function(obj) {\n    return typeof(obj) === 'function';\n  };\n  var _isObject = function(obj) {\n    return obj === Object(obj);\n  };\n  var _isArray = function(obj) {\n    return toString.call(obj) == '[object Array]';\n  };\n  var _isDate = function(obj) {\n    return toString.call(obj) == '[object Date]';\n  };\n  var _isRegExp = function(obj) {\n    return toString.call(obj) == '[object RegExp]';\n  };\n  var _isBoolean = function(obj) {\n    return toString.call(obj) == '[object Boolean]';\n  };\n\n  // Performant way to determine if obj coerces to a number\n  var _isNumerical = function(obj) {\n    obj = obj - 0;\n    return obj === obj;\n  };\n\n  // Sets up function which handles processing keys\n  // allowing the convert function to be modified by a callback\n  var _processor = function(convert, options) {\n    var callback = options && 'process' in options ? options.process : options;\n\n    if(typeof(callback) !== 'function') {\n      return convert;\n    }\n\n    return function(string, options) {\n      return callback(string, convert, options);\n    }\n  };\n\n  var humps = {\n    camelize: camelize,\n    decamelize: decamelize,\n    pascalize: pascalize,\n    depascalize: decamelize,\n    camelizeKeys: function(object, options) {\n      return _processKeys(_processor(camelize, options), object);\n    },\n    decamelizeKeys: function(object, options) {\n      return _processKeys(_processor(decamelize, options), object, options);\n    },\n    pascalizeKeys: function(object, options) {\n      return _processKeys(_processor(pascalize, options), object);\n    },\n    depascalizeKeys: function () {\n      return this.decamelizeKeys.apply(this, arguments);\n    }\n  };\n\n  if (typeof define === 'function' && define.amd) {\n    define(humps);\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = humps;\n  } else {\n    global.humps = humps;\n  }\n\n})(this);\n","// ==========================================================================\n// Extend objects\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Clone nested objects\n * @param {object} object\n */\nexport function cloneDeep(object) {\n    return JSON.parse(JSON.stringify(object));\n}\n\n/**\n * Deep extend destination object with N more objects\n * @param {Object} target\n * @param {...Object} sources\n */\nexport function extend(target = {}, ...sources) {\n    if (!sources.length) {\n        return target;\n    }\n\n    const source = sources.shift();\n\n    if (!is.object(source)) {\n        return target;\n    }\n\n    Object.keys(source).forEach(key => {\n        if (is.object(source[key])) {\n            if (!Object.keys(target).includes(key)) {\n                Object.assign(target, { [key]: {} });\n            }\n\n            extend(target[key], source[key]);\n        } else {\n            Object.assign(target, { [key]: source[key] });\n        }\n    });\n\n    return extend(target, ...sources);\n}\n\n/**\n * Safer JSON parsing\n * @param {Object} data\n */\nexport function parseJSON(data = {}) {\n    return new Promise((resolve, reject) => {\n        try {\n            resolve(JSON.parse(data));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// String utils\n// ==========================================================================\n\n// Replace all occurances of a string in a string\nexport function replaceAll(input = '', find = '', replace = '') {\n    return input.replace(\n        new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'),\n        replace.toString(),\n    );\n}\n\n// Convert to title case\nexport function toTitleCase(input = '') {\n    return input.toString().replace(/\\w\\S*/g, text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase());\n}\n\n// Convert string to pascalCase\nexport function toPascalCase(input = '') {\n    let string = input.toString();\n\n    // Convert kebab case\n    string = replaceAll(string, '-', ' ');\n\n    // Convert snake case\n    string = replaceAll(string, '_', ' ');\n\n    // Convert to title case\n    string = toTitleCase(string);\n\n    // Convert to pascal case\n    return replaceAll(string, ' ', '');\n}\n\n// Convert string to pascalCase\nexport function toCamelCase(input = '') {\n    let string = input.toString();\n\n    // Convert to pascal case\n    string = toPascalCase(string);\n\n    // Convert first character to lowercase\n    return string.charAt(0).toLowerCase() + string.slice(1);\n}\n","// ==========================================================================\n// Form Data utils\n// ==========================================================================\n\nimport is from './is';\nimport { cloneDeep } from './objects';\nimport { toPascalCase } from './strings';\n\n/**\n * Convert an Object to FormData\n * @param {Object} source - source Object\n * @param {FormData} form - existing FormData object\n * @param {String} namespace - namespace for FormData\n */\nconst buildFormData = (source = {}, form, namespace) => {\n    const formData = form || new FormData();\n    let formKey;\n    let data = null;\n\n    // Parse as an object\n    try {\n        data = cloneDeep(source);\n    } catch (error) {\n        return formData;\n    }\n\n    // Source must be an object\n    if (!is.object(data)) {\n        return formData;\n    }\n\n    // Loop through the object to convert\n    Object.keys(data).forEach(key => {\n        if (namespace) {\n            formKey = `${namespace}[${key}]`;\n        } else {\n            formKey = key;\n        }\n\n        // If the property is an object, but not a File, use recursivity\n        if (typeof source[key] === 'object' && !(source[key] instanceof File)) {\n            buildFormData(source[key], formData, key);\n        } else {\n            formData.append(toPascalCase(formKey), source[key]);\n        }\n    });\n\n    return formData;\n};\n\nexport default buildFormData;\n","// ==========================================================================\n// Fetch\n// ==========================================================================\n\nimport humps from 'humps';\n\nimport buildFormData from './form-data';\nimport { extend, parseJSON } from './objects';\n\nconst defaults = {\n    type: 'GET',\n    body: {},\n    responseType: 'json',\n};\n\n/**\n * Custom immitation fetch using XHR\n * @param {String} url - The URL of the endpoint\n * @param {Object} options - Object of options for the request\n */\nexport default function(url, options = {}) {\n    const { type, body, responseType } = extend({}, defaults, options);\n\n    return new Promise((resolve, reject) => {\n        try {\n            const xhr = new XMLHttpRequest();\n\n            // Check for CORS support\n            if (!('withCredentials' in xhr)) {\n                const error = new Error('No CORS support');\n                error.request = xhr;\n                throw error;\n            }\n\n            // Handle failures\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status\n            const fail = () => {\n                const error = new Error(xhr.status);\n                error.request = xhr;\n                reject(error);\n            };\n\n            // Successfully made the request\n            xhr.addEventListener('load', () => {\n                const { response } = xhr;\n\n                // Something went wrong either with the request or server\n                if (xhr.status >= 400) {\n                    fail();\n                    return;\n                }\n\n                // Parse JSON responses\n                if (responseType === 'json') {\n                    parseJSON(response)\n                        .then(json => {\n                            if (json.success) {\n                                const data = humps.camelizeKeys(json.data);\n                                resolve(data);\n                            } else {\n                                const error = new Error('Request failed');\n                                error.errors = json.errors;\n                                reject(error);\n                            }\n                        })\n                        .catch(reject);\n                } else {\n                    resolve(response);\n                }\n            });\n\n            // Request failed\n            xhr.addEventListener('error', fail);\n\n            // Start the request\n            xhr.open(type, url, true);\n\n            // Set the required response type\n            // 'json' responseType is much slower, so we parse later\n            // https://github.com/arendjr/fetch-vs-xhr-perf\n            if (responseType !== 'json') {\n                xhr.responseType = responseType;\n            }\n\n            // Send data if passed\n            xhr.send(buildFormData(body));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// Common fetch actions\n// ==========================================================================\n\nimport fetch from './fetch';\n\nconst queue = {};\n\nconst http = {\n    /**\n     * GET remote URL and parse as JSON\n     * @param {String} url - The endpoint URL\n     */\n    get(url) {\n        // Queue requests to prevent hammering\n        if (!Object.keys(queue).includes(url)) {\n            queue[url] = fetch(url);\n\n            const remove = () => {\n                delete queue[url];\n            };\n\n            // Remove from queue on completed\n            queue[url].then(remove).catch(remove);\n        }\n\n        return queue[url];\n    },\n\n    /**\n     * POST to remote URL and parse as JSON\n     * @param {String} url - The endpoint URL\n     * @param {Object} data - The POST data payload\n     */\n    post(url, data = {}) {\n        const options = {\n            type: 'POST',\n            body: data,\n        };\n\n        return fetch(url, options);\n    },\n};\n\nexport default http;\n","// ==========================================================================\n// Array utils\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Remove duplicates in an array\n * @param {array} array\n */\nexport function dedupe(array) {\n    if (!is.array(array)) {\n        return array;\n    }\n\n    return array.filter((item, index) => array.indexOf(item) === index);\n}\n\n// Rounding methods for .closest()\nconst closestRounding = {\n    none: 0,\n    ceil: 1,\n    floor: 2,\n};\nexport { closestRounding };\n\n/**\n * Get the closest value in an array\n * @param {array} array\n * @param {number} value\n * @param {number} rounding\n */\nexport function closest(array, value, rounding = closestRounding.none) {\n    if (!is.array(array) || !array.length) {\n        return null;\n    }\n\n    return array.reduce((prev, curr) => {\n        if (Math.abs(curr - value) <= Math.abs(prev - value)) {\n            switch (rounding) {\n                case closestRounding.ceil:\n                    return curr >= value ? curr : prev;\n\n                case closestRounding.floor:\n                    return curr <= value ? curr : prev;\n\n                default:\n                    return curr;\n            }\n        }\n\n        return prev;\n    });\n}\n","// ==========================================================================\n// Local storage wrapper\n// TODO: methods should return promises?\n// ==========================================================================\n\nimport Store from '../classes/Store/Store';\nimport { dedupe } from './arrays';\nimport is from './is';\nimport { extend } from './objects';\nimport parseUrl from './parseUrl';\n\nconst storage = new Map();\n\nconst getKey = url => {\n    if (url === null) {\n        return null;\n    }\n\n    const parsed = parseUrl(url);\n\n    if (parsed === null) {\n        return null;\n    }\n\n    return `${parsed.host}${parsed.pathname}`.replace(/\\/$/, '');\n};\n\nclass Storage {\n    constructor(config) {\n        this.config = {\n            keys: {\n                root: 'selz-js-sdk',\n                carts: 'carts',\n                stores: 'stores',\n            },\n            ttl: 3600, // 1 hour\n            schema: new Date('2018-07-02').getTime(), // Schema version (allowing us to change data schema and invalidate storage)\n\n            ...config,\n        };\n\n        this.purge();\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        if (!window.localStorage) {\n            return false;\n        }\n\n        const key = '___test';\n\n        // Try to use it\n        try {\n            window.localStorage.setItem(key, key);\n            window.localStorage.removeItem(key);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        let data = storage.get(this.config.keys.root);\n\n        // Grab from real storage if we can or use faux-storage\n        if (Storage.supported) {\n            const stored = window.localStorage.getItem(this.config.keys.root);\n\n            if (!is.empty(stored)) {\n                data = JSON.parse(stored);\n            }\n        }\n\n        if (is.empty(data)) {\n            return null;\n        }\n\n        if (!is.empty(key)) {\n            return Object.keys(data).includes(key) ? data[key] : null;\n        }\n\n        return data;\n    }\n\n    set(key, value, merge = false) {\n        // Get current storage\n        const data = this.get() || {};\n\n        // Extend with the new data\n        if (merge && Object.keys(data).includes(key)) {\n            data[key] = extend(data[key], value);\n        } else {\n            data[key] = value;\n        }\n\n        // Set in faux-storage\n        storage.set(this.config.keys.root, data);\n\n        // Bail if no real support\n        if (!Storage.supported) {\n            return;\n        }\n\n        // Set schema version\n        data.schema = this.config.schema;\n\n        // Update storage\n        try {\n            window.localStorage.setItem(this.config.keys.root, JSON.stringify(data));\n        } catch (e) {\n            // Do nothing\n        }\n    }\n\n    // Clean up stale storage\n    purge() {\n        // Check schema\n        const data = this.get();\n\n        // Nothing to purge\n        if (is.empty(data)) {\n            return;\n        }\n\n        // If schema does not match, kill it\n        if (Number(data.schema) !== this.config.schema) {\n            window.localStorage.removeItem(this.config.keys.root);\n            return;\n        }\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n\n        // Nothing to cleanup\n        if (is.empty(stores)) {\n            return;\n        }\n\n        // Check TTL is valid\n        this.set(\n            this.config.keys.stores,\n            stores.filter(store => {\n                const ttl = Number(store.ttl);\n                return ttl > 0 && ttl > Date.now();\n            }),\n        );\n    }\n\n    getCarts(store) {\n        const data = this.get(this.config.keys.carts) || {};\n\n        // If no carts\n        if (is.empty(data)) {\n            return null;\n        }\n\n        // Get all carts\n        if (!is.number(store)) {\n            return data;\n        }\n\n        // Store not found\n        if (!Object.keys(data).includes(store.toString())) {\n            return null;\n        }\n\n        // Get all for a store\n        return data[store.toString()];\n    }\n\n    getCart(store, currency) {\n        const carts = this.getCarts(store);\n\n        // No carts\n        if (is.empty(carts)) {\n            return null;\n        }\n\n        // Get all for a store\n        if (!is.string(currency)) {\n            return carts;\n        }\n\n        // Currency not found\n        if (!Object.keys(carts).includes(currency.toUpperCase())) {\n            return null;\n        }\n\n        return carts[currency.toUpperCase()];\n    }\n\n    setCart(store, currency, cart) {\n        this.set(\n            this.config.keys.carts,\n            {\n                [store]: {\n                    [currency.toUpperCase()]: {\n                        id: cart.id,\n                        active: cart.active,\n                    },\n                },\n            },\n            true,\n        );\n    }\n\n    setCarts(store, carts = {}) {\n        this.set(this.config.keys.carts, {\n            [store]: carts,\n        });\n    }\n\n    getStore(input) {\n        let store = null;\n\n        if (!is.number(input) && !is.url(input)) {\n            return null;\n        }\n\n        const stores = this.get(this.config.keys.stores) || [];\n\n        if (is.number(input)) {\n            store = stores.find(s => is.object(s.data) && s.data.id === input);\n        } else if (is.url(input)) {\n            const key = getKey(input);\n\n            // Bail if invalid URL\n            if (key === null) {\n                return null;\n            }\n\n            store = stores.find(s => is.array(s.urls) && s.urls.includes(key));\n        }\n\n        if (!is.object(store)) {\n            return null;\n        }\n\n        // Check TTL is valid\n        const ttl = Number(store.ttl);\n\n        if (ttl > 0 && ttl < Date.now()) {\n            this.purge();\n            return null;\n        }\n\n        return new Store(store.data);\n    }\n\n    setStore(data, url = null) {\n        // Strip the protocol from the lookup url\n        const key = getKey(url);\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n        let existing = null;\n\n        if (!is.empty(stores)) {\n            // Find existing store by id\n            existing = stores.find(s => s.data.id === data.id);\n        }\n\n        // Extend TTL each\n        const ttl = Date.now() + this.config.ttl;\n\n        // If we found something\n        if (is.object(existing)) {\n            // Update data and extend TTL\n            Object.assign(existing, {\n                data,\n                ttl,\n            });\n\n            if (key !== null) {\n                // Add the URL key for later lookup\n                if (!is.array(existing.urls)) {\n                    existing.urls = [key];\n                } else {\n                    existing.urls.push(key);\n                }\n\n                // Remove duplicate entries\n                const urls = dedupe(existing.urls);\n\n                // Add to existing record\n                Object.assign(existing, {\n                    urls,\n                });\n            }\n        } else {\n            const store = {\n                data,\n                ttl,\n            };\n\n            if (key !== null) {\n                Object.assign(store, {\n                    urls: [key],\n                });\n            }\n\n            stores.push(store);\n        }\n\n        this.set(this.config.keys.stores, stores);\n    }\n}\n\nexport default Storage;\n","/**\n * Parse a string to URL object\n * @param {String} url\n */\nexport default function parseUrl(url) {\n    let string = url;\n\n    // Add the protocol if required\n    if (!/^https?:\\/\\/*/.test(url)) {\n        string = `http://${url}`;\n    }\n\n    try {\n        return new URL(string);\n    } catch (e) {\n        return null;\n    }\n}\n","import { Cart, CartAddItem, CartItem } from './classes/Cart';\nimport Category from './classes/Category';\nimport { Product } from './classes/Product';\nimport Store from './classes/Store';\nimport config from './config';\nimport http from './utils/http';\nimport is from './utils/is';\nimport Storage from './utils/storage';\n\nclass Client {\n    constructor(props) {\n        const { env, store, source } = props;\n\n        this.env = !is.empty(env) ? env : '';\n        this.store = store;\n        this.source = source;\n\n        if (!is.url(store) && !is.number(store)) {\n            throw Error('A store ID or URL is required to create a client');\n        }\n\n        this.storage = new Storage();\n    }\n\n    /**\n     * Get the store ID only\n     */\n    getStoreId() {\n        return new Promise((resolve, reject) => {\n            if (is.number(this.store)) {\n                resolve(this.store);\n                return;\n            }\n\n            if (this.store instanceof Store) {\n                resolve(this.store.id);\n                return;\n            }\n\n            // URL is required\n            if (!is.url(this.store)) {\n                reject(new Error('Url is required for user lookup'));\n            }\n\n            // Get by URL\n            this.getStore()\n                .then(store => {\n                    resolve(store.id);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the Store for current instance\n     */\n    getStore() {\n        return new Promise((resolve, reject) => {\n            // Try from cache by ID or URL\n            if (is.number(this.store) || is.url(this.store)) {\n                const cached = this.storage.getStore(this.store);\n\n                // Return cached if we have it\n                if (cached !== null && cached instanceof Store) {\n                    resolve(cached);\n                    return;\n                }\n            }\n\n            // If already fetched\n            if (this.store instanceof Store) {\n                resolve(this.store);\n                return;\n            }\n\n            // Fetch from remote by ID or URL\n            const url = config.urls.store(this.env, this.store);\n\n            http.get(url)\n                .then(store => {\n                    this.setStore(store);\n                    resolve(this.store);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the store details\n     * @param {object} store\n     */\n    setStore(store) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Store reference to lookup URL\n        const url = is.url(this.store) ? this.store : null;\n\n        // Map to Store\n        this.store = new Store(store);\n\n        // Add to storage for cache\n        this.storage.setStore(this.store, url);\n    }\n\n    /**\n     * Get product data\n     * @param {String} url - Short or full URL for a product\n     */\n    getProduct(url) {\n        return new Promise((resolve, reject) => {\n            http.get(config.urls.product(this.env, url))\n                .then(json => {\n                    if (!(this.store instanceof Store)) {\n                        this.setStore(json.store);\n                    }\n\n                    resolve(new Product(this, json));\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all products\n     */\n    getProducts(keyword = '', category = '', page = 1) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    http.get(\n                        config.urls.products(\n                            this.env,\n                            id,\n                            !is.empty(keyword) ? keyword : '',\n                            is.string(category) ? category : '',\n                            !is.number(page) || page < 1 ? 1 : page,\n                        ),\n                    )\n                        .then(json => {\n                            resolve({\n                                ...json,\n                                products: json.products.map(p => new Product(this, p)),\n                            });\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all categories\n     */\n    getCategories() {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    http.get(config.urls.categories(this.env, id))\n                        .then(json => {\n                            resolve({\n                                ...json,\n                                categories: json.categories.map(c => new Category(c)),\n                            });\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Buy a product\n     * @param {Object} item - The cart item\n     * @returns {Cart}\n     */\n    buy(item) {\n        return new Promise((resolve, reject) => {\n            if (is.empty(item)) {\n                reject(new Error('A cart item is required'));\n                return;\n            }\n\n            // Map the cart item if required\n            let cartItem = item;\n            if (is.object(item) || item instanceof Product) {\n                cartItem = new CartAddItem(item);\n            }\n\n            if (!(cartItem instanceof CartAddItem)) {\n                reject(new Error('A valid cart item is required'));\n            }\n\n            http.post(config.urls.buy(this.env), cartItem)\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Cache store\n                    this.setStore(cart.store);\n\n                    resolve(cart);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Create a new shopping cart\n     * @param {String} currency - ISO currency code\n     * @param {String} discount - Discount code\n     */\n    createCart(currency, discount) {\n        return new Promise((resolve, reject) => {\n            if (is.empty(currency)) {\n                reject(new Error('currency is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n\n                    http.post(config.urls.createCart(this.env, id), {\n                        currency: currencyCode,\n                        discount: !is.empty(discount) ? discount : null,\n                        source: this.source,\n                    })\n                        .then(json => {\n                            const cart = new Cart(this, json);\n\n                            // Store reference to cart id for later\n                            this.storage.setCart(id, currencyCode, cart);\n\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart or create one if needed\n     * @param {String} currency - The shopping cart ISO currency code\n     */\n    getCartId(currency) {\n        return new Promise((resolve, reject) => {\n            if (!is.currencyCode(currency)) {\n                reject(new Error('A valid currency code is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n                    const currentCart = this.storage.getCart(id, currencyCode);\n\n                    // Create cart if it doesn't exist\n                    if (is.empty(currentCart)) {\n                        this.createCart(currencyCode)\n                            .then(cart => resolve(cart.id))\n                            .catch(reject);\n                    } else {\n                        resolve(currentCart.id);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart\n     * @param {String} input - The shopping cart ISO currency code or cart ID\n     */\n    getCart(input) {\n        return new Promise((resolve, reject) => {\n            const isCurrency = is.currencyCode(input);\n            const isObjectId = is.objectId(input);\n\n            if (!isCurrency && !isObjectId) {\n                reject(new Error('A valid currency code or cart id are required'));\n                return;\n            }\n\n            if (isCurrency) {\n                const currencyCode = input.toUpperCase();\n\n                this.getCartId(currencyCode)\n                    .then(id => {\n                        if (is.empty(id)) {\n                            reject(new Error(`Could not find matching cart for currency code '${currencyCode}'`));\n                            return;\n                        }\n\n                        this.getCart(id)\n                            .then(cart => {\n                                // Update store\n                                this.setStore(cart.store);\n\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    })\n                    .catch(reject);\n            } else {\n                http.get(config.urls.getCart(this.env, input))\n                    .then(json => {\n                        const activeId = this.getActiveCart();\n                        const cart = new Cart(this, json, json.id === activeId);\n\n                        // Update store\n                        this.setStore(cart.store);\n\n                        resolve(cart);\n                    })\n                    .catch(reject);\n            }\n        });\n    }\n\n    /**\n     * Get all current carts\n     */\n    getCarts(validate = true) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (is.empty(carts)) {\n                        resolve(null);\n                        return;\n                    }\n\n                    // Check the carts still exist in the server\n                    if (validate) {\n                        const ids = Object.keys(carts).map(currency => carts[currency].id);\n\n                        http.get(config.urls.checkCarts(this.env, ids.join(',')))\n                            .then(json => {\n                                // Remove non existant carts\n                                Object.entries(json).forEach(([cartId, exists]) => {\n                                    if (!exists) {\n                                        const currency = Object.keys(carts).find(c => carts[c].id === cartId);\n                                        delete carts[currency];\n                                    }\n                                });\n\n                                // Store again\n                                this.storage.setCarts(id, carts);\n\n                                // Set active\n                                if (!Object.values(carts).find(cart => cart.active)) {\n                                    this.setActiveCart()\n                                        .then(resolve)\n                                        .catch(reject);\n                                } else {\n                                    resolve(carts);\n                                }\n                            })\n                            .catch(reject);\n                    } else {\n                        resolve(carts);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the active cart based on currency\n     * @param {String} input - The shopping cart ISO currency code or cart ID\n     */\n    setActiveCart(input = null) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    this.getCarts(false).then(data => {\n                        const carts = data;\n\n                        // No carts\n                        if (is.empty(carts)) {\n                            resolve(null);\n                            return;\n                        }\n\n                        // Currency code was passed...\n                        if (is.currencyCode(input)) {\n                            const currencyCode = input.toUpperCase();\n                            const currencies = Object.keys(carts);\n\n                            // Bail if not included\n                            if (!currencies.includes(currencyCode)) {\n                                reject(new Error(`No carts for ${currencyCode}`));\n                                return;\n                            }\n\n                            // Set active\n                            currencies.forEach(currency => {\n                                carts[currency].active = currency === currencyCode;\n                            });\n                        } else {\n                            // Set to id if specified, otherwise first\n                            const cartId = is.objectId(input) ? input : carts[Object.keys(carts)[0]].id;\n\n                            // Set active\n                            Object.keys(carts).forEach(currency => {\n                                const cart = carts[currency];\n                                cart.active = cart.id === cartId;\n                            });\n                        }\n\n                        // Store again\n                        this.storage.setCarts(id, carts);\n\n                        resolve(carts);\n                    });\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the current active cart\n     */\n    getActiveCart(fetch = false) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (!Object.keys(carts).length) {\n                        resolve(null);\n                        return;\n                    }\n\n                    const active = Object.values(carts).find(cart => cart.active);\n\n                    if (!active) {\n                        resolve(null);\n                        return;\n                    }\n\n                    if (!fetch) {\n                        resolve(active.id);\n                        return;\n                    }\n\n                    this.getCart(active.id)\n                        .then(resolve)\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Add a product to a cart\n     * @param {String} id - The cart ID\n     * @param {Object} item - The cart item\n     */\n    addToCart(id, item) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(item)) {\n                reject(new Error('A cart item is required'));\n                return;\n            }\n\n            // Map the cart item if required\n            let cartItem = item;\n            if (is.object(item) || item instanceof Product) {\n                cartItem = new CartAddItem(item);\n            }\n\n            if (!(cartItem instanceof CartAddItem)) {\n                reject(new Error('A valid cart item is required'));\n            }\n\n            http.post(config.urls.addToCart(this.env, id), cartItem)\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Update an items quantity in the shopping cart\n     * @param {String} id - The shopping cart ID\n     * @param {String} index - The shopping cart item quid\n     * @param {Number} quantity - Desired quantity\n     */\n    updateCartItemQuantity(id, index, quantity = 1) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.updateCartItemQuantity(this.env, id), { index, quantity })\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Remove a product from a cart\n     * @param {String} id - The shopping cart id\n     * @param {String} index - The shopping cart item guid\n     */\n    removeFromCart(id, index) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.removeFromCart(this.env, id), { index })\n                .then(json => {\n                    // If there's actually a cart left, map it\n                    if (!is.empty(json)) {\n                        const cart = new Cart(this, json, true);\n\n                        // Set the active cart\n                        this.setActiveCart(cart.id)\n                            .then(() => {\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    } else {\n                        // Otherwise, update carts (as one removed)\n                        this.getCarts()\n                            .then(() => resolve(null))\n                            .catch(reject);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n}\n\nexport { Product, Category, Cart, CartItem, CartAddItem, Store };\n\nexport default Client;\n"]}