{"version":3,"file":"client.js","sources":["src/utils/is.js","src/config.js","src/models/Product.js","src/models/Cart.js","src/models/Store.js","src/utils/strings.js","src/utils/form-data.js","src/utils/objects.js","src/utils/fetch.js","src/utils/http.js","src/utils/storage.js","src/utils/parseUrl.js","src/utils/arrays.js","src/client.js"],"sourcesContent":["// ==========================================================================\n// Type checking\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\nconst isArray = input => Array.isArray(input);\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObjectId = input => isString(input) && /^[a-f\\d]{24}$/i.test(input);\nconst isCurrencyCode = input => isString(input) && /^[A-z]{3}$/.test(input);\n\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nconst isUrl = (input, strict = false) => {\n    // Accept a URL object\n    if (instanceOf(input, window.URL)) {\n        return true;\n    }\n\n    // Add the protocol if required\n    let string = input;\n    if (!strict && !/^https?:\\/\\/*/.test(input)) {\n        string = `http://${input}`;\n    }\n\n    try {\n        return !isEmpty(new URL(string).hostname);\n    } catch (e) {\n        return false;\n    }\n};\n\nconst is = {\n    array: isArray,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    nullOrUndefined: isNullOrUndefined,\n    objectId: isObjectId,\n    currencyCode: isCurrencyCode,\n    url: isUrl,\n    empty: isEmpty,\n};\n\nexport default is;\n","import is from './utils/is';\n\nfunction getBase(env) {\n    return `https://${!is.empty(env) ? `${env}-` : ''}selz.com/sdk/`;\n}\n\nconst config = {\n    urls: {\n        /**\n         * Get URL for product data by URL\n         * @param {string} env - Environment (for internal use)\n         * @param {string} url - Short or full URL for a product\n         */\n        product(env, url = '') {\n            return `${getBase(env)}products/find?url=${url}`;\n        },\n\n        /**\n         * Get URL for all products by store ID\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - The store ID\n         * @param {string} query - Search query\n         * @param {number} page - Page to fetch\n         */\n        products(env, id, query = '', page = 1) {\n            return `${getBase(env)}products/all${id}?q=${query}&p=${page}`;\n        },\n\n        /**\n         * Get URL for finding a store by URL or ID\n         * @param {string} env - Environment (for internal use)\n         * @param {number|string} input - The ID or URL to lookup\n         */\n        store(env, input = null) {\n            if (is.number(input)) {\n                return `${getBase(env)}store/find/${input}`;\n            }\n\n            return `${getBase(env)}store/find?url=${input}`;\n        },\n\n        /**\n         * Create a new cart\n         * @param {string} env - Environment (for internal use)\n         * @param {number} id - Store ID\n         */\n        createCart(env, id = '') {\n            return `${getBase(env)}cart/create/${id}`;\n        },\n\n        /**\n         * Get cart from ID\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - Cart ID\n         */\n        getCart(env, id = '') {\n            return `${getBase(env)}cart/${id}`;\n        },\n\n        /**\n         * Check carts still exist server side\n         * @param {string} env - Environment (for internal use)\n         * @param {number} id - Cart IDs\n         */\n        checkCarts(env, ids = '') {\n            return `${getBase(env)}cart/verify?ids=${ids}`;\n        },\n\n        /**\n         * Add product to cart\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - Cart ID\n         */\n        addToCart(env, id = '') {\n            return `${getBase(env)}cart/add/${id}`;\n        },\n\n        /**\n         * Update a cart item quantity\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - Cart ID\n         */\n        updateCartItemQuantity(env, id = '') {\n            return `${getBase(env)}cart/updateitemquantity/${id}`;\n        },\n\n        /**\n         * Remove product from cart\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - Cart ID\n         */\n        removeFromCart(env, id = '') {\n            return `${getBase(env)}cart/remove/${id}`;\n        },\n    },\n};\n\nexport default config;\n","import is from '../utils/is';\n\nlet client = null;\n\nclass ProductUrls {\n    constructor(urls) {\n        // Take all properties by default\n        Object.assign(this, urls);\n    }\n}\n\nclass ProductImage {\n    constructor(image) {\n        // Take all properties by default\n        Object.assign(this, image);\n    }\n}\n\nclass ProductMedia {\n    constructor(media) {\n        // Take all properties by default\n        Object.assign(this, media);\n\n        // Map cover image\n        this.cover = new ProductImage(media.cover);\n    }\n}\n\nclass ProductFile {\n    constructor(file) {\n        // Take all properties by default\n        Object.assign(this, file);\n    }\n}\n\nclass ProductVariant {\n    constructor(variant, selected = '') {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        this.selected = variant.id === selected;\n    }\n}\n\nclass ProductVariantAttributeOption {\n    constructor(id, label) {\n        this.id = id;\n        this.label = label;\n    }\n}\n\nclass ProductVariantAttribute {\n    constructor(variant) {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        // Map options\n        this.options = Object.keys(variant.options).map(\n            id => new ProductVariantAttributeOption(id, variant.options[id]),\n        );\n    }\n}\n\nclass Product {\n    constructor(instance, product, variantId = '') {\n        if (!is.object(product)) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, product);\n\n        // Map store\n        this.store = client.store;\n\n        // Product URLs\n        if (is.object(product.urls)) {\n            this.urls = new ProductUrls(product.urls);\n        }\n\n        // Media (Video, YouTube, Vimeo, Audio)\n        if (is.object(product.media)) {\n            this.media = new ProductMedia(product.media);\n        }\n\n        // Images\n        if (is.array(product.images)) {\n            this.images = product.images.map(image => new ProductImage(image));\n        }\n\n        // Files for digital products\n        if (is.array(product.files)) {\n            this.files = product.files.map(file => new ProductFile(file));\n        }\n\n        // Variants\n        if (product.has_variants) {\n            const selected = !is.empty(variantId) ? variantId : product.variants[0].id;\n            this.variants = product.variants.map(variant => new ProductVariant(variant, selected));\n        }\n        if (product.has_variant_attributes) {\n            this.variant_attributes = product.variant_attributes.map(\n                attribute => new ProductVariantAttribute(attribute),\n            );\n        }\n    }\n\n    // eslint-disable-next-line camelcase\n    get selected_variant() {\n        if (is.empty(this.variants)) {\n            return null;\n        }\n\n        return this.variants.find(variant => variant.selected);\n    }\n}\n\nexport default Product;\n","import Product from './Product';\n\nlet client = null;\n\nclass CartItem {\n    constructor(item, cartId) {\n        this.cartId = cartId;\n\n        // Take all properties by default\n        Object.assign(this, item);\n\n        // Map product\n        this.product = new Product(client, item.product, item.variant_id);\n    }\n}\n\nclass Cart {\n    constructor(instance, cart, active = false) {\n        if (cart === null) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, cart);\n\n        // Map store\n        this.store = client.store;\n\n        // Set active state\n        this.active = active;\n\n        // Map items\n        this.items = Array.from(cart.items).map(item => new CartItem(item, cart.id));\n    }\n\n    /**\n     * Add a product to this cart\n     * @param {object} product - The product details\n     */\n    add(product) {\n        return client.addToCart(this.id, product);\n    }\n\n    /**\n     * Remove a product from this cart\n     * @param {string} index\n     */\n    remove(index) {\n        return client.removeFromCart(this.id, index);\n    }\n}\n\nexport default Cart;\n","import is from '../utils/is';\n\nclass Store {\n    constructor(store = null) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, store);\n    }\n}\n\nexport default Store;\n","// ==========================================================================\n// String utils\n// ==========================================================================\n\n// Replace all occurances of a string in a string\nexport function replaceAll(input = '', find = '', replace = '') {\n    return input.replace(\n        new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'),\n        replace.toString(),\n    );\n}\n\n// Convert to title case\nexport function toTitleCase(input = '') {\n    return input.toString().replace(/\\w\\S*/g, text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase());\n}\n\n// Convert string to pascalCase\nexport function toPascalCase(input = '') {\n    let string = input.toString();\n\n    // Convert kebab case\n    string = replaceAll(string, '-', ' ');\n\n    // Convert snake case\n    string = replaceAll(string, '_', ' ');\n\n    // Convert to title case\n    string = toTitleCase(string);\n\n    // Convert to pascal case\n    return replaceAll(string, ' ', '');\n}\n\n// Convert string to pascalCase\nexport function toCamelCase(input = '') {\n    let string = input.toString();\n\n    // Convert to pascal case\n    string = toPascalCase(string);\n\n    // Convert first character to lowercase\n    return string.charAt(0).toLowerCase() + string.slice(1);\n}\n","// ==========================================================================\n// Form Data utils\n// ==========================================================================\n\nimport is from './is';\nimport { toPascalCase } from './strings';\n\n/**\n * Convert an Object to FormData\n * @param {Object} source - source Object\n * @param {FormData} form - existing FormData object\n * @param {String} namespace - namespace for FormData\n */\nconst buildFormData = (source = {}, form, namespace) => {\n    const data = form || new FormData();\n    let formKey;\n\n    // Source must be an object\n    if (!is.object(source)) {\n        return data;\n    }\n\n    // Loop through the object to convert\n    Object.keys(source).forEach(key => {\n        if (namespace) {\n            formKey = `${namespace}[${key}]`;\n        } else {\n            formKey = key;\n        }\n\n        // If the property is an object, but not a File, use recursivity\n        if (typeof source[key] === 'object' && !(source[key] instanceof File)) {\n            buildFormData(source[key], data, key);\n        } else {\n            data.append(toPascalCase(formKey), source[key]);\n        }\n    });\n\n    return data;\n};\n\nexport default buildFormData;\n","// ==========================================================================\n// Extend objects\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Deep extend destination object with N more objects\n * @param {Object} target\n * @param {...Object} sources\n */\nexport function extend(target = {}, ...sources) {\n    if (!sources.length) {\n        return target;\n    }\n\n    const source = sources.shift();\n\n    if (!is.object(source)) {\n        return target;\n    }\n\n    Object.keys(source).forEach(key => {\n        if (is.object(source[key])) {\n            if (!Object.keys(target).includes(key)) {\n                Object.assign(target, { [key]: {} });\n            }\n\n            extend(target[key], source[key]);\n        } else {\n            Object.assign(target, { [key]: source[key] });\n        }\n    });\n\n    return extend(target, ...sources);\n}\n\n/**\n * Safer JSON parsing\n * @param {Object} data\n */\nexport function parseJSON(data = {}) {\n    return new Promise((resolve, reject) => {\n        try {\n            resolve(JSON.parse(data));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// Fetch\n// ==========================================================================\n\nimport buildFormData from './form-data';\nimport { extend, parseJSON } from './objects';\n\nconst defaults = {\n    type: 'GET',\n    body: {},\n    responseType: 'json',\n};\n\n/**\n * Custom immitation fetch using XHR\n * @param {string} url - The URL of the endpoint\n * @param {object} options - Object of options for the request\n */\nexport default function(url, options = {}) {\n    const { type, body, responseType } = extend({}, defaults, options);\n\n    return new Promise((resolve, reject) => {\n        try {\n            const xhr = new XMLHttpRequest();\n\n            // Check for CORS support\n            if (!('withCredentials' in xhr)) {\n                const error = new Error('No CORS support');\n                error.request = xhr;\n                throw error;\n            }\n\n            xhr.addEventListener('load', () => {\n                const { response } = xhr;\n\n                // Parse JSON responses\n                if (responseType === 'json') {\n                    parseJSON(response)\n                        .then(json => {\n                            if (json.success) {\n                                resolve(json.data);\n                            } else {\n                                const error = new Error('Request failed');\n                                error.errors = json.errors;\n                                throw error;\n                            }\n                        })\n                        .catch(reject);\n                } else {\n                    resolve(response);\n                }\n            });\n\n            xhr.addEventListener('error', () => {\n                const error = new Error(xhr.status);\n                error.request = xhr;\n                throw error;\n            });\n\n            // Start the request\n            xhr.open(type, url, true);\n\n            // Set the required response type\n            // 'json' responseType is much slower, so we parse later\n            // https://github.com/arendjr/fetch-vs-xhr-perf\n            if (responseType !== 'json') {\n                xhr.responseType = responseType;\n            }\n\n            // Send data if passed\n            xhr.send(buildFormData(body));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// Common fetch actions\n// ==========================================================================\n\nimport fetch from './fetch';\n\nconst queue = {};\n\nconst http = {\n    /**\n     * GET remote URL and parse as JSON\n     * @param {string} url - The endpoint URL\n     */\n    get(url) {\n        // Queue requests to prevent hammering\n        if (!Object.keys(queue).includes(url)) {\n            queue[url] = fetch(url);\n\n            const remove = () => {\n                delete queue[url];\n            };\n\n            // Remove from queue on completed\n            queue[url].then(remove).catch(remove);\n        }\n\n        return queue[url];\n    },\n\n    /**\n     * POST to remote URL and parse as JSON\n     * @param {string} url - The endpoint URL\n     * @param {object} data - The POST data payload\n     */\n    post(url, data = {}) {\n        const options = {\n            type: 'POST',\n            body: data,\n        };\n\n        return fetch(url, options);\n    },\n};\n\nexport default http;\n","// ==========================================================================\n// Local storage wrapper\n// TODO: methods should return promises?\n// ==========================================================================\n\nimport Store from '../models/Store';\nimport { dedupe } from './arrays';\nimport is from './is';\nimport { extend } from './objects';\nimport parseUrl from './parseUrl';\n\nconst storage = new Map();\n\nconst getKey = url => {\n    if (url === null) {\n        return null;\n    }\n\n    const parsed = parseUrl(url);\n\n    if (parsed === null) {\n        return null;\n    }\n\n    return `${parsed.host}${parsed.pathname}`.replace(/\\/$/, '');\n};\n\nclass Storage {\n    constructor(config) {\n        this.config = Object.assign(\n            {\n                keys: {\n                    root: 'selz-js-sdk',\n                    carts: 'carts',\n                    stores: 'stores',\n                },\n                ttl: 3600, // 1 hour\n                schema: new Date('2018-07-02').getTime(), // Schema version (allowing us to change data schema and invalidate storage)\n            },\n            config,\n        );\n\n        this.purge();\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        if (!window.localStorage) {\n            return false;\n        }\n\n        const key = '___test';\n\n        // Try to use it\n        try {\n            window.localStorage.setItem(key, key);\n            window.localStorage.removeItem(key);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        let data = storage.get(this.config.keys.root);\n\n        // Grab from real storage if we can or use faux-storage\n        if (Storage.supported) {\n            const stored = window.localStorage.getItem(this.config.keys.root);\n\n            if (!is.empty(stored)) {\n                data = JSON.parse(stored);\n            }\n        }\n\n        if (is.empty(data)) {\n            return null;\n        }\n\n        if (!is.empty(key)) {\n            return Object.keys(data).includes(key) ? data[key] : null;\n        }\n\n        return data;\n    }\n\n    set(key, value, merge = false) {\n        // Get current storage\n        const data = this.get() || {};\n\n        // Extend with the new data\n        if (merge && Object.keys(data).includes(key)) {\n            data[key] = extend(data[key], value);\n        } else {\n            data[key] = value;\n        }\n\n        // Set in faux-storage\n        storage.set(this.config.keys.root, data);\n\n        // Bail if no real support\n        if (!Storage.supported) {\n            return;\n        }\n\n        // Set schema version\n        data.schema = this.config.schema;\n\n        // Update storage\n        try {\n            window.localStorage.setItem(this.config.keys.root, JSON.stringify(data));\n        } catch (e) {\n            // Do nothing\n        }\n    }\n\n    // Clean up stale storage\n    purge() {\n        // Check schema\n        const data = this.get();\n\n        // Nothing to purge\n        if (is.empty(data)) {\n            return;\n        }\n\n        // If schema does not match, kill it\n        if (Number(data.schema) !== this.config.schema) {\n            window.localStorage.removeItem(this.config.keys.root);\n            return;\n        }\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n\n        // Nothing to cleanup\n        if (is.empty(stores)) {\n            return;\n        }\n\n        // Check TTL is valid\n        this.set(\n            this.config.keys.stores,\n            stores.filter(store => {\n                const ttl = Number(store.ttl);\n                return ttl > 0 && ttl > Date.now();\n            }),\n        );\n    }\n\n    getCarts(store) {\n        const data = this.get(this.config.keys.carts) || {};\n\n        // If no carts\n        if (is.empty(data)) {\n            return null;\n        }\n\n        // Get all carts\n        if (!is.number(store)) {\n            return data;\n        }\n\n        // Store not found\n        if (!Object.keys(data).includes(store.toString())) {\n            return null;\n        }\n\n        // Get all for a store\n        return data[store.toString()];\n    }\n\n    getCart(store, currency) {\n        const carts = this.getCarts(store);\n\n        // No carts\n        if (is.empty(carts)) {\n            return null;\n        }\n\n        // Get all for a store\n        if (!is.string(currency)) {\n            return carts;\n        }\n\n        // Currency not found\n        if (!Object.keys(carts).includes(currency.toUpperCase())) {\n            return null;\n        }\n\n        return carts[currency.toUpperCase()];\n    }\n\n    setCart(store, currency, cart) {\n        this.set(\n            this.config.keys.carts,\n            {\n                [store]: {\n                    [currency.toUpperCase()]: {\n                        id: cart.id,\n                        active: cart.active,\n                    },\n                },\n            },\n            true,\n        );\n    }\n\n    setCarts(store, carts = {}) {\n        this.set(this.config.keys.carts, {\n            [store]: carts,\n        });\n    }\n\n    getStore(input) {\n        let store = null;\n\n        if (!is.number(input) && !is.url(input)) {\n            return null;\n        }\n\n        const stores = this.get(this.config.keys.stores) || [];\n\n        if (is.number(input)) {\n            store = stores.find(s => is.object(s.data) && s.data.id === input);\n        } else if (is.url(input)) {\n            const key = getKey(input);\n\n            // Bail if invalid URL\n            if (key === null) {\n                return null;\n            }\n\n            store = stores.find(s => is.array(s.urls) && s.urls.includes(key));\n        }\n\n        if (!is.object(store)) {\n            return null;\n        }\n\n        // Check TTL is valid\n        const ttl = Number(store.ttl);\n\n        if (ttl > 0 && ttl < Date.now()) {\n            this.purge();\n            return null;\n        }\n\n        return new Store(store.data);\n    }\n\n    setStore(data, url = null) {\n        // Strip the protocol from the lookup url\n        const key = getKey(url);\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n        let existing = null;\n\n        if (!is.empty(stores)) {\n            // Find existing store by id\n            existing = stores.find(s => s.data.id === data.id);\n        }\n\n        // Extend TTL each\n        const ttl = Date.now() + this.config.ttl;\n\n        // If we found something\n        if (is.object(existing)) {\n            // Update data and extend TTL\n            Object.assign(existing, {\n                data,\n                ttl,\n            });\n\n            if (key !== null) {\n                // Add the URL key for later lookup\n                if (!is.array(existing.urls)) {\n                    existing.urls = [key];\n                } else {\n                    existing.urls.push(key);\n                }\n\n                // Remove duplicate entries\n                const urls = dedupe(existing.urls);\n\n                // Add to existing record\n                Object.assign(existing, {\n                    urls,\n                });\n            }\n        } else {\n            const store = {\n                data,\n                ttl,\n            };\n\n            if (key !== null) {\n                Object.assign(store, {\n                    urls: [key],\n                });\n            }\n\n            stores.push(store);\n        }\n\n        this.set(this.config.keys.stores, stores);\n    }\n}\n\nexport default Storage;\n","/**\n * Parse a string to URL object\n * @param {String} url\n */\nexport default function parseUrl(url) {\n    let string = url;\n\n    // Add the protocol if required\n    if (!/^https?:\\/\\/*/.test(url)) {\n        string = `http://${url}`;\n    }\n\n    try {\n        return new URL(string);\n    } catch (e) {\n        return null;\n    }\n}\n","// ==========================================================================\n// Array utils\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Remove duplicates in an array\n * @param {array} array\n */\nexport function dedupe(array) {\n    if (!is.array(array)) {\n        return array;\n    }\n\n    return array.filter((item, index) => array.indexOf(item) === index);\n}\n\n// Rounding methods for .closest()\nconst closestRounding = {\n    none: 0,\n    ceil: 1,\n    floor: 2,\n};\nexport { closestRounding };\n\n/**\n * Get the closest value in an array\n * @param {array} array\n * @param {number} value\n * @param {number} rounding\n */\nexport function closest(array, value, rounding = closestRounding.none) {\n    if (!is.array(array) || !array.length) {\n        return null;\n    }\n\n    return array.reduce((prev, curr) => {\n        if (Math.abs(curr - value) <= Math.abs(prev - value)) {\n            switch (rounding) {\n                case closestRounding.ceil:\n                    return curr >= value ? curr : prev;\n\n                case closestRounding.floor:\n                    return curr <= value ? curr : prev;\n\n                default:\n                    return curr;\n            }\n        }\n\n        return prev;\n    });\n}\n","import config from './config';\nimport Cart from './models/Cart';\nimport Product from './models/Product';\nimport Store from './models/Store';\nimport http from './utils/http';\nimport is from './utils/is';\nimport Storage from './utils/storage';\n\nclass Client {\n    constructor(props) {\n        const { env, store } = props;\n\n        this.env = !is.empty(env) ? env : '';\n        this.store = store;\n\n        if (!is.url(store) && !is.number(store)) {\n            throw Error('A store ID or URL is required to create a client');\n        }\n\n        this.storage = new Storage();\n    }\n\n    /**\n     * Get the store ID only\n     */\n    getStoreId() {\n        return new Promise((resolve, reject) => {\n            if (is.number(this.store)) {\n                resolve(this.store);\n                return;\n            }\n\n            if (this.store instanceof Store) {\n                resolve(this.store.id);\n                return;\n            }\n\n            // URL is required\n            if (!is.url(this.store)) {\n                reject(new Error('Url is required for user lookup'));\n            }\n\n            // Get by URL\n            this.getStore()\n                .then(store => {\n                    resolve(store.id);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the Store for current instance\n     */\n    getStore() {\n        return new Promise((resolve, reject) => {\n            // Try from cache by ID or URL\n            if (is.number(this.store) || is.url(this.store)) {\n                const cached = this.storage.getStore(this.store);\n\n                // Return cached if we have it\n                if (cached !== null && cached instanceof Store) {\n                    resolve(cached);\n                    return;\n                }\n            }\n\n            // If already fetched\n            if (this.store instanceof Store) {\n                resolve(this.store);\n                return;\n            }\n\n            // Fetch from remote by ID or URL\n            const url = config.urls.store(this.env, this.store);\n\n            http.get(url)\n                .then(store => {\n                    this.setStore(store);\n                    resolve(this.store);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the store details\n     * @param {object} store\n     */\n    setStore(store) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Store reference to lookup URL\n        const url = is.url(this.store) ? this.store : null;\n\n        // Map to Store\n        this.store = new Store(store);\n\n        // Add to storage for cache\n        this.storage.setStore(this.store, url);\n    }\n\n    /**\n     * Get product data\n     * @param {string} url - Short or full URL for a product\n     */\n    getProduct(url) {\n        return new Promise((resolve, reject) => {\n            http.get(config.urls.product(this.env, url))\n                .then(json => {\n                    if (!(this.store instanceof Store)) {\n                        this.setStore(json.store);\n                    }\n\n                    resolve(new Product(this, json));\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all products\n     */\n    getProducts(query = '', page = 1) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    http.get(config.urls.products(this.env, id, query, page < 1 ? 1 : page))\n                        .then(json => {\n                            resolve(json.map(p => new Product(this, p)));\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Create a new shopping cart\n     * @param {string} currency - ISO currency code\n     * @param {string} discount - Discount code\n     */\n    createCart(currency, discount) {\n        return new Promise((resolve, reject) => {\n            if (is.empty(currency)) {\n                reject(new Error('currency is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n\n                    http.post(config.urls.createCart(this.env, id), {\n                        currency: currencyCode,\n                        discount: !is.empty(discount) ? discount : null,\n                    })\n                        .then(json => {\n                            const cart = new Cart(this, json);\n\n                            // Store reference to cart id for later\n                            this.storage.setCart(id, currencyCode, cart);\n\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart or create one if needed\n     * @param {string} currency - The shopping cart ISO currency code\n     */\n    getCartId(currency) {\n        return new Promise((resolve, reject) => {\n            if (!is.currencyCode(currency)) {\n                reject(new Error('A valid currency code is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n                    const currentCart = this.storage.getCart(id, currencyCode);\n\n                    // Create cart if it doesn't exist\n                    if (is.empty(currentCart)) {\n                        this.createCart(currencyCode)\n                            .then(cart => resolve(cart.id))\n                            .catch(reject);\n                    } else {\n                        resolve(currentCart.id);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart\n     * @param {string} input - The shopping cart ISO currency code or cart ID\n     */\n    getCart(input) {\n        return new Promise((resolve, reject) => {\n            const isCurrency = is.currencyCode(input);\n            const isObjectId = is.objectId(input);\n\n            if (!isCurrency && !isObjectId) {\n                reject(new Error('A valid currency code or cart id are required'));\n                return;\n            }\n\n            if (isCurrency) {\n                const currencyCode = input.toUpperCase();\n\n                this.getCartId(currencyCode)\n                    .then(id => {\n                        if (is.empty(id)) {\n                            reject(new Error(`Could not find matching cart for currency code '${currencyCode}'`));\n                            return;\n                        }\n\n                        this.getCart(id)\n                            .then(cart => {\n                                // Update store\n                                this.setStore(cart.store);\n\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    })\n                    .catch(reject);\n            } else {\n                http.get(config.urls.getCart(this.env, input))\n                    .then(json => {\n                        const activeId = this.getActiveCart();\n                        const cart = new Cart(this, json, json.id === activeId);\n\n                        // Update store\n                        this.setStore(cart.store);\n\n                        resolve(cart);\n                    })\n                    .catch(reject);\n            }\n        });\n    }\n\n    /**\n     * Get all current carts\n     */\n    getCarts(validate = true) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (is.empty(carts)) {\n                        resolve(null);\n                        return;\n                    }\n\n                    // Check the carts still exist in the server\n                    if (validate) {\n                        const ids = Object.keys(carts).map(currency => carts[currency].id);\n\n                        http.get(config.urls.checkCarts(this.env, ids.join(',')))\n                            .then(json => {\n                                // Remove non existant carts\n                                Object.entries(json).forEach(([cartId, exists]) => {\n                                    if (!exists) {\n                                        const currency = Object.keys(carts).find(c => carts[c].id === cartId);\n                                        delete carts[currency];\n                                    }\n                                });\n\n                                // Store again\n                                this.storage.setCarts(id, carts);\n\n                                // Set active\n                                if (!Object.values(carts).find(cart => cart.active)) {\n                                    this.setActiveCart()\n                                        .then(resolve)\n                                        .catch(reject);\n                                } else {\n                                    resolve(carts);\n                                }\n                            })\n                            .catch(reject);\n                    } else {\n                        resolve(carts);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the active cart based on currency\n     * @param {string} input - The shopping cart ISO currency code or cart ID\n     */\n    setActiveCart(input = null) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    this.getCarts(false).then(data => {\n                        const carts = data;\n\n                        // No carts\n                        if (is.empty(carts)) {\n                            resolve(null);\n                            return;\n                        }\n\n                        // Currency code was passed...\n                        if (is.currencyCode(input)) {\n                            const currencyCode = input.toUpperCase();\n                            const currencies = Object.keys(carts);\n\n                            // Bail if not included\n                            if (!currencies.includes(currencyCode)) {\n                                reject(new Error(`No carts for ${currencyCode}`));\n                                return;\n                            }\n\n                            // Set active\n                            currencies.forEach(currency => {\n                                carts[currency].active = currency === currencyCode;\n                            });\n                        } else {\n                            // Set to id if specified, otherwise first\n                            const cartId = is.objectId(input) ? input : carts[Object.keys(carts)[0]].id;\n\n                            // Set active\n                            Object.keys(carts).forEach(currency => {\n                                const cart = carts[currency];\n                                cart.active = cart.id === cartId;\n                            });\n                        }\n\n                        // Store again\n                        this.storage.setCarts(id, carts);\n\n                        resolve(carts);\n                    });\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the current active cart\n     */\n    getActiveCart(fetch = false) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (!Object.keys(carts).length) {\n                        resolve(null);\n                        return;\n                    }\n\n                    const active = Object.values(carts).find(cart => cart.active);\n\n                    if (!active) {\n                        resolve(null);\n                        return;\n                    }\n\n                    if (!fetch) {\n                        resolve(active.id);\n                        return;\n                    }\n\n                    this.getCart(active.id)\n                        .then(resolve)\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Add a product to a cart\n     * @param {string} id - The cart ID\n     * @param {object} product - The product details\n     */\n    addToCart(id, product) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(product)) {\n                reject(new Error('A valid product is required'));\n                return;\n            }\n\n            http.post(config.urls.addToCart(this.env, id), product)\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Update an items quantity in the shopping cart\n     * @param {string} id - The shopping cart ID\n     * @param {string} index - The shopping cart item quid\n     * @param {number} quantity - Desired quantity\n     */\n    updateCartItemQuantity(id, index, quantity = 1) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.updateCartItemQuantity(this.env, id), { index, quantity })\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Remove a product from a cart\n     * @param {string} id - The shopping cart id\n     * @param {string} index - The shopping cart item guid\n     */\n    removeFromCart(id, index) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.removeFromCart(this.env, id), { index })\n                .then(json => {\n                    // If there's actually a cart left, map it\n                    if (!is.empty(json)) {\n                        const cart = new Cart(this, json, true);\n\n                        // Set the active cart\n                        this.setActiveCart(cart.id)\n                            .then(() => {\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    } else {\n                        // Otherwise, update carts (as one removed)\n                        this.getCarts()\n                            .then(() => resolve(null))\n                            .catch(reject);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n}\n\nexport { Product, Cart, Store };\n\nexport default Client;\n"],"names":["getConstructor","input","constructor","isArray","Array","isObject","Object","isString","String","isNullOrUndefined","isEmpty","length","keys","is","Number","isNaN","Boolean","Function","test","strict","instanceOf","window","URL","string","hostname","e","getBase","env","empty","config","url","id","query","page","number","ids","client","ProductUrls","urls","assign","this","ProductImage","image","ProductMedia","media","cover","ProductFile","file","ProductVariant","variant","selected","ProductVariantAttribute","options","map","label","Product","instance","product","variantId","object","store","array","images","files","has_variants","variants","has_variant_attributes","variant_attributes","attribute","find","CartItem","item","cartId","variant_id","Cart","cart","active","items","from","addToCart","index","removeFromCart","Store","replaceAll","replace","RegExp","toString","buildFormData","source","form","namespace","data","FormData","formKey","forEach","key","babelHelpers.typeof","File","append","text","charAt","toUpperCase","substr","toLowerCase","toTitleCase","toPascalCase","extend","target","sources","shift","includes","defaults","type","body","responseType","Promise","resolve","reject","xhr","XMLHttpRequest","error","Error","request","addEventListener","response","JSON","parse","then","json","success","errors","catch","status","open","send","queue","http","fetch","remove","storage","Map","getKey","parsed","parseUrl","host","pathname","Storage","Date","getTime","purge","get","root","supported","stored","localStorage","getItem","value","merge","set","schema","setItem","stringify","stores","filter","ttl","now","removeItem","carts","currency","getCarts","s","existing","push","indexOf","Client","props","_this","getStore","_this2","cached","setStore","_this3","getStoreId","products","_this4","p","discount","currencyCode","createCart","_this5","setCart","currentCart","_this6","getCart","isCurrency","isObjectId","objectId","getCartId","_this7","activeId","getActiveCart","validate","_this8","checkCarts","join","entries","c","setCarts","values","setActiveCart","currencies","_this10","_this11","quantity","updateCartItemQuantity","_this12","_this13"],"mappings":"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"}