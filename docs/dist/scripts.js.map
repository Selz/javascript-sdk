{"version":3,"sources":["docs/src/scripts.js","src/utils/is.js","src/config.js","src/models/Product.js","src/models/Cart.js","src/models/Category.js","src/models/Store.js","src/utils/strings.js","src/utils/form-data.js","src/utils/objects.js","src/utils/fetch.js","src/utils/http.js","src/utils/storage.js","src/utils/parseUrl.js","src/utils/arrays.js","src/client.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","_defineProperty","value","_slicedToArray","arr","Array","isArray","_arrayWithHoles","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","_iterableToArrayLimit","_nonIterableRest","getConstructor","input","isObject","isString","String","isNullOrUndefined","isEmpty","keys","is","array","object","number","Number","isNaN","string","boolean","Boolean","function","Function","nullOrUndefined","objectId","test","currencyCode","url","strict","arguments","instanceOf","window","URL","concat","hostname","e","empty","getBase","env","config","product","products","id","keyword","category","page","categories","store","createCart","getCart","checkCarts","ids","addToCart","updateCartItemQuantity","removeFromCart","client","ProductUrls","a","urls","this","assign","ProductImage","image","ProductMedia","media","cover","ProductFile","file","ProductVariant","variant","selected","ProductVariantAttributeOption","label","ProductVariantAttribute","options","map","Product","variantId","images","files","has_variants","variants","has_variant_attributes","variant_attributes","attribute","get","find","CartItem","item","cartId","variant_id","Cart","cart","active","items","from","index","Category","Store","replaceAll","replace","RegExp","toString","buildFormData","formKey","source","form","namespace","data","FormData","forEach","File","append","text","charAt","toUpperCase","substr","toLowerCase","toTitleCase","toPascalCase","extend","b","sources","d","shift","includes","apply","defaults","type","body","responseType","fetch","c","Promise","resolve","reject","xhr","XMLHttpRequest","error","Error","request","fail","status","addEventListener","response","JSON","parse","parseJSON","then","json","success","errors","catch","open","send","queue","http","remove","storage","Map","getKey","parsed","parseUrl","host","pathname","Storage","root","carts","stores","ttl","schema","Date","getTime","purge","supported","stored","localStorage","getItem","merge","set","setItem","stringify","removeItem","filter","now","currency","getCarts","s","existing","indexOf","dedupe","Client","getStore","cached","setStore","getStoreId","p","discount","setCart","currentCart","isCurrency","isObjectId","getCartId","activeId","getActiveCart","validate","join","entries","setCarts","values","setActiveCart","currencies","quantity","document","log","details","createElement","summary","innerHTML","appendChild","contents","pre","classList","add","output","prettyPrint","currency_code","updatedCart","getElementById","getProduct"],"mappings":"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","file":"scripts.js","sourcesContent":["import Client from '../../src/client';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const output = document.getElementById('output');\n\n    function log(label, data) {\n        const details = document.createElement('details');\n        const summary = document.createElement('summary');\n        summary.innerHTML = label;\n        details.appendChild(summary);\n\n        const contents = document.createElement('div');\n        const pre = document.createElement('pre');\n        pre.classList.add('prettyprint');\n        pre.innerHTML = JSON.stringify(data, null, 4);\n        contents.appendChild(pre);\n        details.appendChild(contents);\n\n        output.appendChild(details);\n\n        window.prettyPrint();\n    }\n\n    function fail(label, errors) {\n        if (errors instanceof Error) {\n            // console.error(errors);\n            return log(`${label} (error)`, { error: errors.toString() });\n        }\n\n        return log(`${label} (failed)`, errors);\n    }\n\n    const client = new Client({\n        store: 'local.sampotts.me',\n        env: 'local-selz.com',\n    });\n\n    // Expose\n    window.client = client;\n\n    log('Client', client);\n\n    function getCart(currency) {\n        return new Promise((resolve, reject) => {\n            if (window.cart) {\n                resolve(window.cart);\n                return;\n            }\n\n            client\n                .getCart(currency)\n                .then(cart => {\n                    log('Get cart', cart);\n\n                    window.cart = cart;\n\n                    resolve(cart);\n                })\n                .catch(error => reject(error));\n        });\n    }\n\n    function addToCart(product) {\n        getCart(product.currency_code)\n            .then(cart => {\n                let variant = null;\n\n                if (typeof product.variant === 'string' && product.variant.length) {\n                    ({ variant } = product);\n                } else if (product.variants && product.variants.length) {\n                    variant = product.variants[0].id;\n                }\n\n                cart.add({\n                    id: product.id,\n                    quantity: 2,\n                    variant_id: variant,\n                })\n                    .then(updatedCart => {\n                        log('Add to cart', updatedCart);\n\n                        window.cart = updatedCart;\n                    })\n                    .catch(error => fail('Add to cart', error));\n            })\n            .catch(error => fail('Get cart', error));\n    }\n\n    const products = {\n        GBP: 'http://selz.co/1MaSYRU',\n        USD: 'http://selz.co/1rvbhT6',\n    };\n\n    client\n        .getProduct(products.GBP)\n        .then(product => {\n            log('Product', product);\n\n            // Expose\n            window.product = product;\n\n            addToCart(product);\n        })\n        .catch(errors => fail('Product', errors));\n\n    // Listen for messages from parent\n    /* window.addEventListener('message', event => {\n        // console.warn(event.data);\n        const json = JSON.parse(event.data);\n\n        if (json.key !== 'add-to-cart') {\n            return;\n        }\n\n        addToCart(json.data);\n    }); */\n});\n","// ==========================================================================\n// Type checking\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\nconst isArray = input => Array.isArray(input);\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObjectId = input => isString(input) && /^[a-f\\d]{24}$/i.test(input);\nconst isCurrencyCode = input => isString(input) && /^[A-z]{3}$/.test(input);\n\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nconst isUrl = (input, strict = false) => {\n    // Accept a URL object\n    if (instanceOf(input, window.URL)) {\n        return true;\n    }\n\n    // Add the protocol if required\n    let string = input;\n    if (!strict && !/^https?:\\/\\/*/.test(input)) {\n        string = `http://${input}`;\n    }\n\n    try {\n        return !isEmpty(new URL(string).hostname);\n    } catch (e) {\n        return false;\n    }\n};\n\nconst is = {\n    array: isArray,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    nullOrUndefined: isNullOrUndefined,\n    objectId: isObjectId,\n    currencyCode: isCurrencyCode,\n    url: isUrl,\n    empty: isEmpty,\n};\n\nexport default is;\n","import is from './utils/is';\n\nconst getBase = env => `https://${is.empty(env) ? 'sdk.selz.com' : `${env}/sdk`}/`;\n\nconst config = {\n    urls: {\n        /**\n         * Get URL for product data by URL\n         * @param {String} env - Environment (for internal use)\n         * @param {String} url - Short or full URL for a product\n         */\n        product(env, url = '') {\n            return `${getBase(env)}products/find?url=${url}`;\n        },\n\n        /**\n         * Get URL for all products by store ID\n         * @param {String} env - Environment (for internal use)\n         * @param {Number|String} id - The store ID\n         * @param {String} keyword - Search keyword\n         * @param {ObjectId|String} category - Category ID or relative path\n         * @param {Number} page - Page to fetch\n         */\n        products(env, id, keyword = '', category = '', page = 1) {\n            return `${getBase(env)}products/all/${id}?q=${keyword}&c=${category}&p=${page}`;\n        },\n\n        /**\n         * Get all categories for a given store ID\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - The store ID\n         */\n        categories(env, id) {\n            return `${getBase(env)}categories/${id}`;\n        },\n\n        /**\n         * Get URL for finding a store by URL or ID\n         * @param {String} env - Environment (for internal use)\n         * @param {Number|String} input - The ID or URL to lookup\n         */\n        store(env, input = null) {\n            if (is.number(input)) {\n                return `${getBase(env)}store/find/${input}`;\n            }\n\n            return `${getBase(env)}store/find?url=${input}`;\n        },\n\n        /**\n         * Create a new cart\n         * @param {String} env - Environment (for internal use)\n         * @param {Number} id - Store ID\n         */\n        createCart(env, id = '') {\n            return `${getBase(env)}cart/create/${id}`;\n        },\n\n        /**\n         * Get cart from ID\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        getCart(env, id = '') {\n            return `${getBase(env)}cart/${id}`;\n        },\n\n        /**\n         * Check carts still exist server side\n         * @param {String} env - Environment (for internal use)\n         * @param {Number} id - Cart IDs\n         */\n        checkCarts(env, ids = '') {\n            return `${getBase(env)}cart/verify?ids=${ids}`;\n        },\n\n        /**\n         * Add product to cart\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        addToCart(env, id = '') {\n            return `${getBase(env)}cart/add/${id}`;\n        },\n\n        /**\n         * Update a cart item quantity\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        updateCartItemQuantity(env, id = '') {\n            return `${getBase(env)}cart/updateitemquantity/${id}`;\n        },\n\n        /**\n         * Remove product from cart\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        removeFromCart(env, id = '') {\n            return `${getBase(env)}cart/remove/${id}`;\n        },\n    },\n};\n\nexport default config;\n","import is from '../utils/is';\n\nlet client = null;\n\nclass ProductUrls {\n    constructor(urls) {\n        // Take all properties by default\n        Object.assign(this, urls);\n    }\n}\n\nclass ProductImage {\n    constructor(image) {\n        // Take all properties by default\n        Object.assign(this, image);\n    }\n}\n\nclass ProductMedia {\n    constructor(media) {\n        // Take all properties by default\n        Object.assign(this, media);\n\n        // Map cover image\n        this.cover = new ProductImage(media.cover);\n    }\n}\n\nclass ProductFile {\n    constructor(file) {\n        // Take all properties by default\n        Object.assign(this, file);\n    }\n}\n\nclass ProductVariant {\n    constructor(variant, selected = '') {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        this.selected = variant.id === selected;\n    }\n}\n\nclass ProductVariantAttributeOption {\n    constructor(id, label) {\n        this.id = id;\n        this.label = label;\n    }\n}\n\nclass ProductVariantAttribute {\n    constructor(variant) {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        // Map options\n        this.options = Object.keys(variant.options).map(\n            id => new ProductVariantAttributeOption(id, variant.options[id]),\n        );\n    }\n}\n\nclass Product {\n    constructor(instance, product, variantId = '') {\n        if (!is.object(product)) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, product);\n\n        // Map store\n        this.store = client.store;\n\n        // Product URLs\n        if (is.object(product.urls)) {\n            this.urls = new ProductUrls(product.urls);\n        }\n\n        // Media (Video, YouTube, Vimeo, Audio)\n        if (is.object(product.media)) {\n            this.media = new ProductMedia(product.media);\n        }\n\n        // Images\n        if (is.array(product.images)) {\n            this.images = product.images.map(image => new ProductImage(image));\n        }\n\n        // Files for digital products\n        if (is.array(product.files)) {\n            this.files = product.files.map(file => new ProductFile(file));\n        }\n\n        // Variants\n        if (product.has_variants) {\n            const selected = !is.empty(variantId) ? variantId : product.variants[0].id;\n            this.variants = product.variants.map(variant => new ProductVariant(variant, selected));\n        }\n        if (product.has_variant_attributes) {\n            this.variant_attributes = product.variant_attributes.map(\n                attribute => new ProductVariantAttribute(attribute),\n            );\n        }\n    }\n\n    // eslint-disable-next-line camelcase\n    get selected_variant() {\n        if (is.empty(this.variants)) {\n            return null;\n        }\n\n        return this.variants.find(variant => variant.selected);\n    }\n}\n\nexport default Product;\n","import Product from './Product';\n\nlet client = null;\n\nexport class CartItem {\n    constructor(item, cartId) {\n        this.cartId = cartId;\n\n        // Take all properties by default\n        Object.assign(this, item);\n\n        // Map product\n        this.product = new Product(client, item.product, item.variant_id);\n    }\n}\n\nexport class Cart {\n    constructor(instance, cart, active = false) {\n        if (cart === null) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, cart);\n\n        // Map store\n        this.store = client.store;\n\n        // Set active state\n        this.active = active;\n\n        // Map items\n        this.items = Array.from(cart.items).map(item => new CartItem(item, cart.id));\n    }\n\n    /**\n     * Add a product to this cart\n     * @param {object} product - The product details\n     */\n    add(product) {\n        return client.addToCart(this.id, product);\n    }\n\n    /**\n     * Remove a product from this cart\n     * @param {string} index\n     */\n    remove(index) {\n        return client.removeFromCart(this.id, index);\n    }\n}\n\nexport default Cart;\n","import is from '../utils/is';\n\nclass Category {\n    constructor(category = null) {\n        if (!is.object(category)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, category);\n    }\n}\n\nexport default Category;\n","import is from '../utils/is';\n\nclass Store {\n    constructor(store = null) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, store);\n    }\n}\n\nexport default Store;\n","// ==========================================================================\n// String utils\n// ==========================================================================\n\n// Replace all occurances of a string in a string\nexport function replaceAll(input = '', find = '', replace = '') {\n    return input.replace(\n        new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'),\n        replace.toString(),\n    );\n}\n\n// Convert to title case\nexport function toTitleCase(input = '') {\n    return input.toString().replace(/\\w\\S*/g, text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase());\n}\n\n// Convert string to pascalCase\nexport function toPascalCase(input = '') {\n    let string = input.toString();\n\n    // Convert kebab case\n    string = replaceAll(string, '-', ' ');\n\n    // Convert snake case\n    string = replaceAll(string, '_', ' ');\n\n    // Convert to title case\n    string = toTitleCase(string);\n\n    // Convert to pascal case\n    return replaceAll(string, ' ', '');\n}\n\n// Convert string to pascalCase\nexport function toCamelCase(input = '') {\n    let string = input.toString();\n\n    // Convert to pascal case\n    string = toPascalCase(string);\n\n    // Convert first character to lowercase\n    return string.charAt(0).toLowerCase() + string.slice(1);\n}\n","// ==========================================================================\n// Form Data utils\n// ==========================================================================\n\nimport is from './is';\nimport { toPascalCase } from './strings';\n\n/**\n * Convert an Object to FormData\n * @param {Object} source - source Object\n * @param {FormData} form - existing FormData object\n * @param {String} namespace - namespace for FormData\n */\nconst buildFormData = (source = {}, form, namespace) => {\n    const data = form || new FormData();\n    let formKey;\n\n    // Source must be an object\n    if (!is.object(source)) {\n        return data;\n    }\n\n    // Loop through the object to convert\n    Object.keys(source).forEach(key => {\n        if (namespace) {\n            formKey = `${namespace}[${key}]`;\n        } else {\n            formKey = key;\n        }\n\n        // If the property is an object, but not a File, use recursivity\n        if (typeof source[key] === 'object' && !(source[key] instanceof File)) {\n            buildFormData(source[key], data, key);\n        } else {\n            data.append(toPascalCase(formKey), source[key]);\n        }\n    });\n\n    return data;\n};\n\nexport default buildFormData;\n","// ==========================================================================\n// Extend objects\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Deep extend destination object with N more objects\n * @param {Object} target\n * @param {...Object} sources\n */\nexport function extend(target = {}, ...sources) {\n    if (!sources.length) {\n        return target;\n    }\n\n    const source = sources.shift();\n\n    if (!is.object(source)) {\n        return target;\n    }\n\n    Object.keys(source).forEach(key => {\n        if (is.object(source[key])) {\n            if (!Object.keys(target).includes(key)) {\n                Object.assign(target, { [key]: {} });\n            }\n\n            extend(target[key], source[key]);\n        } else {\n            Object.assign(target, { [key]: source[key] });\n        }\n    });\n\n    return extend(target, ...sources);\n}\n\n/**\n * Safer JSON parsing\n * @param {Object} data\n */\nexport function parseJSON(data = {}) {\n    return new Promise((resolve, reject) => {\n        try {\n            resolve(JSON.parse(data));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// Fetch\n// ==========================================================================\n\nimport buildFormData from './form-data';\nimport { extend, parseJSON } from './objects';\n\nconst defaults = {\n    type: 'GET',\n    body: {},\n    responseType: 'json',\n};\n\n/**\n * Custom immitation fetch using XHR\n * @param {string} url - The URL of the endpoint\n * @param {object} options - Object of options for the request\n */\nexport default function(url, options = {}) {\n    const { type, body, responseType } = extend({}, defaults, options);\n\n    return new Promise((resolve, reject) => {\n        try {\n            const xhr = new XMLHttpRequest();\n\n            // Check for CORS support\n            if (!('withCredentials' in xhr)) {\n                const error = new Error('No CORS support');\n                error.request = xhr;\n                throw error;\n            }\n\n            // Handle failures\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status\n            const fail = () => {\n                const error = new Error(xhr.status);\n                error.request = xhr;\n                reject(error);\n            };\n\n            // Successfully made the request\n            xhr.addEventListener('load', () => {\n                const { response } = xhr;\n\n                // Something went wrong either with the request or server\n                if (xhr.status >= 400) {\n                    fail();\n                    return;\n                }\n\n                // Parse JSON responses\n                if (responseType === 'json') {\n                    parseJSON(response)\n                        .then(json => {\n                            if (json.success) {\n                                resolve(json.data);\n                            } else {\n                                const error = new Error('Request failed');\n                                error.errors = json.errors;\n                                reject(error);\n                            }\n                        })\n                        .catch(reject);\n                } else {\n                    resolve(response);\n                }\n            });\n\n            // Request failed\n            xhr.addEventListener('error', fail);\n\n            // Start the request\n            xhr.open(type, url, true);\n\n            // Set the required response type\n            // 'json' responseType is much slower, so we parse later\n            // https://github.com/arendjr/fetch-vs-xhr-perf\n            if (responseType !== 'json') {\n                xhr.responseType = responseType;\n            }\n\n            // Send data if passed\n            xhr.send(buildFormData(body));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// Common fetch actions\n// ==========================================================================\n\nimport fetch from './fetch';\n\nconst queue = {};\n\nconst http = {\n    /**\n     * GET remote URL and parse as JSON\n     * @param {string} url - The endpoint URL\n     */\n    get(url) {\n        // Queue requests to prevent hammering\n        if (!Object.keys(queue).includes(url)) {\n            queue[url] = fetch(url);\n\n            const remove = () => {\n                delete queue[url];\n            };\n\n            // Remove from queue on completed\n            queue[url].then(remove).catch(remove);\n        }\n\n        return queue[url];\n    },\n\n    /**\n     * POST to remote URL and parse as JSON\n     * @param {string} url - The endpoint URL\n     * @param {object} data - The POST data payload\n     */\n    post(url, data = {}) {\n        const options = {\n            type: 'POST',\n            body: data,\n        };\n\n        return fetch(url, options);\n    },\n};\n\nexport default http;\n","// ==========================================================================\n// Local storage wrapper\n// TODO: methods should return promises?\n// ==========================================================================\n\nimport Store from '../models/Store';\nimport { dedupe } from './arrays';\nimport is from './is';\nimport { extend } from './objects';\nimport parseUrl from './parseUrl';\n\nconst storage = new Map();\n\nconst getKey = url => {\n    if (url === null) {\n        return null;\n    }\n\n    const parsed = parseUrl(url);\n\n    if (parsed === null) {\n        return null;\n    }\n\n    return `${parsed.host}${parsed.pathname}`.replace(/\\/$/, '');\n};\n\nclass Storage {\n    constructor(config) {\n        this.config = Object.assign(\n            {\n                keys: {\n                    root: 'selz-js-sdk',\n                    carts: 'carts',\n                    stores: 'stores',\n                },\n                ttl: 3600, // 1 hour\n                schema: new Date('2018-07-02').getTime(), // Schema version (allowing us to change data schema and invalidate storage)\n            },\n            config,\n        );\n\n        this.purge();\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        if (!window.localStorage) {\n            return false;\n        }\n\n        const key = '___test';\n\n        // Try to use it\n        try {\n            window.localStorage.setItem(key, key);\n            window.localStorage.removeItem(key);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        let data = storage.get(this.config.keys.root);\n\n        // Grab from real storage if we can or use faux-storage\n        if (Storage.supported) {\n            const stored = window.localStorage.getItem(this.config.keys.root);\n\n            if (!is.empty(stored)) {\n                data = JSON.parse(stored);\n            }\n        }\n\n        if (is.empty(data)) {\n            return null;\n        }\n\n        if (!is.empty(key)) {\n            return Object.keys(data).includes(key) ? data[key] : null;\n        }\n\n        return data;\n    }\n\n    set(key, value, merge = false) {\n        // Get current storage\n        const data = this.get() || {};\n\n        // Extend with the new data\n        if (merge && Object.keys(data).includes(key)) {\n            data[key] = extend(data[key], value);\n        } else {\n            data[key] = value;\n        }\n\n        // Set in faux-storage\n        storage.set(this.config.keys.root, data);\n\n        // Bail if no real support\n        if (!Storage.supported) {\n            return;\n        }\n\n        // Set schema version\n        data.schema = this.config.schema;\n\n        // Update storage\n        try {\n            window.localStorage.setItem(this.config.keys.root, JSON.stringify(data));\n        } catch (e) {\n            // Do nothing\n        }\n    }\n\n    // Clean up stale storage\n    purge() {\n        // Check schema\n        const data = this.get();\n\n        // Nothing to purge\n        if (is.empty(data)) {\n            return;\n        }\n\n        // If schema does not match, kill it\n        if (Number(data.schema) !== this.config.schema) {\n            window.localStorage.removeItem(this.config.keys.root);\n            return;\n        }\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n\n        // Nothing to cleanup\n        if (is.empty(stores)) {\n            return;\n        }\n\n        // Check TTL is valid\n        this.set(\n            this.config.keys.stores,\n            stores.filter(store => {\n                const ttl = Number(store.ttl);\n                return ttl > 0 && ttl > Date.now();\n            }),\n        );\n    }\n\n    getCarts(store) {\n        const data = this.get(this.config.keys.carts) || {};\n\n        // If no carts\n        if (is.empty(data)) {\n            return null;\n        }\n\n        // Get all carts\n        if (!is.number(store)) {\n            return data;\n        }\n\n        // Store not found\n        if (!Object.keys(data).includes(store.toString())) {\n            return null;\n        }\n\n        // Get all for a store\n        return data[store.toString()];\n    }\n\n    getCart(store, currency) {\n        const carts = this.getCarts(store);\n\n        // No carts\n        if (is.empty(carts)) {\n            return null;\n        }\n\n        // Get all for a store\n        if (!is.string(currency)) {\n            return carts;\n        }\n\n        // Currency not found\n        if (!Object.keys(carts).includes(currency.toUpperCase())) {\n            return null;\n        }\n\n        return carts[currency.toUpperCase()];\n    }\n\n    setCart(store, currency, cart) {\n        this.set(\n            this.config.keys.carts,\n            {\n                [store]: {\n                    [currency.toUpperCase()]: {\n                        id: cart.id,\n                        active: cart.active,\n                    },\n                },\n            },\n            true,\n        );\n    }\n\n    setCarts(store, carts = {}) {\n        this.set(this.config.keys.carts, {\n            [store]: carts,\n        });\n    }\n\n    getStore(input) {\n        let store = null;\n\n        if (!is.number(input) && !is.url(input)) {\n            return null;\n        }\n\n        const stores = this.get(this.config.keys.stores) || [];\n\n        if (is.number(input)) {\n            store = stores.find(s => is.object(s.data) && s.data.id === input);\n        } else if (is.url(input)) {\n            const key = getKey(input);\n\n            // Bail if invalid URL\n            if (key === null) {\n                return null;\n            }\n\n            store = stores.find(s => is.array(s.urls) && s.urls.includes(key));\n        }\n\n        if (!is.object(store)) {\n            return null;\n        }\n\n        // Check TTL is valid\n        const ttl = Number(store.ttl);\n\n        if (ttl > 0 && ttl < Date.now()) {\n            this.purge();\n            return null;\n        }\n\n        return new Store(store.data);\n    }\n\n    setStore(data, url = null) {\n        // Strip the protocol from the lookup url\n        const key = getKey(url);\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n        let existing = null;\n\n        if (!is.empty(stores)) {\n            // Find existing store by id\n            existing = stores.find(s => s.data.id === data.id);\n        }\n\n        // Extend TTL each\n        const ttl = Date.now() + this.config.ttl;\n\n        // If we found something\n        if (is.object(existing)) {\n            // Update data and extend TTL\n            Object.assign(existing, {\n                data,\n                ttl,\n            });\n\n            if (key !== null) {\n                // Add the URL key for later lookup\n                if (!is.array(existing.urls)) {\n                    existing.urls = [key];\n                } else {\n                    existing.urls.push(key);\n                }\n\n                // Remove duplicate entries\n                const urls = dedupe(existing.urls);\n\n                // Add to existing record\n                Object.assign(existing, {\n                    urls,\n                });\n            }\n        } else {\n            const store = {\n                data,\n                ttl,\n            };\n\n            if (key !== null) {\n                Object.assign(store, {\n                    urls: [key],\n                });\n            }\n\n            stores.push(store);\n        }\n\n        this.set(this.config.keys.stores, stores);\n    }\n}\n\nexport default Storage;\n","/**\n * Parse a string to URL object\n * @param {String} url\n */\nexport default function parseUrl(url) {\n    let string = url;\n\n    // Add the protocol if required\n    if (!/^https?:\\/\\/*/.test(url)) {\n        string = `http://${url}`;\n    }\n\n    try {\n        return new URL(string);\n    } catch (e) {\n        return null;\n    }\n}\n","// ==========================================================================\n// Array utils\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Remove duplicates in an array\n * @param {array} array\n */\nexport function dedupe(array) {\n    if (!is.array(array)) {\n        return array;\n    }\n\n    return array.filter((item, index) => array.indexOf(item) === index);\n}\n\n// Rounding methods for .closest()\nconst closestRounding = {\n    none: 0,\n    ceil: 1,\n    floor: 2,\n};\nexport { closestRounding };\n\n/**\n * Get the closest value in an array\n * @param {array} array\n * @param {number} value\n * @param {number} rounding\n */\nexport function closest(array, value, rounding = closestRounding.none) {\n    if (!is.array(array) || !array.length) {\n        return null;\n    }\n\n    return array.reduce((prev, curr) => {\n        if (Math.abs(curr - value) <= Math.abs(prev - value)) {\n            switch (rounding) {\n                case closestRounding.ceil:\n                    return curr >= value ? curr : prev;\n\n                case closestRounding.floor:\n                    return curr <= value ? curr : prev;\n\n                default:\n                    return curr;\n            }\n        }\n\n        return prev;\n    });\n}\n","import config from './config';\nimport { Cart, CartItem } from './models/Cart';\nimport Category from './models/Category';\nimport Product from './models/Product';\nimport Store from './models/Store';\nimport http from './utils/http';\nimport is from './utils/is';\nimport Storage from './utils/storage';\n\nclass Client {\n    constructor(props) {\n        const { env, store } = props;\n\n        this.env = !is.empty(env) ? env : '';\n        this.store = store;\n\n        if (!is.url(store) && !is.number(store)) {\n            throw Error('A store ID or URL is required to create a client');\n        }\n\n        this.storage = new Storage();\n    }\n\n    /**\n     * Get the store ID only\n     */\n    getStoreId() {\n        return new Promise((resolve, reject) => {\n            if (is.number(this.store)) {\n                resolve(this.store);\n                return;\n            }\n\n            if (this.store instanceof Store) {\n                resolve(this.store.id);\n                return;\n            }\n\n            // URL is required\n            if (!is.url(this.store)) {\n                reject(new Error('Url is required for user lookup'));\n            }\n\n            // Get by URL\n            this.getStore()\n                .then(store => {\n                    resolve(store.id);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the Store for current instance\n     */\n    getStore() {\n        return new Promise((resolve, reject) => {\n            // Try from cache by ID or URL\n            if (is.number(this.store) || is.url(this.store)) {\n                const cached = this.storage.getStore(this.store);\n\n                // Return cached if we have it\n                if (cached !== null && cached instanceof Store) {\n                    resolve(cached);\n                    return;\n                }\n            }\n\n            // If already fetched\n            if (this.store instanceof Store) {\n                resolve(this.store);\n                return;\n            }\n\n            // Fetch from remote by ID or URL\n            const url = config.urls.store(this.env, this.store);\n\n            http.get(url)\n                .then(store => {\n                    this.setStore(store);\n                    resolve(this.store);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the store details\n     * @param {object} store\n     */\n    setStore(store) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Store reference to lookup URL\n        const url = is.url(this.store) ? this.store : null;\n\n        // Map to Store\n        this.store = new Store(store);\n\n        // Add to storage for cache\n        this.storage.setStore(this.store, url);\n    }\n\n    /**\n     * Get product data\n     * @param {String} url - Short or full URL for a product\n     */\n    getProduct(url) {\n        return new Promise((resolve, reject) => {\n            http.get(config.urls.product(this.env, url))\n                .then(json => {\n                    if (!(this.store instanceof Store)) {\n                        this.setStore(json.store);\n                    }\n\n                    resolve(new Product(this, json));\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all products\n     */\n    getProducts(keyword = '', category = '', page = 1) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    http.get(\n                        config.urls.products(\n                            this.env,\n                            id,\n                            !is.empty(keyword) ? keyword : '',\n                            is.string(category) ? category : '',\n                            !is.number(page) || page < 1 ? 1 : page,\n                        ),\n                    )\n                        .then(json => {\n                            resolve(\n                                Object.assign({}, json, {\n                                    products: json.products.map(p => new Product(this, p)),\n                                }),\n                            );\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all categories\n     */\n    getCategories() {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    http.get(config.urls.categories(this.env, id))\n                        .then(json => {\n                            resolve(\n                                Object.assign({}, json, {\n                                    categories: json.categories.map(c => new Category(c)),\n                                }),\n                            );\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Create a new shopping cart\n     * @param {String} currency - ISO currency code\n     * @param {String} discount - Discount code\n     */\n    createCart(currency, discount) {\n        return new Promise((resolve, reject) => {\n            if (is.empty(currency)) {\n                reject(new Error('currency is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n\n                    http.post(config.urls.createCart(this.env, id), {\n                        currency: currencyCode,\n                        discount: !is.empty(discount) ? discount : null,\n                    })\n                        .then(json => {\n                            const cart = new Cart(this, json);\n\n                            // Store reference to cart id for later\n                            this.storage.setCart(id, currencyCode, cart);\n\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart or create one if needed\n     * @param {String} currency - The shopping cart ISO currency code\n     */\n    getCartId(currency) {\n        return new Promise((resolve, reject) => {\n            if (!is.currencyCode(currency)) {\n                reject(new Error('A valid currency code is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n                    const currentCart = this.storage.getCart(id, currencyCode);\n\n                    // Create cart if it doesn't exist\n                    if (is.empty(currentCart)) {\n                        this.createCart(currencyCode)\n                            .then(cart => resolve(cart.id))\n                            .catch(reject);\n                    } else {\n                        resolve(currentCart.id);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart\n     * @param {String} input - The shopping cart ISO currency code or cart ID\n     */\n    getCart(input) {\n        return new Promise((resolve, reject) => {\n            const isCurrency = is.currencyCode(input);\n            const isObjectId = is.objectId(input);\n\n            if (!isCurrency && !isObjectId) {\n                reject(new Error('A valid currency code or cart id are required'));\n                return;\n            }\n\n            if (isCurrency) {\n                const currencyCode = input.toUpperCase();\n\n                this.getCartId(currencyCode)\n                    .then(id => {\n                        if (is.empty(id)) {\n                            reject(new Error(`Could not find matching cart for currency code '${currencyCode}'`));\n                            return;\n                        }\n\n                        this.getCart(id)\n                            .then(cart => {\n                                // Update store\n                                this.setStore(cart.store);\n\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    })\n                    .catch(reject);\n            } else {\n                http.get(config.urls.getCart(this.env, input))\n                    .then(json => {\n                        const activeId = this.getActiveCart();\n                        const cart = new Cart(this, json, json.id === activeId);\n\n                        // Update store\n                        this.setStore(cart.store);\n\n                        resolve(cart);\n                    })\n                    .catch(reject);\n            }\n        });\n    }\n\n    /**\n     * Get all current carts\n     */\n    getCarts(validate = true) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (is.empty(carts)) {\n                        resolve(null);\n                        return;\n                    }\n\n                    // Check the carts still exist in the server\n                    if (validate) {\n                        const ids = Object.keys(carts).map(currency => carts[currency].id);\n\n                        http.get(config.urls.checkCarts(this.env, ids.join(',')))\n                            .then(json => {\n                                // Remove non existant carts\n                                Object.entries(json).forEach(([cartId, exists]) => {\n                                    if (!exists) {\n                                        const currency = Object.keys(carts).find(c => carts[c].id === cartId);\n                                        delete carts[currency];\n                                    }\n                                });\n\n                                // Store again\n                                this.storage.setCarts(id, carts);\n\n                                // Set active\n                                if (!Object.values(carts).find(cart => cart.active)) {\n                                    this.setActiveCart()\n                                        .then(resolve)\n                                        .catch(reject);\n                                } else {\n                                    resolve(carts);\n                                }\n                            })\n                            .catch(reject);\n                    } else {\n                        resolve(carts);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the active cart based on currency\n     * @param {String} input - The shopping cart ISO currency code or cart ID\n     */\n    setActiveCart(input = null) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    this.getCarts(false).then(data => {\n                        const carts = data;\n\n                        // No carts\n                        if (is.empty(carts)) {\n                            resolve(null);\n                            return;\n                        }\n\n                        // Currency code was passed...\n                        if (is.currencyCode(input)) {\n                            const currencyCode = input.toUpperCase();\n                            const currencies = Object.keys(carts);\n\n                            // Bail if not included\n                            if (!currencies.includes(currencyCode)) {\n                                reject(new Error(`No carts for ${currencyCode}`));\n                                return;\n                            }\n\n                            // Set active\n                            currencies.forEach(currency => {\n                                carts[currency].active = currency === currencyCode;\n                            });\n                        } else {\n                            // Set to id if specified, otherwise first\n                            const cartId = is.objectId(input) ? input : carts[Object.keys(carts)[0]].id;\n\n                            // Set active\n                            Object.keys(carts).forEach(currency => {\n                                const cart = carts[currency];\n                                cart.active = cart.id === cartId;\n                            });\n                        }\n\n                        // Store again\n                        this.storage.setCarts(id, carts);\n\n                        resolve(carts);\n                    });\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the current active cart\n     */\n    getActiveCart(fetch = false) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (!Object.keys(carts).length) {\n                        resolve(null);\n                        return;\n                    }\n\n                    const active = Object.values(carts).find(cart => cart.active);\n\n                    if (!active) {\n                        resolve(null);\n                        return;\n                    }\n\n                    if (!fetch) {\n                        resolve(active.id);\n                        return;\n                    }\n\n                    this.getCart(active.id)\n                        .then(resolve)\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Add a product to a cart\n     * @param {String} id - The cart ID\n     * @param {Object} product - The product details\n     */\n    addToCart(id, product) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(product)) {\n                reject(new Error('A valid product is required'));\n                return;\n            }\n\n            http.post(config.urls.addToCart(this.env, id), product)\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Update an items quantity in the shopping cart\n     * @param {String} id - The shopping cart ID\n     * @param {String} index - The shopping cart item quid\n     * @param {Number} quantity - Desired quantity\n     */\n    updateCartItemQuantity(id, index, quantity = 1) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.updateCartItemQuantity(this.env, id), { index, quantity })\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Remove a product from a cart\n     * @param {String} id - The shopping cart id\n     * @param {String} index - The shopping cart item guid\n     */\n    removeFromCart(id, index) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.removeFromCart(this.env, id), { index })\n                .then(json => {\n                    // If there's actually a cart left, map it\n                    if (!is.empty(json)) {\n                        const cart = new Cart(this, json, true);\n\n                        // Set the active cart\n                        this.setActiveCart(cart.id)\n                            .then(() => {\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    } else {\n                        // Otherwise, update carts (as one removed)\n                        this.getCarts()\n                            .then(() => resolve(null))\n                            .catch(reject);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n}\n\nexport { Product, Category, Cart, CartItem, Store };\n\nexport default Client;\n"]}