{"version":3,"sources":["src/client.js","src/models/Product.js","src/models/Cart.js","src/models/Category.js","src/utils/is.js","src/config.js","src/models/Store.js","src/utils/strings.js","src/utils/form-data.js","src/utils/objects.js","src/utils/fetch.js","src/utils/http.js","src/utils/storage.js","src/utils/parseUrl.js","src/utils/arrays.js"],"names":["global","factory","exports","module","define","amd","SelzClient","this","_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","_defineProperty","value","_slicedToArray","arr","Array","isArray","_arrayWithHoles","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","_iterableToArrayLimit","_nonIterableRest","client","ProductUrls","a","urls","assign","ProductImage","image","ProductMedia","media","cover","ProductFile","file","ProductVariant","variant","selected","arguments","id","ProductVariantAttributeOption","label","ProductVariantAttribute","options","keys","map","Product","product","variantId","is","object","store","array","images","files","has_variants","empty","variants","has_variant_attributes","variant_attributes","attribute","get","find","CartItem","item","cartId","variant_id","Cart","cart","active","items","from","addToCart","index","removeFromCart","Category","category","getConstructor","input","isObject","isString","String","isNullOrUndefined","isEmpty","number","Number","isNaN","string","boolean","Boolean","function","Function","nullOrUndefined","objectId","test","currencyCode","url","strict","instanceOf","window","URL","concat","hostname","e","getBase","env","config","products","keyword","page","categories","createCart","getCart","checkCarts","ids","updateCartItemQuantity","Store","replaceAll","replace","RegExp","toString","buildFormData","formKey","source","form","namespace","data","FormData","forEach","File","append","text","charAt","toUpperCase","substr","toLowerCase","toTitleCase","toPascalCase","extend","b","sources","d","shift","includes","apply","defaults","type","body","responseType","fetch","c","Promise","resolve","reject","xhr","XMLHttpRequest","error","Error","request","fail","status","addEventListener","response","JSON","parse","parseJSON","then","json","success","errors","catch","open","send","queue","http","remove","storage","Map","getKey","parsed","parseUrl","host","pathname","Storage","root","carts","stores","ttl","schema","Date","getTime","purge","supported","stored","localStorage","getItem","merge","set","setItem","stringify","removeItem","filter","now","currency","getCarts","s","existing","indexOf","dedupe","Client","getStore","cached","setStore","getStoreId","p","discount","setCart","currentCart","isCurrency","isObjectId","getCartId","activeId","getActiveCart","validate","join","entries","setCarts","values","setActiveCart","currencies","quantity","default"],"mappings":"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","file":"client.js","sourcesContent":["import config from './config';\nimport { Cart, CartItem } from './models/Cart';\nimport Category from './models/Category';\nimport Product from './models/Product';\nimport Store from './models/Store';\nimport http from './utils/http';\nimport is from './utils/is';\nimport Storage from './utils/storage';\n\nclass Client {\n    constructor(props) {\n        const { env, store } = props;\n\n        this.env = !is.empty(env) ? env : '';\n        this.store = store;\n\n        if (!is.url(store) && !is.number(store)) {\n            throw Error('A store ID or URL is required to create a client');\n        }\n\n        this.storage = new Storage();\n    }\n\n    /**\n     * Get the store ID only\n     */\n    getStoreId() {\n        return new Promise((resolve, reject) => {\n            if (is.number(this.store)) {\n                resolve(this.store);\n                return;\n            }\n\n            if (this.store instanceof Store) {\n                resolve(this.store.id);\n                return;\n            }\n\n            // URL is required\n            if (!is.url(this.store)) {\n                reject(new Error('Url is required for user lookup'));\n            }\n\n            // Get by URL\n            this.getStore()\n                .then(store => {\n                    resolve(store.id);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the Store for current instance\n     */\n    getStore() {\n        return new Promise((resolve, reject) => {\n            // Try from cache by ID or URL\n            if (is.number(this.store) || is.url(this.store)) {\n                const cached = this.storage.getStore(this.store);\n\n                // Return cached if we have it\n                if (cached !== null && cached instanceof Store) {\n                    resolve(cached);\n                    return;\n                }\n            }\n\n            // If already fetched\n            if (this.store instanceof Store) {\n                resolve(this.store);\n                return;\n            }\n\n            // Fetch from remote by ID or URL\n            const url = config.urls.store(this.env, this.store);\n\n            http.get(url)\n                .then(store => {\n                    this.setStore(store);\n                    resolve(this.store);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the store details\n     * @param {object} store\n     */\n    setStore(store) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Store reference to lookup URL\n        const url = is.url(this.store) ? this.store : null;\n\n        // Map to Store\n        this.store = new Store(store);\n\n        // Add to storage for cache\n        this.storage.setStore(this.store, url);\n    }\n\n    /**\n     * Get product data\n     * @param {String} url - Short or full URL for a product\n     */\n    getProduct(url) {\n        return new Promise((resolve, reject) => {\n            http.get(config.urls.product(this.env, url))\n                .then(json => {\n                    if (!(this.store instanceof Store)) {\n                        this.setStore(json.store);\n                    }\n\n                    resolve(new Product(this, json));\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all products\n     */\n    getProducts(keyword = '', category = '', page = 1) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    http.get(\n                        config.urls.products(\n                            this.env,\n                            id,\n                            !is.empty(keyword) ? keyword : '',\n                            is.objectId(category) ? category : '',\n                            !is.number(page) || page < 1 ? 1 : page,\n                        ),\n                    )\n                        .then(json => {\n                            resolve(\n                                Object.assign({}, json, {\n                                    products: json.products.map(p => new Product(this, p)),\n                                }),\n                            );\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all categories\n     */\n    getCategories() {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    http.get(config.urls.categories(this.env, id))\n                        .then(json => {\n                            resolve(\n                                Object.assign({}, json, {\n                                    categories: json.categories.map(c => new Category(c)),\n                                }),\n                            );\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Create a new shopping cart\n     * @param {String} currency - ISO currency code\n     * @param {String} discount - Discount code\n     */\n    createCart(currency, discount) {\n        return new Promise((resolve, reject) => {\n            if (is.empty(currency)) {\n                reject(new Error('currency is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n\n                    http.post(config.urls.createCart(this.env, id), {\n                        currency: currencyCode,\n                        discount: !is.empty(discount) ? discount : null,\n                    })\n                        .then(json => {\n                            const cart = new Cart(this, json);\n\n                            // Store reference to cart id for later\n                            this.storage.setCart(id, currencyCode, cart);\n\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart or create one if needed\n     * @param {String} currency - The shopping cart ISO currency code\n     */\n    getCartId(currency) {\n        return new Promise((resolve, reject) => {\n            if (!is.currencyCode(currency)) {\n                reject(new Error('A valid currency code is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n                    const currentCart = this.storage.getCart(id, currencyCode);\n\n                    // Create cart if it doesn't exist\n                    if (is.empty(currentCart)) {\n                        this.createCart(currencyCode)\n                            .then(cart => resolve(cart.id))\n                            .catch(reject);\n                    } else {\n                        resolve(currentCart.id);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart\n     * @param {String} input - The shopping cart ISO currency code or cart ID\n     */\n    getCart(input) {\n        return new Promise((resolve, reject) => {\n            const isCurrency = is.currencyCode(input);\n            const isObjectId = is.objectId(input);\n\n            if (!isCurrency && !isObjectId) {\n                reject(new Error('A valid currency code or cart id are required'));\n                return;\n            }\n\n            if (isCurrency) {\n                const currencyCode = input.toUpperCase();\n\n                this.getCartId(currencyCode)\n                    .then(id => {\n                        if (is.empty(id)) {\n                            reject(new Error(`Could not find matching cart for currency code '${currencyCode}'`));\n                            return;\n                        }\n\n                        this.getCart(id)\n                            .then(cart => {\n                                // Update store\n                                this.setStore(cart.store);\n\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    })\n                    .catch(reject);\n            } else {\n                http.get(config.urls.getCart(this.env, input))\n                    .then(json => {\n                        const activeId = this.getActiveCart();\n                        const cart = new Cart(this, json, json.id === activeId);\n\n                        // Update store\n                        this.setStore(cart.store);\n\n                        resolve(cart);\n                    })\n                    .catch(reject);\n            }\n        });\n    }\n\n    /**\n     * Get all current carts\n     */\n    getCarts(validate = true) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (is.empty(carts)) {\n                        resolve(null);\n                        return;\n                    }\n\n                    // Check the carts still exist in the server\n                    if (validate) {\n                        const ids = Object.keys(carts).map(currency => carts[currency].id);\n\n                        http.get(config.urls.checkCarts(this.env, ids.join(',')))\n                            .then(json => {\n                                // Remove non existant carts\n                                Object.entries(json).forEach(([cartId, exists]) => {\n                                    if (!exists) {\n                                        const currency = Object.keys(carts).find(c => carts[c].id === cartId);\n                                        delete carts[currency];\n                                    }\n                                });\n\n                                // Store again\n                                this.storage.setCarts(id, carts);\n\n                                // Set active\n                                if (!Object.values(carts).find(cart => cart.active)) {\n                                    this.setActiveCart()\n                                        .then(resolve)\n                                        .catch(reject);\n                                } else {\n                                    resolve(carts);\n                                }\n                            })\n                            .catch(reject);\n                    } else {\n                        resolve(carts);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the active cart based on currency\n     * @param {String} input - The shopping cart ISO currency code or cart ID\n     */\n    setActiveCart(input = null) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    this.getCarts(false).then(data => {\n                        const carts = data;\n\n                        // No carts\n                        if (is.empty(carts)) {\n                            resolve(null);\n                            return;\n                        }\n\n                        // Currency code was passed...\n                        if (is.currencyCode(input)) {\n                            const currencyCode = input.toUpperCase();\n                            const currencies = Object.keys(carts);\n\n                            // Bail if not included\n                            if (!currencies.includes(currencyCode)) {\n                                reject(new Error(`No carts for ${currencyCode}`));\n                                return;\n                            }\n\n                            // Set active\n                            currencies.forEach(currency => {\n                                carts[currency].active = currency === currencyCode;\n                            });\n                        } else {\n                            // Set to id if specified, otherwise first\n                            const cartId = is.objectId(input) ? input : carts[Object.keys(carts)[0]].id;\n\n                            // Set active\n                            Object.keys(carts).forEach(currency => {\n                                const cart = carts[currency];\n                                cart.active = cart.id === cartId;\n                            });\n                        }\n\n                        // Store again\n                        this.storage.setCarts(id, carts);\n\n                        resolve(carts);\n                    });\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the current active cart\n     */\n    getActiveCart(fetch = false) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (!Object.keys(carts).length) {\n                        resolve(null);\n                        return;\n                    }\n\n                    const active = Object.values(carts).find(cart => cart.active);\n\n                    if (!active) {\n                        resolve(null);\n                        return;\n                    }\n\n                    if (!fetch) {\n                        resolve(active.id);\n                        return;\n                    }\n\n                    this.getCart(active.id)\n                        .then(resolve)\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Add a product to a cart\n     * @param {String} id - The cart ID\n     * @param {Object} product - The product details\n     */\n    addToCart(id, product) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(product)) {\n                reject(new Error('A valid product is required'));\n                return;\n            }\n\n            http.post(config.urls.addToCart(this.env, id), product)\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Update an items quantity in the shopping cart\n     * @param {String} id - The shopping cart ID\n     * @param {String} index - The shopping cart item quid\n     * @param {Number} quantity - Desired quantity\n     */\n    updateCartItemQuantity(id, index, quantity = 1) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.updateCartItemQuantity(this.env, id), { index, quantity })\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Remove a product from a cart\n     * @param {String} id - The shopping cart id\n     * @param {String} index - The shopping cart item guid\n     */\n    removeFromCart(id, index) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.removeFromCart(this.env, id), { index })\n                .then(json => {\n                    // If there's actually a cart left, map it\n                    if (!is.empty(json)) {\n                        const cart = new Cart(this, json, true);\n\n                        // Set the active cart\n                        this.setActiveCart(cart.id)\n                            .then(() => {\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    } else {\n                        // Otherwise, update carts (as one removed)\n                        this.getCarts()\n                            .then(() => resolve(null))\n                            .catch(reject);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n}\n\nexport { Product, Category, Cart, CartItem, Store };\n\nexport default Client;\n","import is from '../utils/is';\n\nlet client = null;\n\nclass ProductUrls {\n    constructor(urls) {\n        // Take all properties by default\n        Object.assign(this, urls);\n    }\n}\n\nclass ProductImage {\n    constructor(image) {\n        // Take all properties by default\n        Object.assign(this, image);\n    }\n}\n\nclass ProductMedia {\n    constructor(media) {\n        // Take all properties by default\n        Object.assign(this, media);\n\n        // Map cover image\n        this.cover = new ProductImage(media.cover);\n    }\n}\n\nclass ProductFile {\n    constructor(file) {\n        // Take all properties by default\n        Object.assign(this, file);\n    }\n}\n\nclass ProductVariant {\n    constructor(variant, selected = '') {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        this.selected = variant.id === selected;\n    }\n}\n\nclass ProductVariantAttributeOption {\n    constructor(id, label) {\n        this.id = id;\n        this.label = label;\n    }\n}\n\nclass ProductVariantAttribute {\n    constructor(variant) {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        // Map options\n        this.options = Object.keys(variant.options).map(\n            id => new ProductVariantAttributeOption(id, variant.options[id]),\n        );\n    }\n}\n\nclass Product {\n    constructor(instance, product, variantId = '') {\n        if (!is.object(product)) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, product);\n\n        // Map store\n        this.store = client.store;\n\n        // Product URLs\n        if (is.object(product.urls)) {\n            this.urls = new ProductUrls(product.urls);\n        }\n\n        // Media (Video, YouTube, Vimeo, Audio)\n        if (is.object(product.media)) {\n            this.media = new ProductMedia(product.media);\n        }\n\n        // Images\n        if (is.array(product.images)) {\n            this.images = product.images.map(image => new ProductImage(image));\n        }\n\n        // Files for digital products\n        if (is.array(product.files)) {\n            this.files = product.files.map(file => new ProductFile(file));\n        }\n\n        // Variants\n        if (product.has_variants) {\n            const selected = !is.empty(variantId) ? variantId : product.variants[0].id;\n            this.variants = product.variants.map(variant => new ProductVariant(variant, selected));\n        }\n        if (product.has_variant_attributes) {\n            this.variant_attributes = product.variant_attributes.map(\n                attribute => new ProductVariantAttribute(attribute),\n            );\n        }\n    }\n\n    // eslint-disable-next-line camelcase\n    get selected_variant() {\n        if (is.empty(this.variants)) {\n            return null;\n        }\n\n        return this.variants.find(variant => variant.selected);\n    }\n}\n\nexport default Product;\n","import Product from './Product';\n\nlet client = null;\n\nexport class CartItem {\n    constructor(item, cartId) {\n        this.cartId = cartId;\n\n        // Take all properties by default\n        Object.assign(this, item);\n\n        // Map product\n        this.product = new Product(client, item.product, item.variant_id);\n    }\n}\n\nexport class Cart {\n    constructor(instance, cart, active = false) {\n        if (cart === null) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, cart);\n\n        // Map store\n        this.store = client.store;\n\n        // Set active state\n        this.active = active;\n\n        // Map items\n        this.items = Array.from(cart.items).map(item => new CartItem(item, cart.id));\n    }\n\n    /**\n     * Add a product to this cart\n     * @param {object} product - The product details\n     */\n    add(product) {\n        return client.addToCart(this.id, product);\n    }\n\n    /**\n     * Remove a product from this cart\n     * @param {string} index\n     */\n    remove(index) {\n        return client.removeFromCart(this.id, index);\n    }\n}\n\nexport default Cart;\n","import is from '../utils/is';\n\nclass Category {\n    constructor(category = null) {\n        if (!is.object(category)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, category);\n    }\n}\n\nexport default Category;\n","// ==========================================================================\n// Type checking\n// ==========================================================================\n\nimport { Cart } from '../models/Cart';\nimport Category from '../models/Category';\nimport Product from '../models/Product';\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\nconst isArray = input => Array.isArray(input);\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObjectId = input => isString(input) && /^[a-f\\d]{24}$/i.test(input);\nconst isCurrencyCode = input => isString(input) && /^[A-z]{3}$/.test(input);\nconst isProduct = input => getConstructor(input) === Product && Object.keys(input).length > 0;\nconst isCart = input => getConstructor(input) === Cart && Object.keys(input).length > 0;\nconst isCategory = input => getConstructor(input) === Category && Object.keys(input).length > 0;\n\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nconst isUrl = (input, strict = false) => {\n    // Accept a URL object\n    if (instanceOf(input, window.URL)) {\n        return true;\n    }\n\n    // Add the protocol if required\n    let string = input;\n    if (!strict && !/^https?:\\/\\/*/.test(input)) {\n        string = `http://${input}`;\n    }\n\n    try {\n        return !isEmpty(new URL(string).hostname);\n    } catch (e) {\n        return false;\n    }\n};\n\nconst is = {\n    array: isArray,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    nullOrUndefined: isNullOrUndefined,\n    objectId: isObjectId,\n    currencyCode: isCurrencyCode,\n    product: isProduct,\n    cart: isCart,\n    category: isCategory,\n    url: isUrl,\n    empty: isEmpty,\n};\n\nexport default is;\n","import is from './utils/is';\n\nconst getBase = env => `https://${is.empty(env) ? 'sdk.selz.com' : `${env}/sdk`}/`;\n\nconst config = {\n    urls: {\n        /**\n         * Get URL for product data by URL\n         * @param {String} env - Environment (for internal use)\n         * @param {String} url - Short or full URL for a product\n         */\n        product(env, url = '') {\n            return `${getBase(env)}products/find?url=${url}`;\n        },\n\n        /**\n         * Get URL for all products by store ID\n         * @param {String} env - Environment (for internal use)\n         * @param {Number|String} id - The store ID\n         * @param {String} keyword - Search keyword\n         * @param {ObjectId|String} category - Category ID or relative path\n         * @param {Number} page - Page to fetch\n         */\n        products(env, id, keyword = '', category = '', page = 1) {\n            return `${getBase(env)}products/all/${id}?q=${keyword}&c=${category}&p=${page}`;\n        },\n\n        /**\n         * Get all categories for a given store ID\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - The store ID\n         */\n        categories(env, id) {\n            return `${getBase(env)}categories/${id}`;\n        },\n\n        /**\n         * Get URL for finding a store by URL or ID\n         * @param {String} env - Environment (for internal use)\n         * @param {Number|String} input - The ID or URL to lookup\n         */\n        store(env, input = null) {\n            if (is.number(input)) {\n                return `${getBase(env)}store/find/${input}`;\n            }\n\n            return `${getBase(env)}store/find?url=${input}`;\n        },\n\n        /**\n         * Create a new cart\n         * @param {String} env - Environment (for internal use)\n         * @param {Number} id - Store ID\n         */\n        createCart(env, id = '') {\n            return `${getBase(env)}cart/create/${id}`;\n        },\n\n        /**\n         * Get cart from ID\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        getCart(env, id = '') {\n            return `${getBase(env)}cart/${id}`;\n        },\n\n        /**\n         * Check carts still exist server side\n         * @param {String} env - Environment (for internal use)\n         * @param {Number} id - Cart IDs\n         */\n        checkCarts(env, ids = '') {\n            return `${getBase(env)}cart/verify?ids=${ids}`;\n        },\n\n        /**\n         * Add product to cart\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        addToCart(env, id = '') {\n            return `${getBase(env)}cart/add/${id}`;\n        },\n\n        /**\n         * Update a cart item quantity\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        updateCartItemQuantity(env, id = '') {\n            return `${getBase(env)}cart/updateitemquantity/${id}`;\n        },\n\n        /**\n         * Remove product from cart\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        removeFromCart(env, id = '') {\n            return `${getBase(env)}cart/remove/${id}`;\n        },\n    },\n};\n\nexport default config;\n","import is from '../utils/is';\n\nclass Store {\n    constructor(store = null) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, store);\n    }\n}\n\nexport default Store;\n","// ==========================================================================\n// String utils\n// ==========================================================================\n\n// Replace all occurances of a string in a string\nexport function replaceAll(input = '', find = '', replace = '') {\n    return input.replace(\n        new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'),\n        replace.toString(),\n    );\n}\n\n// Convert to title case\nexport function toTitleCase(input = '') {\n    return input.toString().replace(/\\w\\S*/g, text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase());\n}\n\n// Convert string to pascalCase\nexport function toPascalCase(input = '') {\n    let string = input.toString();\n\n    // Convert kebab case\n    string = replaceAll(string, '-', ' ');\n\n    // Convert snake case\n    string = replaceAll(string, '_', ' ');\n\n    // Convert to title case\n    string = toTitleCase(string);\n\n    // Convert to pascal case\n    return replaceAll(string, ' ', '');\n}\n\n// Convert string to pascalCase\nexport function toCamelCase(input = '') {\n    let string = input.toString();\n\n    // Convert to pascal case\n    string = toPascalCase(string);\n\n    // Convert first character to lowercase\n    return string.charAt(0).toLowerCase() + string.slice(1);\n}\n","// ==========================================================================\n// Form Data utils\n// ==========================================================================\n\nimport is from './is';\nimport { toPascalCase } from './strings';\n\n/**\n * Convert an Object to FormData\n * @param {Object} source - source Object\n * @param {FormData} form - existing FormData object\n * @param {String} namespace - namespace for FormData\n */\nconst buildFormData = (source = {}, form, namespace) => {\n    const data = form || new FormData();\n    let formKey;\n\n    // Source must be an object\n    if (!is.object(source)) {\n        return data;\n    }\n\n    // Loop through the object to convert\n    Object.keys(source).forEach(key => {\n        if (namespace) {\n            formKey = `${namespace}[${key}]`;\n        } else {\n            formKey = key;\n        }\n\n        // If the property is an object, but not a File, use recursivity\n        if (typeof source[key] === 'object' && !(source[key] instanceof File)) {\n            buildFormData(source[key], data, key);\n        } else {\n            data.append(toPascalCase(formKey), source[key]);\n        }\n    });\n\n    return data;\n};\n\nexport default buildFormData;\n","// ==========================================================================\n// Extend objects\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Deep extend destination object with N more objects\n * @param {Object} target\n * @param {...Object} sources\n */\nexport function extend(target = {}, ...sources) {\n    if (!sources.length) {\n        return target;\n    }\n\n    const source = sources.shift();\n\n    if (!is.object(source)) {\n        return target;\n    }\n\n    Object.keys(source).forEach(key => {\n        if (is.object(source[key])) {\n            if (!Object.keys(target).includes(key)) {\n                Object.assign(target, { [key]: {} });\n            }\n\n            extend(target[key], source[key]);\n        } else {\n            Object.assign(target, { [key]: source[key] });\n        }\n    });\n\n    return extend(target, ...sources);\n}\n\n/**\n * Safer JSON parsing\n * @param {Object} data\n */\nexport function parseJSON(data = {}) {\n    return new Promise((resolve, reject) => {\n        try {\n            resolve(JSON.parse(data));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// Fetch\n// ==========================================================================\n\nimport buildFormData from './form-data';\nimport { extend, parseJSON } from './objects';\n\nconst defaults = {\n    type: 'GET',\n    body: {},\n    responseType: 'json',\n};\n\n/**\n * Custom immitation fetch using XHR\n * @param {string} url - The URL of the endpoint\n * @param {object} options - Object of options for the request\n */\nexport default function(url, options = {}) {\n    const { type, body, responseType } = extend({}, defaults, options);\n\n    return new Promise((resolve, reject) => {\n        try {\n            const xhr = new XMLHttpRequest();\n\n            // Check for CORS support\n            if (!('withCredentials' in xhr)) {\n                const error = new Error('No CORS support');\n                error.request = xhr;\n                throw error;\n            }\n\n            // Handle failures\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status\n            const fail = () => {\n                const error = new Error(xhr.status);\n                error.request = xhr;\n                reject(error);\n            };\n\n            // Successfully made the request\n            xhr.addEventListener('load', () => {\n                const { response } = xhr;\n\n                // Something went wrong either with the request or server\n                if (xhr.status >= 400) {\n                    fail();\n                    return;\n                }\n\n                // Parse JSON responses\n                if (responseType === 'json') {\n                    parseJSON(response)\n                        .then(json => {\n                            if (json.success) {\n                                resolve(json.data);\n                            } else {\n                                const error = new Error('Request failed');\n                                error.errors = json.errors;\n                                reject(error);\n                            }\n                        })\n                        .catch(reject);\n                } else {\n                    resolve(response);\n                }\n            });\n\n            // Request failed\n            xhr.addEventListener('error', fail);\n\n            // Start the request\n            xhr.open(type, url, true);\n\n            // Set the required response type\n            // 'json' responseType is much slower, so we parse later\n            // https://github.com/arendjr/fetch-vs-xhr-perf\n            if (responseType !== 'json') {\n                xhr.responseType = responseType;\n            }\n\n            // Send data if passed\n            xhr.send(buildFormData(body));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// Common fetch actions\n// ==========================================================================\n\nimport fetch from './fetch';\n\nconst queue = {};\n\nconst http = {\n    /**\n     * GET remote URL and parse as JSON\n     * @param {string} url - The endpoint URL\n     */\n    get(url) {\n        // Queue requests to prevent hammering\n        if (!Object.keys(queue).includes(url)) {\n            queue[url] = fetch(url);\n\n            const remove = () => {\n                delete queue[url];\n            };\n\n            // Remove from queue on completed\n            queue[url].then(remove).catch(remove);\n        }\n\n        return queue[url];\n    },\n\n    /**\n     * POST to remote URL and parse as JSON\n     * @param {string} url - The endpoint URL\n     * @param {object} data - The POST data payload\n     */\n    post(url, data = {}) {\n        const options = {\n            type: 'POST',\n            body: data,\n        };\n\n        return fetch(url, options);\n    },\n};\n\nexport default http;\n","// ==========================================================================\n// Local storage wrapper\n// TODO: methods should return promises?\n// ==========================================================================\n\nimport Store from '../models/Store';\nimport { dedupe } from './arrays';\nimport is from './is';\nimport { extend } from './objects';\nimport parseUrl from './parseUrl';\n\nconst storage = new Map();\n\nconst getKey = url => {\n    if (url === null) {\n        return null;\n    }\n\n    const parsed = parseUrl(url);\n\n    if (parsed === null) {\n        return null;\n    }\n\n    return `${parsed.host}${parsed.pathname}`.replace(/\\/$/, '');\n};\n\nclass Storage {\n    constructor(config) {\n        this.config = Object.assign(\n            {\n                keys: {\n                    root: 'selz-js-sdk',\n                    carts: 'carts',\n                    stores: 'stores',\n                },\n                ttl: 3600, // 1 hour\n                schema: new Date('2018-07-02').getTime(), // Schema version (allowing us to change data schema and invalidate storage)\n            },\n            config,\n        );\n\n        this.purge();\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        if (!window.localStorage) {\n            return false;\n        }\n\n        const key = '___test';\n\n        // Try to use it\n        try {\n            window.localStorage.setItem(key, key);\n            window.localStorage.removeItem(key);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        let data = storage.get(this.config.keys.root);\n\n        // Grab from real storage if we can or use faux-storage\n        if (Storage.supported) {\n            const stored = window.localStorage.getItem(this.config.keys.root);\n\n            if (!is.empty(stored)) {\n                data = JSON.parse(stored);\n            }\n        }\n\n        if (is.empty(data)) {\n            return null;\n        }\n\n        if (!is.empty(key)) {\n            return Object.keys(data).includes(key) ? data[key] : null;\n        }\n\n        return data;\n    }\n\n    set(key, value, merge = false) {\n        // Get current storage\n        const data = this.get() || {};\n\n        // Extend with the new data\n        if (merge && Object.keys(data).includes(key)) {\n            data[key] = extend(data[key], value);\n        } else {\n            data[key] = value;\n        }\n\n        // Set in faux-storage\n        storage.set(this.config.keys.root, data);\n\n        // Bail if no real support\n        if (!Storage.supported) {\n            return;\n        }\n\n        // Set schema version\n        data.schema = this.config.schema;\n\n        // Update storage\n        try {\n            window.localStorage.setItem(this.config.keys.root, JSON.stringify(data));\n        } catch (e) {\n            // Do nothing\n        }\n    }\n\n    // Clean up stale storage\n    purge() {\n        // Check schema\n        const data = this.get();\n\n        // Nothing to purge\n        if (is.empty(data)) {\n            return;\n        }\n\n        // If schema does not match, kill it\n        if (Number(data.schema) !== this.config.schema) {\n            window.localStorage.removeItem(this.config.keys.root);\n            return;\n        }\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n\n        // Nothing to cleanup\n        if (is.empty(stores)) {\n            return;\n        }\n\n        // Check TTL is valid\n        this.set(\n            this.config.keys.stores,\n            stores.filter(store => {\n                const ttl = Number(store.ttl);\n                return ttl > 0 && ttl > Date.now();\n            }),\n        );\n    }\n\n    getCarts(store) {\n        const data = this.get(this.config.keys.carts) || {};\n\n        // If no carts\n        if (is.empty(data)) {\n            return null;\n        }\n\n        // Get all carts\n        if (!is.number(store)) {\n            return data;\n        }\n\n        // Store not found\n        if (!Object.keys(data).includes(store.toString())) {\n            return null;\n        }\n\n        // Get all for a store\n        return data[store.toString()];\n    }\n\n    getCart(store, currency) {\n        const carts = this.getCarts(store);\n\n        // No carts\n        if (is.empty(carts)) {\n            return null;\n        }\n\n        // Get all for a store\n        if (!is.string(currency)) {\n            return carts;\n        }\n\n        // Currency not found\n        if (!Object.keys(carts).includes(currency.toUpperCase())) {\n            return null;\n        }\n\n        return carts[currency.toUpperCase()];\n    }\n\n    setCart(store, currency, cart) {\n        this.set(\n            this.config.keys.carts,\n            {\n                [store]: {\n                    [currency.toUpperCase()]: {\n                        id: cart.id,\n                        active: cart.active,\n                    },\n                },\n            },\n            true,\n        );\n    }\n\n    setCarts(store, carts = {}) {\n        this.set(this.config.keys.carts, {\n            [store]: carts,\n        });\n    }\n\n    getStore(input) {\n        let store = null;\n\n        if (!is.number(input) && !is.url(input)) {\n            return null;\n        }\n\n        const stores = this.get(this.config.keys.stores) || [];\n\n        if (is.number(input)) {\n            store = stores.find(s => is.object(s.data) && s.data.id === input);\n        } else if (is.url(input)) {\n            const key = getKey(input);\n\n            // Bail if invalid URL\n            if (key === null) {\n                return null;\n            }\n\n            store = stores.find(s => is.array(s.urls) && s.urls.includes(key));\n        }\n\n        if (!is.object(store)) {\n            return null;\n        }\n\n        // Check TTL is valid\n        const ttl = Number(store.ttl);\n\n        if (ttl > 0 && ttl < Date.now()) {\n            this.purge();\n            return null;\n        }\n\n        return new Store(store.data);\n    }\n\n    setStore(data, url = null) {\n        // Strip the protocol from the lookup url\n        const key = getKey(url);\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n        let existing = null;\n\n        if (!is.empty(stores)) {\n            // Find existing store by id\n            existing = stores.find(s => s.data.id === data.id);\n        }\n\n        // Extend TTL each\n        const ttl = Date.now() + this.config.ttl;\n\n        // If we found something\n        if (is.object(existing)) {\n            // Update data and extend TTL\n            Object.assign(existing, {\n                data,\n                ttl,\n            });\n\n            if (key !== null) {\n                // Add the URL key for later lookup\n                if (!is.array(existing.urls)) {\n                    existing.urls = [key];\n                } else {\n                    existing.urls.push(key);\n                }\n\n                // Remove duplicate entries\n                const urls = dedupe(existing.urls);\n\n                // Add to existing record\n                Object.assign(existing, {\n                    urls,\n                });\n            }\n        } else {\n            const store = {\n                data,\n                ttl,\n            };\n\n            if (key !== null) {\n                Object.assign(store, {\n                    urls: [key],\n                });\n            }\n\n            stores.push(store);\n        }\n\n        this.set(this.config.keys.stores, stores);\n    }\n}\n\nexport default Storage;\n","/**\n * Parse a string to URL object\n * @param {String} url\n */\nexport default function parseUrl(url) {\n    let string = url;\n\n    // Add the protocol if required\n    if (!/^https?:\\/\\/*/.test(url)) {\n        string = `http://${url}`;\n    }\n\n    try {\n        return new URL(string);\n    } catch (e) {\n        return null;\n    }\n}\n","// ==========================================================================\n// Array utils\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Remove duplicates in an array\n * @param {array} array\n */\nexport function dedupe(array) {\n    if (!is.array(array)) {\n        return array;\n    }\n\n    return array.filter((item, index) => array.indexOf(item) === index);\n}\n\n// Rounding methods for .closest()\nconst closestRounding = {\n    none: 0,\n    ceil: 1,\n    floor: 2,\n};\nexport { closestRounding };\n\n/**\n * Get the closest value in an array\n * @param {array} array\n * @param {number} value\n * @param {number} rounding\n */\nexport function closest(array, value, rounding = closestRounding.none) {\n    if (!is.array(array) || !array.length) {\n        return null;\n    }\n\n    return array.reduce((prev, curr) => {\n        if (Math.abs(curr - value) <= Math.abs(prev - value)) {\n            switch (rounding) {\n                case closestRounding.ceil:\n                    return curr >= value ? curr : prev;\n\n                case closestRounding.floor:\n                    return curr <= value ? curr : prev;\n\n                default:\n                    return curr;\n            }\n        }\n\n        return prev;\n    });\n}\n"]}