{"version":3,"file":"SelzClient.mjs","sources":["../src/config.js","../node_modules/to-no-case/index.js","../node_modules/to-space-case/index.js","../node_modules/to-snake-case/index.js","../src/fetch.js","../node_modules/map-obj/index.js","../node_modules/snakecase-keys/index.js","../src/utils.js","../src/http.js","../src/models/cart.js","../src/index.js"],"sourcesContent":["// import URI from 'urijs';\n\nfunction getBase(env) {\n    return `https://${typeof env === 'string' && env.length ? `${env}.` : ''}selz.com/sdk/`;\n}\n\nconst config = {\n    urls: {\n        /**\n         * Get URL for product data by URL\n         * @param {String} env - Environment (e.g. local, develop, release)\n         * @param {String} url - Short or full URL for a product\n         */\n        product(env, url) {\n            return `${getBase(env)}product?url=${url}`;\n        },\n\n        /**\n         * Get URL for all products by User ID\n         * @param {String} env - Environment (e.g. local, develop, release)\n         * @param {String} id - The User ID for the store\n         */\n        products(env, id) {\n            return `${getBase(env)}products/${id}`;\n        },\n\n        /**\n         * Get URL for User ID by domain\n         * @param {String} env - Environment (e.g. local, develop, release)\n         * @param {String} url - The URL for the store\n         */\n        userId(env, url) {\n            return `${getBase(env)}userid?domain=${url}`;\n        },\n\n        /**\n         * Create a new cart\n         * @param {String} env - Environment (e.g. local, develop, release)\n         * @param {Number} id - Store ID\n         */\n        createCart(env, id) {\n            return `${getBase(env)}createcart/${id}`;\n        },\n\n        /**\n         * Get cart from ID\n         * @param {String} env - Environment (e.g. local, develop, release)\n         * @param {Number} id - Cart ID\n         */\n        getCart(env, id) {\n            return `${getBase(env)}cart/${id}`;\n        },\n    },\n};\n\nexport default config;\n","\n/**\n * Expose `toNoCase`.\n */\n\nmodule.exports = toNoCase;\n\n\n/**\n * Test whether a string is camel-case.\n */\n\nvar hasSpace = /\\s/;\nvar hasCamel = /[a-z][A-Z]/;\nvar hasSeparator = /[\\W_]/;\n\n\n/**\n * Remove any starting case from a `string`, like camel or snake, but keep\n * spaces and punctuation that may be important otherwise.\n *\n * @param {String} string\n * @return {String}\n */\n\nfunction toNoCase (string) {\n  if (hasSpace.test(string)) return string.toLowerCase();\n\n  if (hasSeparator.test(string)) string = unseparate(string);\n  if (hasCamel.test(string)) string = uncamelize(string);\n  return string.toLowerCase();\n}\n\n\n/**\n * Separator splitter.\n */\n\nvar separatorSplitter = /[\\W_]+(.|$)/g;\n\n\n/**\n * Un-separate a `string`.\n *\n * @param {String} string\n * @return {String}\n */\n\nfunction unseparate (string) {\n  return string.replace(separatorSplitter, function (m, next) {\n    return next ? ' ' + next : '';\n  });\n}\n\n\n/**\n * Camelcase splitter.\n */\n\nvar camelSplitter = /(.)([A-Z]+)/g;\n\n\n/**\n * Un-camelcase a `string`.\n *\n * @param {String} string\n * @return {String}\n */\n\nfunction uncamelize (string) {\n  return string.replace(camelSplitter, function (m, previous, uppers) {\n    return previous + ' ' + uppers.toLowerCase().split('').join(' ');\n  });\n}","\nvar clean = require('to-no-case');\n\n\n/**\n * Expose `toSpaceCase`.\n */\n\nmodule.exports = toSpaceCase;\n\n\n/**\n * Convert a `string` to space case.\n *\n * @param {String} string\n * @return {String}\n */\n\n\nfunction toSpaceCase (string) {\n  return clean(string).replace(/[\\W_]+(.|$)/g, function (matches, match) {\n    return match ? ' ' + match : '';\n  });\n}","var toSpace = require('to-space-case');\n\n\n/**\n * Expose `toSnakeCase`.\n */\n\nmodule.exports = toSnakeCase;\n\n\n/**\n * Convert a `string` to snake case.\n *\n * @param {String} string\n * @return {String}\n */\n\n\nfunction toSnakeCase (string) {\n  return toSpace(string).replace(/\\s/g, '_');\n}\n","import snakeCase from 'snakecase-keys';\n\n/**\n * Custom fetch wrapper\n * @param {String} url - The URL of the endpoint\n * @param {Object} options - Object of options for the request\n */\nfunction CustomFetch(url, options) {\n    const defaults = {\n        mode: 'cors',\n        redirect: 'follow',\n    };\n\n    return new Promise((resolve, reject) => {\n        fetch(url, Object.assign(defaults, options))\n            .then(response => {\n                response\n                    .json()\n                    .then(data => {\n                        const json = snakeCase(data);\n\n                        if (json.error === true) {\n                            reject(json.message);\n                        } else {\n                            resolve(json);\n                        }\n                    })\n                    .catch(reject);\n            })\n            .catch(reject);\n    });\n}\n\nexport default CustomFetch;\n","'use strict';\n\n// customized for this use-case\nconst isObject = x =>\n\ttypeof x === 'object' &&\n\tx !== null &&\n\t!(x instanceof RegExp) &&\n\t!(x instanceof Error) &&\n\t!(x instanceof Date);\n\nmodule.exports = function mapObj(obj, fn, opts, seen) {\n\topts = Object.assign({\n\t\tdeep: false,\n\t\ttarget: {}\n\t}, opts);\n\n\tseen = seen || new WeakMap();\n\n\tif (seen.has(obj)) {\n\t\treturn seen.get(obj);\n\t}\n\n\tseen.set(obj, opts.target);\n\n\tconst target = opts.target;\n\tdelete opts.target;\n\n\tfor (const key of Object.keys(obj)) {\n\t\tconst val = obj[key];\n\t\tconst res = fn(key, val, obj);\n\t\tlet newVal = res[1];\n\n\t\tif (opts.deep && isObject(newVal)) {\n\t\t\tif (Array.isArray(newVal)) {\n\t\t\t\tnewVal = newVal.map(x => isObject(x) ? mapObj(x, fn, opts, seen) : x);\n\t\t\t} else {\n\t\t\t\tnewVal = mapObj(newVal, fn, opts, seen);\n\t\t\t}\n\t\t}\n\n\t\ttarget[res[0]] = newVal;\n\t}\n\n\treturn target;\n};\n","'use strict'\n\nvar map = require('map-obj')\nvar snakeCase = require('to-snake-case')\n\nmodule.exports = function (obj) {\n  return map(obj, function (key, val) {\n    return [snakeCase(key), val]\n  }, {deep: true})\n}\n","const utils = {\n    is: {\n        object(obj) {\n            return obj === Object(obj);\n        },\n    },\n};\n\nexport default utils;\n","import CustomFetch from './fetch';\nimport utils from './utils';\n\nconst http = {\n    /**\n     * GET remote URL and parse as JSON\n     * @param {String} url - The endpoint URL\n     */\n    get(url) {\n        return new CustomFetch(url);\n    },\n\n    /**\n     * POST to remote URL and parse as JSON\n     * @param {String} url - The endpoint URL\n     * @param {Object} data - The POST data payload\n     */\n    post(url, data) {\n        const options = {\n            method: 'POST',\n            body: new FormData(),\n        };\n\n        // Convert POST data to FormData for C#\n        if (utils.is.object(data)) {\n            Object.keys(data).forEach(key => {\n                options.body.append(key, data[key]);\n            });\n        }\n\n        return new CustomFetch(url, options);\n    },\n};\n\nexport default http;\n","class Cart {\n    constructor(cart) {\n        this.id = cart.id;\n        this.seller_id = cart.seller_id;\n        this.url = cart.id;\n\n        this.currency_code = cart.currency_code;\n        this.total_price = cart.total_price;\n        this.total_price_display = cart.total_price_display;\n\n        this.items = cart.items;\n\n        this.channel = cart.channel;\n        this.tracking_id = cart.tracking_id;\n\n        this.created_time = cart.created_time;\n        this.updated_time = cart.updated_time;\n    }\n\n    addItem() {\n        return this.id;\n    }\n\n    removeItem() {\n        return this.id;\n    }\n}\n\nexport default Cart;\n","import config from './config';\nimport http from './http';\nimport Cart from './models/cart';\n\nclass SelzClient {\n    constructor(props) {\n        this.config = Object.assign(\n            {\n                domain: '',\n                id: -1,\n            },\n            props,\n        );\n\n        if (!this.isIdSet() && !this.isDomainSet()) {\n            throw Error('user or domain are required');\n        }\n    }\n\n    isIdSet() {\n        return Number.isInteger(this.config.id) && this.config.id !== -1;\n    }\n    isDomainSet() {\n        return typeof this.config.domain === 'string' && this.config.domain.length;\n    }\n\n    /**\n     * Get product data\n     * @param {String} url - Short or full URL for a product\n     */\n    getProduct(url) {\n        return http.get(config.urls.product(this.config.env, url));\n    }\n\n    /**\n     * Get all products\n     */\n    async getAllProducts() {\n        await this.getUser();\n\n        return http.get(config.urls.products(this.config.env, this.config.id));\n    }\n\n    /**\n     * Get the Store ID\n     * TODO: Queue this somehow?\n     */\n    getUser() {\n        if (this.isIdSet()) {\n            return new Promise(resolve => resolve(this.config.id));\n        }\n\n        return new Promise((resolve, reject) => {\n            http\n                .get(config.urls.userId(this.config.env, this.config.domain))\n                .then(json => {\n                    this.config.id = json.id;\n                    resolve(json.id);\n                })\n                .catch(error => reject(error));\n        });\n    }\n\n    /**\n     * Create a new shopping cart\n     * @param {String} currency - ISO currency code\n     * @param {String} discount - Discount code (optional)\n     */\n    async createCart(currency, discount) {\n        await this.getUser();\n\n        return http.post(config.urls.createCart(this.config.env, this.config.id), {\n            currency,\n            discount: typeof discount === 'string' && discount.length ? discount : null,\n        });\n    }\n\n    /**\n     * Get a shopping cart\n     * @param {String} id - The shopping cart id\n     */\n    async getCart(id) {\n        await this.getUser();\n\n        return new Promise((resolve, reject) => {\n            http\n                .get(config.urls.getCart(this.config.env, id))\n                .then(json => {\n                    resolve(new Cart(json));\n                })\n                .catch(reject);\n        });\n    }\n}\n\nexport default SelzClient;\n"],"names":["getBase","env","length","toNoCase","string","hasSpace","test","toLowerCase","hasSeparator","unseparate","hasCamel","uncamelize","replace","separatorSplitter","m","next","camelSplitter","previous","uppers","split","join","toSpaceCase","clean","matches","match","toSnakeCase","toSpace","CustomFetch","url","options","defaults","Promise","resolve","reject","Object","assign","then","json","snakeCase","data","error","message","catch","config","id","isObject","x","RegExp","Error","Date","mapObj","obj","fn","opts","seen","WeakMap","has","get","set","target","keys","key","val","res","newVal","deep","Array","isArray","map","utils","http","FormData","is","object","forEach","body","append","Cart","cart","seller_id","currency_code","total_price","total_price_display","items","channel","tracking_id","created_time","updated_time","this","SelzClient","props","isIdSet","isDomainSet","Number","isInteger","domain","urls","product","getUser","products","_this","userId","currency","discount","post","createCart","getCart","_this2"],"mappings":"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"}