{"version":3,"sources":["docs/src/scripts.js","src/utils/is.js","src/classes/Product/ProductFile.js","src/classes/Product/ProductImage.js","src/classes/Product/ProductMedia.js","src/classes/Product/ProductUrls.js","src/classes/Product/ProductVariant.js","src/classes/Product/ProductVariantAttributeOption.js","src/classes/Product/ProductVariantAttribute.js","src/classes/Product/Product.js","src/classes/Cart/CartItem.js","src/classes/Cart/Cart.js","src/classes/Cart/CartAddItem.js","src/classes/Category/Category.js","src/classes/Store/Store.js","src/config.js","node_modules/humps/humps.js","src/utils/objects.js","src/utils/strings.js","src/utils/form-data.js","src/utils/fetch.js","src/utils/http.js","src/utils/arrays.js","src/utils/storage.js","src/utils/parseUrl.js","src/client.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","_defineProperty","value","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","_slicedToArray","arr","Array","isArray","_arrayWithHoles","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","_iterableToArrayLimit","_nonIterableRest","getConstructor","input","instanceOf","isObject","isString","String","isNullOrUndefined","isEmpty","is","array","number","Number","isNaN","string","boolean","Boolean","function","Function","nullOrUndefined","objectId","test","currencyCode","url","strict","window","URL","concat","hostname","e","empty","ProductFile","a","file","this","assign","ProductImage","image","ProductMedia","media","cover","ProductUrls","urls","ProductVariant","variant","selected","id","ProductVariantAttributeOption","label","ProductVariantAttribute","options","map","client","Product","product","variantId","store","images","files","hasVariants","variants","hasVariantAttributes","variantAttributes","attribute","get","find","CartItem","item","cartId","Cart","cart","active","items","from","addToCart","index","removeFromCart","CartAddItem","productId","quantity","discountCode","buyersUnitPrice","isProduct","Category","category","Store","getBase","env","config","products","keyword","page","categories","buy","createCart","getCart","checkCarts","ids","updateCartItemQuantity","commonjsGlobal","globalThis","global","self","module","humps","_processKeys","camelize","pascalize","decamelize","_isFunction","_isObject","_isArray","_isDate","_isRegExp","_isBoolean","_isNumerical","_processor","convert","output","l","hasOwnProperty","replace","match","chr","toUpperCase","substr","toLowerCase","camelized","separator","split","join","separateWords","callback","process","depascalize","camelizeKeys","decamelizeKeys","pascalizeKeys","depascalizeKeys","exports","fn","cloneDeep","JSON","parse","stringify","extend","b","sources","d","shift","includes","replaceAll","RegExp","toPascalCase","text","charAt","toTitleCase","buildFormData","formKey","form","namespace","formData","FormData","data","error","File","append","defaults","type","body","responseType","fetch","c","Promise","resolve","reject","xhr","XMLHttpRequest","Error","request","fail","status","addEventListener","response","parseJSON","then","json","success","errors","catch","open","send","queue","http","remove","dedupe","indexOf","storage","Map","getKey","parsed","parseUrl","host","pathname","Storage","root","carts","stores","ttl","schema","Date","getTime","purge","supported","stored","localStorage","getItem","merge","set","setItem","removeItem","now","currency","getCarts","s","existing","Client","getStore","cached","setStore","getStoreId","p","cartItem","discount","setCart","currentCart","isCurrency","isObjectId","getCartId","activeId","getActiveCart","validate","entries","setCarts","values","setActiveCart","currencies","document","log","details","createElement","summary","innerHTML","appendChild","contents","pre","classList","add","prettyPrint","detail","updatedCart","getElementById","getProduct"],"mappings":"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","file":"scripts.js","sourcesContent":["import Client, { CartAddItem } from '../../src/client';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const output = document.getElementById('output');\n\n    function log(label, data) {\n        const details = document.createElement('details');\n        const summary = document.createElement('summary');\n        summary.innerHTML = label;\n        details.appendChild(summary);\n\n        const contents = document.createElement('div');\n        const pre = document.createElement('pre');\n        pre.classList.add('prettyprint');\n        pre.innerHTML = JSON.stringify(data, null, 4);\n        contents.appendChild(pre);\n        details.appendChild(contents);\n\n        output.appendChild(details);\n\n        window.prettyPrint();\n    }\n\n    function fail(label, error) {\n        if (error instanceof Error) {\n            log(`${label} (error)`, {\n                error: error.toString(),\n                detail: error.errors,\n            });\n\n            return;\n        }\n\n        log(`${label} (failed)`, error);\n    }\n\n    const client = new Client({\n        store: 'local.sampotts.me',\n        env: 'local-selz.com',\n    });\n\n    // Expose\n    window.client = client;\n\n    log('Client', client);\n\n    function getCart(currency) {\n        return new Promise((resolve, reject) => {\n            if (window.cart) {\n                resolve(window.cart);\n                return;\n            }\n\n            client\n                .getCart(currency)\n                .then(cart => {\n                    log('Get cart', cart);\n\n                    window.cart = cart;\n\n                    resolve(cart);\n                })\n                .catch(error => reject(error));\n        });\n    }\n\n    function addToCart(product) {\n        getCart(product.currencyCode)\n            .then(cart => {\n                const cartItem = new CartAddItem(product);\n                cartItem.quantity = 2;\n\n                cart.add(cartItem)\n                    .then(updatedCart => {\n                        log('Add to cart', updatedCart);\n\n                        window.cart = updatedCart;\n                    })\n                    .catch(error => fail('Add to cart', error));\n            })\n            .catch(error => fail('Get cart', error));\n    }\n\n    /* function buy(product) {\n        client\n            .buy(product)\n            .then(cart => {\n                log('Buy now', cart);\n\n                window.cart = cart;\n            })\n            .catch(error => fail('Buy now', error));\n    } */\n\n    const products = {\n        GBP: 'http://selz.co/1MaSYRU',\n        USD: 'http://selz.co/1rvbhT6',\n    };\n\n    client\n        .getProduct(products.USD)\n        .then(product => {\n            log('Product', product);\n\n            // Expose\n            window.product = product;\n\n            // buy(product);\n\n            addToCart(product);\n        })\n        .catch(errors => fail('Product', errors));\n\n    // Listen for messages from parent\n    /* window.addEventListener('message', event => {\n        // console.warn(event.data);\n        const json = JSON.parse(event.data);\n\n        if (json.key !== 'add-to-cart') {\n            return;\n        }\n\n        addToCart(json.data);\n    }); */\n});\n","// ==========================================================================\n// Type checking\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\nconst isArray = input => Array.isArray(input);\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObjectId = input => isString(input) && /^[a-f\\d]{24}$/i.test(input);\nconst isCurrencyCode = input => isString(input) && /^[A-z]{3}$/.test(input);\n\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nconst isUrl = (input, strict = false) => {\n    // Accept a URL object\n    if (instanceOf(input, window.URL)) {\n        return true;\n    }\n\n    // Add the protocol if required\n    let string = input;\n    if (!strict && !/^https?:\\/\\/*/.test(input)) {\n        string = `http://${input}`;\n    }\n\n    try {\n        return !isEmpty(new URL(string).hostname);\n    } catch (e) {\n        return false;\n    }\n};\n\nconst is = {\n    array: isArray,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    nullOrUndefined: isNullOrUndefined,\n    objectId: isObjectId,\n    currencyCode: isCurrencyCode,\n    url: isUrl,\n    empty: isEmpty,\n};\n\nexport default is;\n","export default class ProductFile {\n    constructor(file) {\n        // Take all properties by default\n        Object.assign(this, file);\n    }\n}\n","export default class ProductImage {\n    constructor(image) {\n        // Take all properties by default\n        Object.assign(this, image);\n    }\n}\n","import ProductImage from './ProductImage';\n\nexport default class ProductMedia {\n    constructor(media) {\n        // Take all properties by default\n        Object.assign(this, media);\n\n        // Map cover image\n        this.cover = new ProductImage(media.cover);\n    }\n}\n","export default class ProductUrls {\n    constructor(urls) {\n        // Take all properties by default\n        Object.assign(this, urls);\n    }\n}\n","export default class ProductVariant {\n    constructor(variant, selected = '') {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        this.selected = variant.id === selected;\n    }\n}\n","export default class ProductVariantAttributeOption {\n    constructor(id, label) {\n        this.id = id;\n        this.label = label;\n    }\n}\n","import ProductVariantAttributeOption from './ProductVariantAttributeOption';\n\nexport default class ProductVariantAttribute {\n    constructor(variant) {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        // Map options\n        this.options = Object.keys(variant.options).map(\n            id => new ProductVariantAttributeOption(id, variant.options[id]),\n        );\n    }\n}\n","import is from '../../utils/is';\nimport ProductFile from './ProductFile';\nimport ProductImage from './ProductImage';\nimport ProductMedia from './ProductMedia';\nimport ProductUrls from './ProductUrls';\nimport ProductVariant from './ProductVariant';\nimport ProductVariantAttribute from './ProductVariantAttribute';\n\nlet client = null;\n\nexport default class Product {\n    constructor(instance, product, variantId = '') {\n        if (!is.object(product)) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, product);\n\n        // Map store\n        this.store = client.store;\n\n        // Product URLs\n        if (is.object(product.urls)) {\n            this.urls = new ProductUrls(product.urls);\n        }\n\n        // Media (Video, YouTube, Vimeo, Audio)\n        if (is.object(product.media)) {\n            this.media = new ProductMedia(product.media);\n        }\n\n        // Images\n        if (is.array(product.images)) {\n            this.images = product.images.map(image => new ProductImage(image));\n        }\n\n        // Files for digital products\n        if (is.array(product.files)) {\n            this.files = product.files.map(file => new ProductFile(file));\n        }\n\n        // Variants\n        if (product.hasVariants) {\n            const selected = !is.empty(variantId) ? variantId : product.variants[0].id;\n            this.variants = product.variants.map(variant => new ProductVariant(variant, selected));\n        }\n        if (product.hasVariantAttributes) {\n            this.variantAttributes = product.variantAttributes.map(attribute => new ProductVariantAttribute(attribute));\n        }\n    }\n\n    get selectedVariant() {\n        if (is.empty(this.variants)) {\n            return null;\n        }\n\n        return this.variants.find(variant => variant.selected);\n    }\n}\n","import Product from '../Product/Product';\n\nexport default class CartItem {\n    constructor(client, item, cartId) {\n        this.cartId = cartId;\n\n        // Take all properties by default\n        Object.assign(this, item);\n\n        // Map product\n        this.product = new Product(client, item.product, item.variantId);\n    }\n}\n","import CartItem from './CartItem';\n\nlet client = null;\n\nexport default class Cart {\n    constructor(instance, cart, active = false) {\n        if (cart === null) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, cart);\n\n        // Map store\n        this.store = client.store;\n\n        // Set active state\n        this.active = active;\n\n        // Map items\n        this.items = Array.from(cart.items).map(item => new CartItem(client, item, cart.id));\n    }\n\n    /**\n     * Add a product to this cart\n     * @param {Object} item - The cart item\n     */\n    add(item) {\n        return client.addToCart(this.id, item);\n    }\n\n    /**\n     * Remove a product from this cart\n     * @param {String} index\n     */\n    remove(index) {\n        return client.removeFromCart(this.id, index);\n    }\n}\n","import is from '../../utils/is';\nimport Product from '../Product/Product';\n\nconst isProduct = input => !is.empty(input) && input instanceof Product;\n\nexport default class CartAddItem {\n    constructor(item) {\n        this.productId = null;\n        this.variantId = null;\n        this.quantity = 1;\n        this.discountCode = null;\n        this.buyersUnitPrice = null;\n\n        if (isProduct(item) || is.object(item)) {\n            this.productId = item.id;\n            this.variantId = is.objectId(item.variant) ? item.variant : null;\n        }\n    }\n}\n","import is from '../../utils/is';\n\nexport default class Category {\n    constructor(category = null) {\n        if (!is.object(category)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, category);\n    }\n}\n","import is from '../../utils/is';\n\nexport default class Store {\n    constructor(store = null) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, store);\n    }\n}\n","import is from './utils/is';\n\nconst getBase = env => `https://${is.empty(env) || env === 'selz.com' ? 'sdk.selz.com' : `${env}/sdk`}/`;\n\nconst config = {\n    urls: {\n        /**\n         * Get URL for product data by URL\n         * @param {String} env - Environment (for internal use)\n         * @param {String} url - Short or full URL for a product\n         */\n        product(env, url = '') {\n            return `${getBase(env)}products/find?url=${url}`;\n        },\n\n        /**\n         * Get URL for all products by store ID\n         * @param {String} env - Environment (for internal use)\n         * @param {Number|String} id - The store ID\n         * @param {String} keyword - Search keyword\n         * @param {ObjectId|String} category - Category ID or relative path\n         * @param {Number} page - Page to fetch\n         */\n        products(env, id, keyword = '', category = '', page = 1) {\n            return `${getBase(env)}products/all/${id}?q=${keyword}&c=${category}&p=${page}`;\n        },\n\n        /**\n         * Get all categories for a given store ID\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - The store ID\n         */\n        categories(env, id) {\n            return `${getBase(env)}categories/${id}`;\n        },\n\n        /**\n         * Get URL for finding a store by URL or ID\n         * @param {String} env - Environment (for internal use)\n         * @param {Number|String} input - The ID or URL to lookup\n         */\n        store(env, input = null) {\n            if (is.number(input)) {\n                return `${getBase(env)}store/find/${input}`;\n            }\n\n            return `${getBase(env)}store/find?url=${input}`;\n        },\n\n        /**\n         * Buy a product\n         * @param {String} env - Environment (for internal use)\n         */\n        buy(env) {\n            return `${getBase(env)}cart/buy`;\n        },\n\n        /**\n         * Create a new cart\n         * @param {String} env - Environment (for internal use)\n         * @param {Number} id - Store ID\n         */\n        createCart(env, id = '') {\n            return `${getBase(env)}cart/create/${id}`;\n        },\n\n        /**\n         * Get cart from ID\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        getCart(env, id = '') {\n            return `${getBase(env)}cart/${id}`;\n        },\n\n        /**\n         * Check carts still exist server side\n         * @param {String} env - Environment (for internal use)\n         * @param {Number} id - Cart IDs\n         */\n        checkCarts(env, ids = '') {\n            return `${getBase(env)}cart/verify?ids=${ids}`;\n        },\n\n        /**\n         * Add product to cart\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        addToCart(env, id = '') {\n            return `${getBase(env)}cart/add/${id}`;\n        },\n\n        /**\n         * Update a cart item quantity\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        updateCartItemQuantity(env, id = '') {\n            return `${getBase(env)}cart/updateitemquantity/${id}`;\n        },\n\n        /**\n         * Remove product from cart\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        removeFromCart(env, id = '') {\n            return `${getBase(env)}cart/remove/${id}`;\n        },\n    },\n};\n\nexport default config;\n","// =========\n// = humps =\n// =========\n// Underscore-to-camelCase converter (and vice versa)\n// for strings and object keys\n\n// humps is copyright © 2012+ Dom Christie\n// Released under the MIT license.\n\n\n;(function(global) {\n\n  var _processKeys = function(convert, obj, options) {\n    if(!_isObject(obj) || _isDate(obj) || _isRegExp(obj) || _isBoolean(obj) || _isFunction(obj)) {\n      return obj;\n    }\n\n    var output,\n        i = 0,\n        l = 0;\n\n    if(_isArray(obj)) {\n      output = [];\n      for(l=obj.length; i<l; i++) {\n        output.push(_processKeys(convert, obj[i], options));\n      }\n    }\n    else {\n      output = {};\n      for(var key in obj) {\n        if(Object.prototype.hasOwnProperty.call(obj, key)) {\n          output[convert(key, options)] = _processKeys(convert, obj[key], options);\n        }\n      }\n    }\n    return output;\n  };\n\n  // String conversion methods\n\n  var separateWords = function(string, options) {\n    options = options || {};\n    var separator = options.separator || '_';\n    var split = options.split || /(?=[A-Z])/;\n\n    return string.split(split).join(separator);\n  };\n\n  var camelize = function(string) {\n    if (_isNumerical(string)) {\n      return string;\n    }\n    string = string.replace(/[\\-_\\s]+(.)?/g, function(match, chr) {\n      return chr ? chr.toUpperCase() : '';\n    });\n    // Ensure 1st char is always lowercase\n    return string.substr(0, 1).toLowerCase() + string.substr(1);\n  };\n\n  var pascalize = function(string) {\n    var camelized = camelize(string);\n    // Ensure 1st char is always uppercase\n    return camelized.substr(0, 1).toUpperCase() + camelized.substr(1);\n  };\n\n  var decamelize = function(string, options) {\n    return separateWords(string, options).toLowerCase();\n  };\n\n  // Utilities\n  // Taken from Underscore.js\n\n  var toString = Object.prototype.toString;\n\n  var _isFunction = function(obj) {\n    return typeof(obj) === 'function';\n  };\n  var _isObject = function(obj) {\n    return obj === Object(obj);\n  };\n  var _isArray = function(obj) {\n    return toString.call(obj) == '[object Array]';\n  };\n  var _isDate = function(obj) {\n    return toString.call(obj) == '[object Date]';\n  };\n  var _isRegExp = function(obj) {\n    return toString.call(obj) == '[object RegExp]';\n  };\n  var _isBoolean = function(obj) {\n    return toString.call(obj) == '[object Boolean]';\n  };\n\n  // Performant way to determine if obj coerces to a number\n  var _isNumerical = function(obj) {\n    obj = obj - 0;\n    return obj === obj;\n  };\n\n  // Sets up function which handles processing keys\n  // allowing the convert function to be modified by a callback\n  var _processor = function(convert, options) {\n    var callback = options && 'process' in options ? options.process : options;\n\n    if(typeof(callback) !== 'function') {\n      return convert;\n    }\n\n    return function(string, options) {\n      return callback(string, convert, options);\n    }\n  };\n\n  var humps = {\n    camelize: camelize,\n    decamelize: decamelize,\n    pascalize: pascalize,\n    depascalize: decamelize,\n    camelizeKeys: function(object, options) {\n      return _processKeys(_processor(camelize, options), object);\n    },\n    decamelizeKeys: function(object, options) {\n      return _processKeys(_processor(decamelize, options), object, options);\n    },\n    pascalizeKeys: function(object, options) {\n      return _processKeys(_processor(pascalize, options), object);\n    },\n    depascalizeKeys: function () {\n      return this.decamelizeKeys.apply(this, arguments);\n    }\n  };\n\n  if (typeof define === 'function' && define.amd) {\n    define(humps);\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = humps;\n  } else {\n    global.humps = humps;\n  }\n\n})(this);\n","// ==========================================================================\n// Extend objects\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Clone nested objects\n * @param {object} object\n */\nexport function cloneDeep(object) {\n    return JSON.parse(JSON.stringify(object));\n}\n\n/**\n * Deep extend destination object with N more objects\n * @param {Object} target\n * @param {...Object} sources\n */\nexport function extend(target = {}, ...sources) {\n    if (!sources.length) {\n        return target;\n    }\n\n    const source = sources.shift();\n\n    if (!is.object(source)) {\n        return target;\n    }\n\n    Object.keys(source).forEach(key => {\n        if (is.object(source[key])) {\n            if (!Object.keys(target).includes(key)) {\n                Object.assign(target, { [key]: {} });\n            }\n\n            extend(target[key], source[key]);\n        } else {\n            Object.assign(target, { [key]: source[key] });\n        }\n    });\n\n    return extend(target, ...sources);\n}\n\n/**\n * Safer JSON parsing\n * @param {Object} data\n */\nexport function parseJSON(data = {}) {\n    return new Promise((resolve, reject) => {\n        try {\n            resolve(JSON.parse(data));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// String utils\n// ==========================================================================\n\n// Replace all occurances of a string in a string\nexport function replaceAll(input = '', find = '', replace = '') {\n    return input.replace(\n        new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'),\n        replace.toString(),\n    );\n}\n\n// Convert to title case\nexport function toTitleCase(input = '') {\n    return input.toString().replace(/\\w\\S*/g, text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase());\n}\n\n// Convert string to pascalCase\nexport function toPascalCase(input = '') {\n    let string = input.toString();\n\n    // Convert kebab case\n    string = replaceAll(string, '-', ' ');\n\n    // Convert snake case\n    string = replaceAll(string, '_', ' ');\n\n    // Convert to title case\n    string = toTitleCase(string);\n\n    // Convert to pascal case\n    return replaceAll(string, ' ', '');\n}\n\n// Convert string to pascalCase\nexport function toCamelCase(input = '') {\n    let string = input.toString();\n\n    // Convert to pascal case\n    string = toPascalCase(string);\n\n    // Convert first character to lowercase\n    return string.charAt(0).toLowerCase() + string.slice(1);\n}\n","// ==========================================================================\n// Form Data utils\n// ==========================================================================\n\nimport is from './is';\nimport { cloneDeep } from './objects';\nimport { toPascalCase } from './strings';\n\n/**\n * Convert an Object to FormData\n * @param {Object} source - source Object\n * @param {FormData} form - existing FormData object\n * @param {String} namespace - namespace for FormData\n */\nconst buildFormData = (source = {}, form, namespace) => {\n    const formData = form || new FormData();\n    let formKey;\n    let data = null;\n\n    // Parse as an object\n    try {\n        data = cloneDeep(source);\n    } catch (error) {\n        return formData;\n    }\n\n    // Source must be an object\n    if (!is.object(data)) {\n        return formData;\n    }\n\n    // Loop through the object to convert\n    Object.keys(data).forEach(key => {\n        if (namespace) {\n            formKey = `${namespace}[${key}]`;\n        } else {\n            formKey = key;\n        }\n\n        // If the property is an object, but not a File, use recursivity\n        if (typeof source[key] === 'object' && !(source[key] instanceof File)) {\n            buildFormData(source[key], formData, key);\n        } else {\n            formData.append(toPascalCase(formKey), source[key]);\n        }\n    });\n\n    return formData;\n};\n\nexport default buildFormData;\n","// ==========================================================================\n// Fetch\n// ==========================================================================\n\nimport humps from 'humps';\n\nimport buildFormData from './form-data';\nimport { extend, parseJSON } from './objects';\n\nconst defaults = {\n    type: 'GET',\n    body: {},\n    responseType: 'json',\n};\n\n/**\n * Custom immitation fetch using XHR\n * @param {String} url - The URL of the endpoint\n * @param {Object} options - Object of options for the request\n */\nexport default function(url, options = {}) {\n    const { type, body, responseType } = extend({}, defaults, options);\n\n    return new Promise((resolve, reject) => {\n        try {\n            const xhr = new XMLHttpRequest();\n\n            // Check for CORS support\n            if (!('withCredentials' in xhr)) {\n                const error = new Error('No CORS support');\n                error.request = xhr;\n                throw error;\n            }\n\n            // Handle failures\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status\n            const fail = () => {\n                const error = new Error(xhr.status);\n                error.request = xhr;\n                reject(error);\n            };\n\n            // Successfully made the request\n            xhr.addEventListener('load', () => {\n                const { response } = xhr;\n\n                // Something went wrong either with the request or server\n                if (xhr.status >= 400) {\n                    fail();\n                    return;\n                }\n\n                // Parse JSON responses\n                if (responseType === 'json') {\n                    parseJSON(response)\n                        .then(json => {\n                            if (json.success) {\n                                const data = humps.camelizeKeys(json.data);\n                                resolve(data);\n                            } else {\n                                const error = new Error('Request failed');\n                                error.errors = json.errors;\n                                reject(error);\n                            }\n                        })\n                        .catch(reject);\n                } else {\n                    resolve(response);\n                }\n            });\n\n            // Request failed\n            xhr.addEventListener('error', fail);\n\n            // Start the request\n            xhr.open(type, url, true);\n\n            // Set the required response type\n            // 'json' responseType is much slower, so we parse later\n            // https://github.com/arendjr/fetch-vs-xhr-perf\n            if (responseType !== 'json') {\n                xhr.responseType = responseType;\n            }\n\n            // Send data if passed\n            xhr.send(buildFormData(body));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// Common fetch actions\n// ==========================================================================\n\nimport fetch from './fetch';\n\nconst queue = {};\n\nconst http = {\n    /**\n     * GET remote URL and parse as JSON\n     * @param {String} url - The endpoint URL\n     */\n    get(url) {\n        // Queue requests to prevent hammering\n        if (!Object.keys(queue).includes(url)) {\n            queue[url] = fetch(url);\n\n            const remove = () => {\n                delete queue[url];\n            };\n\n            // Remove from queue on completed\n            queue[url].then(remove).catch(remove);\n        }\n\n        return queue[url];\n    },\n\n    /**\n     * POST to remote URL and parse as JSON\n     * @param {String} url - The endpoint URL\n     * @param {Object} data - The POST data payload\n     */\n    post(url, data = {}) {\n        const options = {\n            type: 'POST',\n            body: data,\n        };\n\n        return fetch(url, options);\n    },\n};\n\nexport default http;\n","// ==========================================================================\n// Array utils\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Remove duplicates in an array\n * @param {array} array\n */\nexport function dedupe(array) {\n    if (!is.array(array)) {\n        return array;\n    }\n\n    return array.filter((item, index) => array.indexOf(item) === index);\n}\n\n// Rounding methods for .closest()\nconst closestRounding = {\n    none: 0,\n    ceil: 1,\n    floor: 2,\n};\nexport { closestRounding };\n\n/**\n * Get the closest value in an array\n * @param {array} array\n * @param {number} value\n * @param {number} rounding\n */\nexport function closest(array, value, rounding = closestRounding.none) {\n    if (!is.array(array) || !array.length) {\n        return null;\n    }\n\n    return array.reduce((prev, curr) => {\n        if (Math.abs(curr - value) <= Math.abs(prev - value)) {\n            switch (rounding) {\n                case closestRounding.ceil:\n                    return curr >= value ? curr : prev;\n\n                case closestRounding.floor:\n                    return curr <= value ? curr : prev;\n\n                default:\n                    return curr;\n            }\n        }\n\n        return prev;\n    });\n}\n","// ==========================================================================\n// Local storage wrapper\n// TODO: methods should return promises?\n// ==========================================================================\n\nimport Store from '../classes/Store/Store';\nimport { dedupe } from './arrays';\nimport is from './is';\nimport { extend } from './objects';\nimport parseUrl from './parseUrl';\n\nconst storage = new Map();\n\nconst getKey = url => {\n    if (url === null) {\n        return null;\n    }\n\n    const parsed = parseUrl(url);\n\n    if (parsed === null) {\n        return null;\n    }\n\n    return `${parsed.host}${parsed.pathname}`.replace(/\\/$/, '');\n};\n\nclass Storage {\n    constructor(config) {\n        this.config = {\n            keys: {\n                root: 'selz-js-sdk',\n                carts: 'carts',\n                stores: 'stores',\n            },\n            ttl: 3600, // 1 hour\n            schema: new Date('2018-07-02').getTime(), // Schema version (allowing us to change data schema and invalidate storage)\n\n            ...config,\n        };\n\n        this.purge();\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        if (!window.localStorage) {\n            return false;\n        }\n\n        const key = '___test';\n\n        // Try to use it\n        try {\n            window.localStorage.setItem(key, key);\n            window.localStorage.removeItem(key);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        let data = storage.get(this.config.keys.root);\n\n        // Grab from real storage if we can or use faux-storage\n        if (Storage.supported) {\n            const stored = window.localStorage.getItem(this.config.keys.root);\n\n            if (!is.empty(stored)) {\n                data = JSON.parse(stored);\n            }\n        }\n\n        if (is.empty(data)) {\n            return null;\n        }\n\n        if (!is.empty(key)) {\n            return Object.keys(data).includes(key) ? data[key] : null;\n        }\n\n        return data;\n    }\n\n    set(key, value, merge = false) {\n        // Get current storage\n        const data = this.get() || {};\n\n        // Extend with the new data\n        if (merge && Object.keys(data).includes(key)) {\n            data[key] = extend(data[key], value);\n        } else {\n            data[key] = value;\n        }\n\n        // Set in faux-storage\n        storage.set(this.config.keys.root, data);\n\n        // Bail if no real support\n        if (!Storage.supported) {\n            return;\n        }\n\n        // Set schema version\n        data.schema = this.config.schema;\n\n        // Update storage\n        try {\n            window.localStorage.setItem(this.config.keys.root, JSON.stringify(data));\n        } catch (e) {\n            // Do nothing\n        }\n    }\n\n    // Clean up stale storage\n    purge() {\n        // Check schema\n        const data = this.get();\n\n        // Nothing to purge\n        if (is.empty(data)) {\n            return;\n        }\n\n        // If schema does not match, kill it\n        if (Number(data.schema) !== this.config.schema) {\n            window.localStorage.removeItem(this.config.keys.root);\n            return;\n        }\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n\n        // Nothing to cleanup\n        if (is.empty(stores)) {\n            return;\n        }\n\n        // Check TTL is valid\n        this.set(\n            this.config.keys.stores,\n            stores.filter(store => {\n                const ttl = Number(store.ttl);\n                return ttl > 0 && ttl > Date.now();\n            }),\n        );\n    }\n\n    getCarts(store) {\n        const data = this.get(this.config.keys.carts) || {};\n\n        // If no carts\n        if (is.empty(data)) {\n            return null;\n        }\n\n        // Get all carts\n        if (!is.number(store)) {\n            return data;\n        }\n\n        // Store not found\n        if (!Object.keys(data).includes(store.toString())) {\n            return null;\n        }\n\n        // Get all for a store\n        return data[store.toString()];\n    }\n\n    getCart(store, currency) {\n        const carts = this.getCarts(store);\n\n        // No carts\n        if (is.empty(carts)) {\n            return null;\n        }\n\n        // Get all for a store\n        if (!is.string(currency)) {\n            return carts;\n        }\n\n        // Currency not found\n        if (!Object.keys(carts).includes(currency.toUpperCase())) {\n            return null;\n        }\n\n        return carts[currency.toUpperCase()];\n    }\n\n    setCart(store, currency, cart) {\n        this.set(\n            this.config.keys.carts,\n            {\n                [store]: {\n                    [currency.toUpperCase()]: {\n                        id: cart.id,\n                        active: cart.active,\n                    },\n                },\n            },\n            true,\n        );\n    }\n\n    setCarts(store, carts = {}) {\n        this.set(this.config.keys.carts, {\n            [store]: carts,\n        });\n    }\n\n    getStore(input) {\n        let store = null;\n\n        if (!is.number(input) && !is.url(input)) {\n            return null;\n        }\n\n        const stores = this.get(this.config.keys.stores) || [];\n\n        if (is.number(input)) {\n            store = stores.find(s => is.object(s.data) && s.data.id === input);\n        } else if (is.url(input)) {\n            const key = getKey(input);\n\n            // Bail if invalid URL\n            if (key === null) {\n                return null;\n            }\n\n            store = stores.find(s => is.array(s.urls) && s.urls.includes(key));\n        }\n\n        if (!is.object(store)) {\n            return null;\n        }\n\n        // Check TTL is valid\n        const ttl = Number(store.ttl);\n\n        if (ttl > 0 && ttl < Date.now()) {\n            this.purge();\n            return null;\n        }\n\n        return new Store(store.data);\n    }\n\n    setStore(data, url = null) {\n        // Strip the protocol from the lookup url\n        const key = getKey(url);\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n        let existing = null;\n\n        if (!is.empty(stores)) {\n            // Find existing store by id\n            existing = stores.find(s => s.data.id === data.id);\n        }\n\n        // Extend TTL each\n        const ttl = Date.now() + this.config.ttl;\n\n        // If we found something\n        if (is.object(existing)) {\n            // Update data and extend TTL\n            Object.assign(existing, {\n                data,\n                ttl,\n            });\n\n            if (key !== null) {\n                // Add the URL key for later lookup\n                if (!is.array(existing.urls)) {\n                    existing.urls = [key];\n                } else {\n                    existing.urls.push(key);\n                }\n\n                // Remove duplicate entries\n                const urls = dedupe(existing.urls);\n\n                // Add to existing record\n                Object.assign(existing, {\n                    urls,\n                });\n            }\n        } else {\n            const store = {\n                data,\n                ttl,\n            };\n\n            if (key !== null) {\n                Object.assign(store, {\n                    urls: [key],\n                });\n            }\n\n            stores.push(store);\n        }\n\n        this.set(this.config.keys.stores, stores);\n    }\n}\n\nexport default Storage;\n","/**\n * Parse a string to URL object\n * @param {String} url\n */\nexport default function parseUrl(url) {\n    let string = url;\n\n    // Add the protocol if required\n    if (!/^https?:\\/\\/*/.test(url)) {\n        string = `http://${url}`;\n    }\n\n    try {\n        return new URL(string);\n    } catch (e) {\n        return null;\n    }\n}\n","import { Cart, CartAddItem, CartItem } from './classes/Cart';\nimport Category from './classes/Category';\nimport { Product } from './classes/Product';\nimport Store from './classes/Store';\nimport config from './config';\nimport http from './utils/http';\nimport is from './utils/is';\nimport Storage from './utils/storage';\n\nclass Client {\n    constructor(props) {\n        const { env, store, source } = props;\n\n        this.env = !is.empty(env) ? env : '';\n        this.store = store;\n        this.source = source;\n\n        if (!is.url(store) && !is.number(store)) {\n            throw Error('A store ID or URL is required to create a client');\n        }\n\n        this.storage = new Storage();\n    }\n\n    /**\n     * Get the store ID only\n     */\n    getStoreId() {\n        return new Promise((resolve, reject) => {\n            if (is.number(this.store)) {\n                resolve(this.store);\n                return;\n            }\n\n            if (this.store instanceof Store) {\n                resolve(this.store.id);\n                return;\n            }\n\n            // URL is required\n            if (!is.url(this.store)) {\n                reject(new Error('Url is required for user lookup'));\n            }\n\n            // Get by URL\n            this.getStore()\n                .then(store => {\n                    resolve(store.id);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the Store for current instance\n     */\n    getStore() {\n        return new Promise((resolve, reject) => {\n            // Try from cache by ID or URL\n            if (is.number(this.store) || is.url(this.store)) {\n                const cached = this.storage.getStore(this.store);\n\n                // Return cached if we have it\n                if (cached !== null && cached instanceof Store) {\n                    resolve(cached);\n                    return;\n                }\n            }\n\n            // If already fetched\n            if (this.store instanceof Store) {\n                resolve(this.store);\n                return;\n            }\n\n            // Fetch from remote by ID or URL\n            const url = config.urls.store(this.env, this.store);\n\n            http.get(url)\n                .then(store => {\n                    this.setStore(store);\n                    resolve(this.store);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the store details\n     * @param {object} store\n     */\n    setStore(store) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Store reference to lookup URL\n        const url = is.url(this.store) ? this.store : null;\n\n        // Map to Store\n        this.store = new Store(store);\n\n        // Add to storage for cache\n        this.storage.setStore(this.store, url);\n    }\n\n    /**\n     * Get product data\n     * @param {String} url - Short or full URL for a product\n     */\n    getProduct(url) {\n        return new Promise((resolve, reject) => {\n            http.get(config.urls.product(this.env, url))\n                .then(json => {\n                    if (!(this.store instanceof Store)) {\n                        this.setStore(json.store);\n                    }\n\n                    resolve(new Product(this, json));\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all products\n     */\n    getProducts(keyword = '', category = '', page = 1) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    http.get(\n                        config.urls.products(\n                            this.env,\n                            id,\n                            !is.empty(keyword) ? keyword : '',\n                            is.string(category) ? category : '',\n                            !is.number(page) || page < 1 ? 1 : page,\n                        ),\n                    )\n                        .then(json => {\n                            resolve({\n                                ...json,\n                                products: json.products.map(p => new Product(this, p)),\n                            });\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all categories\n     */\n    getCategories() {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    http.get(config.urls.categories(this.env, id))\n                        .then(json => {\n                            resolve({\n                                ...json,\n                                categories: json.categories.map(c => new Category(c)),\n                            });\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Buy a product\n     * @param {Object} item - The cart item\n     * @returns {Cart}\n     */\n    buy(item) {\n        return new Promise((resolve, reject) => {\n            if (is.empty(item)) {\n                reject(new Error('A cart item is required'));\n                return;\n            }\n\n            // Map the cart item if required\n            let cartItem = item;\n            if (is.object(item) || item instanceof Product) {\n                cartItem = new CartAddItem(item);\n            }\n\n            if (!(cartItem instanceof CartAddItem)) {\n                reject(new Error('A valid cart item is required'));\n            }\n\n            http.post(config.urls.buy(this.env), cartItem)\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Cache store\n                    this.setStore(cart.store);\n\n                    resolve(cart);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Create a new shopping cart\n     * @param {String} currency - ISO currency code\n     * @param {String} discount - Discount code\n     */\n    createCart(currency, discount) {\n        return new Promise((resolve, reject) => {\n            if (is.empty(currency)) {\n                reject(new Error('currency is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n\n                    http.post(config.urls.createCart(this.env, id), {\n                        currency: currencyCode,\n                        discount: !is.empty(discount) ? discount : null,\n                        source: this.source,\n                    })\n                        .then(json => {\n                            const cart = new Cart(this, json);\n\n                            // Store reference to cart id for later\n                            this.storage.setCart(id, currencyCode, cart);\n\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart or create one if needed\n     * @param {String} currency - The shopping cart ISO currency code\n     */\n    getCartId(currency) {\n        return new Promise((resolve, reject) => {\n            if (!is.currencyCode(currency)) {\n                reject(new Error('A valid currency code is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n                    const currentCart = this.storage.getCart(id, currencyCode);\n\n                    // Create cart if it doesn't exist\n                    if (is.empty(currentCart)) {\n                        this.createCart(currencyCode)\n                            .then(cart => resolve(cart.id))\n                            .catch(reject);\n                    } else {\n                        resolve(currentCart.id);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart\n     * @param {String} input - The shopping cart ISO currency code or cart ID\n     */\n    getCart(input) {\n        return new Promise((resolve, reject) => {\n            const isCurrency = is.currencyCode(input);\n            const isObjectId = is.objectId(input);\n\n            if (!isCurrency && !isObjectId) {\n                reject(new Error('A valid currency code or cart id are required'));\n                return;\n            }\n\n            if (isCurrency) {\n                const currencyCode = input.toUpperCase();\n\n                this.getCartId(currencyCode)\n                    .then(id => {\n                        if (is.empty(id)) {\n                            reject(new Error(`Could not find matching cart for currency code '${currencyCode}'`));\n                            return;\n                        }\n\n                        this.getCart(id)\n                            .then(cart => {\n                                // Update store\n                                this.setStore(cart.store);\n\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    })\n                    .catch(reject);\n            } else {\n                http.get(config.urls.getCart(this.env, input))\n                    .then(json => {\n                        const activeId = this.getActiveCart();\n                        const cart = new Cart(this, json, json.id === activeId);\n\n                        // Update store\n                        this.setStore(cart.store);\n\n                        resolve(cart);\n                    })\n                    .catch(reject);\n            }\n        });\n    }\n\n    /**\n     * Get all current carts\n     */\n    getCarts(validate = true) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (is.empty(carts)) {\n                        resolve(null);\n                        return;\n                    }\n\n                    // Check the carts still exist in the server\n                    if (validate) {\n                        const ids = Object.keys(carts).map(currency => carts[currency].id);\n\n                        http.get(config.urls.checkCarts(this.env, ids.join(',')))\n                            .then(json => {\n                                // Remove non existant carts\n                                Object.entries(json).forEach(([cartId, exists]) => {\n                                    if (!exists) {\n                                        const currency = Object.keys(carts).find(c => carts[c].id === cartId);\n                                        delete carts[currency];\n                                    }\n                                });\n\n                                // Store again\n                                this.storage.setCarts(id, carts);\n\n                                // Set active\n                                if (!Object.values(carts).find(cart => cart.active)) {\n                                    this.setActiveCart()\n                                        .then(resolve)\n                                        .catch(reject);\n                                } else {\n                                    resolve(carts);\n                                }\n                            })\n                            .catch(reject);\n                    } else {\n                        resolve(carts);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the active cart based on currency\n     * @param {String} input - The shopping cart ISO currency code or cart ID\n     */\n    setActiveCart(input = null) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    this.getCarts(false).then(data => {\n                        const carts = data;\n\n                        // No carts\n                        if (is.empty(carts)) {\n                            resolve(null);\n                            return;\n                        }\n\n                        // Currency code was passed...\n                        if (is.currencyCode(input)) {\n                            const currencyCode = input.toUpperCase();\n                            const currencies = Object.keys(carts);\n\n                            // Bail if not included\n                            if (!currencies.includes(currencyCode)) {\n                                reject(new Error(`No carts for ${currencyCode}`));\n                                return;\n                            }\n\n                            // Set active\n                            currencies.forEach(currency => {\n                                carts[currency].active = currency === currencyCode;\n                            });\n                        } else {\n                            // Set to id if specified, otherwise first\n                            const cartId = is.objectId(input) ? input : carts[Object.keys(carts)[0]].id;\n\n                            // Set active\n                            Object.keys(carts).forEach(currency => {\n                                const cart = carts[currency];\n                                cart.active = cart.id === cartId;\n                            });\n                        }\n\n                        // Store again\n                        this.storage.setCarts(id, carts);\n\n                        resolve(carts);\n                    });\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the current active cart\n     */\n    getActiveCart(fetch = false) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (!Object.keys(carts).length) {\n                        resolve(null);\n                        return;\n                    }\n\n                    const active = Object.values(carts).find(cart => cart.active);\n\n                    if (!active) {\n                        resolve(null);\n                        return;\n                    }\n\n                    if (!fetch) {\n                        resolve(active.id);\n                        return;\n                    }\n\n                    this.getCart(active.id)\n                        .then(resolve)\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Add a product to a cart\n     * @param {String} id - The cart ID\n     * @param {Object} item - The cart item\n     */\n    addToCart(id, item) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(item)) {\n                reject(new Error('A cart item is required'));\n                return;\n            }\n\n            // Map the cart item if required\n            let cartItem = item;\n            if (is.object(item) || item instanceof Product) {\n                cartItem = new CartAddItem(item);\n            }\n\n            if (!(cartItem instanceof CartAddItem)) {\n                reject(new Error('A valid cart item is required'));\n            }\n\n            http.post(config.urls.addToCart(this.env, id), cartItem)\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Update an items quantity in the shopping cart\n     * @param {String} id - The shopping cart ID\n     * @param {String} index - The shopping cart item quid\n     * @param {Number} quantity - Desired quantity\n     */\n    updateCartItemQuantity(id, index, quantity = 1) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.updateCartItemQuantity(this.env, id), { index, quantity })\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Remove a product from a cart\n     * @param {String} id - The shopping cart id\n     * @param {String} index - The shopping cart item guid\n     */\n    removeFromCart(id, index) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.removeFromCart(this.env, id), { index })\n                .then(json => {\n                    // If there's actually a cart left, map it\n                    if (!is.empty(json)) {\n                        const cart = new Cart(this, json, true);\n\n                        // Set the active cart\n                        this.setActiveCart(cart.id)\n                            .then(() => {\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    } else {\n                        // Otherwise, update carts (as one removed)\n                        this.getCarts()\n                            .then(() => resolve(null))\n                            .catch(reject);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n}\n\nexport { Product, Category, Cart, CartItem, CartAddItem, Store };\n\nexport default Client;\n"]}