{"version":3,"sources":["src/client.js","src/models/Product.js","src/utils/is.js","src/config.js","src/models/Cart.js","src/models/Category.js","src/models/Store.js","src/utils/strings.js","src/utils/form-data.js","src/utils/objects.js","src/utils/fetch.js","src/utils/http.js","src/utils/arrays.js","src/utils/parseUrl.js","src/utils/storage.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","_defineProperty","value","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","Array","isArray","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","client","ProductUrls","a","urls","this","assign","ProductImage","image","ProductMedia","media","cover","ProductFile","file","ProductVariant","variant","selected","arguments","id","ProductVariantAttributeOption","label","ProductVariantAttribute","options","keys","map","Product","product","variantId","is","object","store","array","images","files","has_variants","empty","variants","has_variant_attributes","variant_attributes","attribute","get","find","getConstructor","input","instanceOf","isObject","isNumber","Number","isNaN","isString","String","isBoolean","Boolean","isFunction","Function","isNullOrUndefined","isObjectId","test","isCurrencyCode","isProduct","isEmpty","isUrl","strict","window","URL","string","concat","hostname","e","number","boolean","function","nullOrUndefined","objectId","currencyCode","url","getBase","env","config","products","keyword","category","page","categories","createCart","getCart","checkCarts","ids","addToCart","updateCartItemQuantity","removeFromCart","CartItem","item","cartId","variant_id","Cart","cart","active","items","from","index","Category","Store","replaceAll","replace","RegExp","toString","toTitleCase","text","charAt","toUpperCase","substr","toLowerCase","toPascalCase","buildFormData","formKey","source","form","namespace","data","FormData","forEach","File","append","extend","b","sources","d","shift","includes","apply","parseJSON","Promise","resolve","reject","JSON","parse","error","defaults","type","body","responseType","fetch","c","xhr","XMLHttpRequest","Error","request","fail","status","addEventListener","response","then","json","success","errors","catch","open","send","queue","http","remove","post","dedupe","filter","indexOf","parseUrl","storage","Map","getKey","parsed","host","pathname","Storage","root","carts","stores","ttl","schema","Date","getTime","purge","supported","stored","localStorage","getItem","merge","set","setItem","stringify","removeItem","now","currency","getCarts","s","existing","Client","getStore","cached","setStore","getStoreId","p","discount","setCart","currentCart","isCurrency","getCartId","activeId","getActiveCart","validate","join","entries","setCarts","values","setActiveCart","currencies","quantity"],"mappings":"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","file":"client.mjs","sourcesContent":["import config from './config';\nimport { Cart, CartItem } from './models/Cart';\nimport Category from './models/Category';\nimport Product from './models/Product';\nimport Store from './models/Store';\nimport http from './utils/http';\nimport is from './utils/is';\nimport Storage from './utils/storage';\n\nclass Client {\n    constructor(props) {\n        const { env, store } = props;\n\n        this.env = !is.empty(env) ? env : '';\n        this.store = store;\n\n        if (!is.url(store) && !is.number(store)) {\n            throw Error('A store ID or URL is required to create a client');\n        }\n\n        this.storage = new Storage();\n    }\n\n    /**\n     * Get the store ID only\n     */\n    getStoreId() {\n        return new Promise((resolve, reject) => {\n            if (is.number(this.store)) {\n                resolve(this.store);\n                return;\n            }\n\n            if (this.store instanceof Store) {\n                resolve(this.store.id);\n                return;\n            }\n\n            // URL is required\n            if (!is.url(this.store)) {\n                reject(new Error('Url is required for user lookup'));\n            }\n\n            // Get by URL\n            this.getStore()\n                .then(store => {\n                    resolve(store.id);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the Store for current instance\n     */\n    getStore() {\n        return new Promise((resolve, reject) => {\n            // Try from cache by ID or URL\n            if (is.number(this.store) || is.url(this.store)) {\n                const cached = this.storage.getStore(this.store);\n\n                // Return cached if we have it\n                if (cached !== null && cached instanceof Store) {\n                    resolve(cached);\n                    return;\n                }\n            }\n\n            // If already fetched\n            if (this.store instanceof Store) {\n                resolve(this.store);\n                return;\n            }\n\n            // Fetch from remote by ID or URL\n            const url = config.urls.store(this.env, this.store);\n\n            http.get(url)\n                .then(store => {\n                    this.setStore(store);\n                    resolve(this.store);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the store details\n     * @param {object} store\n     */\n    setStore(store) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Store reference to lookup URL\n        const url = is.url(this.store) ? this.store : null;\n\n        // Map to Store\n        this.store = new Store(store);\n\n        // Add to storage for cache\n        this.storage.setStore(this.store, url);\n    }\n\n    /**\n     * Get product data\n     * @param {String} url - Short or full URL for a product\n     */\n    getProduct(url) {\n        return new Promise((resolve, reject) => {\n            http.get(config.urls.product(this.env, url))\n                .then(json => {\n                    if (!(this.store instanceof Store)) {\n                        this.setStore(json.store);\n                    }\n\n                    resolve(new Product(this, json));\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all products\n     */\n    getProducts(keyword = '', category = '', page = 1) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    http.get(\n                        config.urls.products(\n                            this.env,\n                            id,\n                            !is.empty(keyword) ? keyword : '',\n                            is.objectId(category) ? category : '',\n                            !is.number(page) || page < 1 ? 1 : page,\n                        ),\n                    )\n                        .then(json => {\n                            resolve(\n                                Object.assign(json, {\n                                    products: json.products.map(p => new Product(this, p)),\n                                }),\n                            );\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all categories\n     */\n    getCategories() {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    http.get(config.urls.categories(this.env, id))\n                        .then(json => {\n                            resolve(\n                                Object.assign(json, {\n                                    categories: json.categories.map(c => new Category(c)),\n                                }),\n                            );\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Create a new shopping cart\n     * @param {String} currency - ISO currency code\n     * @param {String} discount - Discount code\n     */\n    createCart(currency, discount) {\n        return new Promise((resolve, reject) => {\n            if (is.empty(currency)) {\n                reject(new Error('currency is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n\n                    http.post(config.urls.createCart(this.env, id), {\n                        currency: currencyCode,\n                        discount: !is.empty(discount) ? discount : null,\n                    })\n                        .then(json => {\n                            const cart = new Cart(this, json);\n\n                            // Store reference to cart id for later\n                            this.storage.setCart(id, currencyCode, cart);\n\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart or create one if needed\n     * @param {String} currency - The shopping cart ISO currency code\n     */\n    getCartId(currency) {\n        return new Promise((resolve, reject) => {\n            if (!is.currencyCode(currency)) {\n                reject(new Error('A valid currency code is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n                    const currentCart = this.storage.getCart(id, currencyCode);\n\n                    // Create cart if it doesn't exist\n                    if (is.empty(currentCart)) {\n                        this.createCart(currencyCode)\n                            .then(cart => resolve(cart.id))\n                            .catch(reject);\n                    } else {\n                        resolve(currentCart.id);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart\n     * @param {String} input - The shopping cart ISO currency code or cart ID\n     */\n    getCart(input) {\n        return new Promise((resolve, reject) => {\n            const isCurrency = is.currencyCode(input);\n            const isObjectId = is.objectId(input);\n\n            if (!isCurrency && !isObjectId) {\n                reject(new Error('A valid currency code or cart id are required'));\n                return;\n            }\n\n            if (isCurrency) {\n                const currencyCode = input.toUpperCase();\n\n                this.getCartId(currencyCode)\n                    .then(id => {\n                        if (is.empty(id)) {\n                            reject(new Error(`Could not find matching cart for currency code '${currencyCode}'`));\n                            return;\n                        }\n\n                        this.getCart(id)\n                            .then(cart => {\n                                // Update store\n                                this.setStore(cart.store);\n\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    })\n                    .catch(reject);\n            } else {\n                http.get(config.urls.getCart(this.env, input))\n                    .then(json => {\n                        const activeId = this.getActiveCart();\n                        const cart = new Cart(this, json, json.id === activeId);\n\n                        // Update store\n                        this.setStore(cart.store);\n\n                        resolve(cart);\n                    })\n                    .catch(reject);\n            }\n        });\n    }\n\n    /**\n     * Get all current carts\n     */\n    getCarts(validate = true) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (is.empty(carts)) {\n                        resolve(null);\n                        return;\n                    }\n\n                    // Check the carts still exist in the server\n                    if (validate) {\n                        const ids = Object.keys(carts).map(currency => carts[currency].id);\n\n                        http.get(config.urls.checkCarts(this.env, ids.join(',')))\n                            .then(json => {\n                                // Remove non existant carts\n                                Object.entries(json).forEach(([cartId, exists]) => {\n                                    if (!exists) {\n                                        const currency = Object.keys(carts).find(c => carts[c].id === cartId);\n                                        delete carts[currency];\n                                    }\n                                });\n\n                                // Store again\n                                this.storage.setCarts(id, carts);\n\n                                // Set active\n                                if (!Object.values(carts).find(cart => cart.active)) {\n                                    this.setActiveCart()\n                                        .then(resolve)\n                                        .catch(reject);\n                                } else {\n                                    resolve(carts);\n                                }\n                            })\n                            .catch(reject);\n                    } else {\n                        resolve(carts);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the active cart based on currency\n     * @param {String} input - The shopping cart ISO currency code or cart ID\n     */\n    setActiveCart(input = null) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    this.getCarts(false).then(data => {\n                        const carts = data;\n\n                        // No carts\n                        if (is.empty(carts)) {\n                            resolve(null);\n                            return;\n                        }\n\n                        // Currency code was passed...\n                        if (is.currencyCode(input)) {\n                            const currencyCode = input.toUpperCase();\n                            const currencies = Object.keys(carts);\n\n                            // Bail if not included\n                            if (!currencies.includes(currencyCode)) {\n                                reject(new Error(`No carts for ${currencyCode}`));\n                                return;\n                            }\n\n                            // Set active\n                            currencies.forEach(currency => {\n                                carts[currency].active = currency === currencyCode;\n                            });\n                        } else {\n                            // Set to id if specified, otherwise first\n                            const cartId = is.objectId(input) ? input : carts[Object.keys(carts)[0]].id;\n\n                            // Set active\n                            Object.keys(carts).forEach(currency => {\n                                const cart = carts[currency];\n                                cart.active = cart.id === cartId;\n                            });\n                        }\n\n                        // Store again\n                        this.storage.setCarts(id, carts);\n\n                        resolve(carts);\n                    });\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the current active cart\n     */\n    getActiveCart(fetch = false) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (!Object.keys(carts).length) {\n                        resolve(null);\n                        return;\n                    }\n\n                    const active = Object.values(carts).find(cart => cart.active);\n\n                    if (!active) {\n                        resolve(null);\n                        return;\n                    }\n\n                    if (!fetch) {\n                        resolve(active.id);\n                        return;\n                    }\n\n                    this.getCart(active.id)\n                        .then(resolve)\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Add a product to a cart\n     * @param {String} id - The cart ID\n     * @param {Object} product - The product details\n     */\n    addToCart(id, product) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(product)) {\n                reject(new Error('A valid product is required'));\n                return;\n            }\n\n            http.post(config.urls.addToCart(this.env, id), product)\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Update an items quantity in the shopping cart\n     * @param {String} id - The shopping cart ID\n     * @param {String} index - The shopping cart item quid\n     * @param {Number} quantity - Desired quantity\n     */\n    updateCartItemQuantity(id, index, quantity = 1) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.updateCartItemQuantity(this.env, id), { index, quantity })\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Remove a product from a cart\n     * @param {String} id - The shopping cart id\n     * @param {String} index - The shopping cart item guid\n     */\n    removeFromCart(id, index) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.removeFromCart(this.env, id), { index })\n                .then(json => {\n                    // If there's actually a cart left, map it\n                    if (!is.empty(json)) {\n                        const cart = new Cart(this, json, true);\n\n                        // Set the active cart\n                        this.setActiveCart(cart.id)\n                            .then(() => {\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    } else {\n                        // Otherwise, update carts (as one removed)\n                        this.getCarts()\n                            .then(() => resolve(null))\n                            .catch(reject);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n}\n\nexport { Product, Category, Cart, CartItem, Store };\n\nexport default Client;\n","import is from '../utils/is';\n\nlet client = null;\n\nclass ProductUrls {\n    constructor(urls) {\n        // Take all properties by default\n        Object.assign(this, urls);\n    }\n}\n\nclass ProductImage {\n    constructor(image) {\n        // Take all properties by default\n        Object.assign(this, image);\n    }\n}\n\nclass ProductMedia {\n    constructor(media) {\n        // Take all properties by default\n        Object.assign(this, media);\n\n        // Map cover image\n        this.cover = new ProductImage(media.cover);\n    }\n}\n\nclass ProductFile {\n    constructor(file) {\n        // Take all properties by default\n        Object.assign(this, file);\n    }\n}\n\nclass ProductVariant {\n    constructor(variant, selected = '') {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        this.selected = variant.id === selected;\n    }\n}\n\nclass ProductVariantAttributeOption {\n    constructor(id, label) {\n        this.id = id;\n        this.label = label;\n    }\n}\n\nclass ProductVariantAttribute {\n    constructor(variant) {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        // Map options\n        this.options = Object.keys(variant.options).map(\n            id => new ProductVariantAttributeOption(id, variant.options[id]),\n        );\n    }\n}\n\nclass Product {\n    constructor(instance, product, variantId = '') {\n        if (!is.object(product) && !is.product(product)) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, product);\n\n        // Map store\n        this.store = client.store;\n\n        // Product URLs\n        if (is.object(product.urls)) {\n            this.urls = new ProductUrls(product.urls);\n        }\n\n        // Media (Video, YouTube, Vimeo, Audio)\n        if (is.object(product.media)) {\n            this.media = new ProductMedia(product.media);\n        }\n\n        // Images\n        if (is.array(product.images)) {\n            this.images = product.images.map(image => new ProductImage(image));\n        }\n\n        // Files for digital products\n        if (is.array(product.files)) {\n            this.files = product.files.map(file => new ProductFile(file));\n        }\n\n        // Variants\n        if (product.has_variants) {\n            const selected = !is.empty(variantId) ? variantId : product.variants[0].id;\n            this.variants = product.variants.map(variant => new ProductVariant(variant, selected));\n        }\n        if (product.has_variant_attributes) {\n            this.variant_attributes = product.variant_attributes.map(\n                attribute => new ProductVariantAttribute(attribute),\n            );\n        }\n    }\n\n    // eslint-disable-next-line camelcase\n    get selected_variant() {\n        if (is.empty(this.variants)) {\n            return null;\n        }\n\n        return this.variants.find(variant => variant.selected);\n    }\n}\n\nexport default Product;\n","// ==========================================================================\n// Type checking\n// ==========================================================================\n\nimport Product from '../models/Product';\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\nconst isArray = input => Array.isArray(input);\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObjectId = input => isString(input) && /^[a-f\\d]{24}$/i.test(input);\nconst isCurrencyCode = input => isString(input) && /^[A-z]{3}$/.test(input);\nconst isProduct = input => getConstructor(input) === Product && Object.keys(input).length > 0;\n\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nconst isUrl = (input, strict = false) => {\n    // Accept a URL object\n    if (instanceOf(input, window.URL)) {\n        return true;\n    }\n\n    // Add the protocol if required\n    let string = input;\n    if (!strict && !/^https?:\\/\\/*/.test(input)) {\n        string = `http://${input}`;\n    }\n\n    try {\n        return !isEmpty(new URL(string).hostname);\n    } catch (e) {\n        return false;\n    }\n};\n\nconst is = {\n    array: isArray,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    nullOrUndefined: isNullOrUndefined,\n    objectId: isObjectId,\n    currencyCode: isCurrencyCode,\n    product: isProduct,\n    url: isUrl,\n    empty: isEmpty,\n};\n\nexport default is;\n","import is from './utils/is';\n\nconst getBase = env => `https://${is.empty(env) ? 'sdk.selz.com' : `${env}/sdk`}/`;\n\nconst config = {\n    urls: {\n        /**\n         * Get URL for product data by URL\n         * @param {String} env - Environment (for internal use)\n         * @param {String} url - Short or full URL for a product\n         */\n        product(env, url = '') {\n            return `${getBase(env)}products/find?url=${url}`;\n        },\n\n        /**\n         * Get URL for all products by store ID\n         * @param {String} env - Environment (for internal use)\n         * @param {Number|String} id - The store ID\n         * @param {String} keyword - Search keyword\n         * @param {ObjectId|String} category - Category ID or relative path\n         * @param {Number} page - Page to fetch\n         */\n        products(env, id, keyword = '', category = '', page = 1) {\n            return `${getBase(env)}products/all/${id}?q=${keyword}&c=${category}&p=${page}`;\n        },\n\n        /**\n         * Get all categories for a given store ID\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - The store ID\n         */\n        categories(env, id) {\n            return `${getBase(env)}categories/${id}`;\n        },\n\n        /**\n         * Get URL for finding a store by URL or ID\n         * @param {String} env - Environment (for internal use)\n         * @param {Number|String} input - The ID or URL to lookup\n         */\n        store(env, input = null) {\n            if (is.number(input)) {\n                return `${getBase(env)}store/find/${input}`;\n            }\n\n            return `${getBase(env)}store/find?url=${input}`;\n        },\n\n        /**\n         * Create a new cart\n         * @param {String} env - Environment (for internal use)\n         * @param {Number} id - Store ID\n         */\n        createCart(env, id = '') {\n            return `${getBase(env)}cart/create/${id}`;\n        },\n\n        /**\n         * Get cart from ID\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        getCart(env, id = '') {\n            return `${getBase(env)}cart/${id}`;\n        },\n\n        /**\n         * Check carts still exist server side\n         * @param {String} env - Environment (for internal use)\n         * @param {Number} id - Cart IDs\n         */\n        checkCarts(env, ids = '') {\n            return `${getBase(env)}cart/verify?ids=${ids}`;\n        },\n\n        /**\n         * Add product to cart\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        addToCart(env, id = '') {\n            return `${getBase(env)}cart/add/${id}`;\n        },\n\n        /**\n         * Update a cart item quantity\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        updateCartItemQuantity(env, id = '') {\n            return `${getBase(env)}cart/updateitemquantity/${id}`;\n        },\n\n        /**\n         * Remove product from cart\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        removeFromCart(env, id = '') {\n            return `${getBase(env)}cart/remove/${id}`;\n        },\n    },\n};\n\nexport default config;\n","import Product from './Product';\n\nlet client = null;\n\nexport class CartItem {\n    constructor(item, cartId) {\n        this.cartId = cartId;\n\n        // Take all properties by default\n        Object.assign(this, item);\n\n        // Map product\n        this.product = new Product(client, item.product, item.variant_id);\n    }\n}\n\nexport class Cart {\n    constructor(instance, cart, active = false) {\n        if (cart === null) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, cart);\n\n        // Map store\n        this.store = client.store;\n\n        // Set active state\n        this.active = active;\n\n        // Map items\n        this.items = Array.from(cart.items).map(item => new CartItem(item, cart.id));\n    }\n\n    /**\n     * Add a product to this cart\n     * @param {object} product - The product details\n     */\n    add(product) {\n        return client.addToCart(this.id, product);\n    }\n\n    /**\n     * Remove a product from this cart\n     * @param {string} index\n     */\n    remove(index) {\n        return client.removeFromCart(this.id, index);\n    }\n}\n\nexport default Cart;\n","import is from '../utils/is';\n\nclass Category {\n    constructor(category = null) {\n        if (!is.object(category)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, category);\n    }\n}\n\nexport default Category;\n","import is from '../utils/is';\n\nclass Store {\n    constructor(store = null) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, store);\n    }\n}\n\nexport default Store;\n","// ==========================================================================\n// String utils\n// ==========================================================================\n\n// Replace all occurances of a string in a string\nexport function replaceAll(input = '', find = '', replace = '') {\n    return input.replace(\n        new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'),\n        replace.toString(),\n    );\n}\n\n// Convert to title case\nexport function toTitleCase(input = '') {\n    return input.toString().replace(/\\w\\S*/g, text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase());\n}\n\n// Convert string to pascalCase\nexport function toPascalCase(input = '') {\n    let string = input.toString();\n\n    // Convert kebab case\n    string = replaceAll(string, '-', ' ');\n\n    // Convert snake case\n    string = replaceAll(string, '_', ' ');\n\n    // Convert to title case\n    string = toTitleCase(string);\n\n    // Convert to pascal case\n    return replaceAll(string, ' ', '');\n}\n\n// Convert string to pascalCase\nexport function toCamelCase(input = '') {\n    let string = input.toString();\n\n    // Convert to pascal case\n    string = toPascalCase(string);\n\n    // Convert first character to lowercase\n    return string.charAt(0).toLowerCase() + string.slice(1);\n}\n","// ==========================================================================\n// Form Data utils\n// ==========================================================================\n\nimport is from './is';\nimport { toPascalCase } from './strings';\n\n/**\n * Convert an Object to FormData\n * @param {Object} source - source Object\n * @param {FormData} form - existing FormData object\n * @param {String} namespace - namespace for FormData\n */\nconst buildFormData = (source = {}, form, namespace) => {\n    const data = form || new FormData();\n    let formKey;\n\n    // Source must be an object\n    if (!is.object(source)) {\n        return data;\n    }\n\n    // Loop through the object to convert\n    Object.keys(source).forEach(key => {\n        if (namespace) {\n            formKey = `${namespace}[${key}]`;\n        } else {\n            formKey = key;\n        }\n\n        // If the property is an object, but not a File, use recursivity\n        if (typeof source[key] === 'object' && !(source[key] instanceof File)) {\n            buildFormData(source[key], data, key);\n        } else {\n            data.append(toPascalCase(formKey), source[key]);\n        }\n    });\n\n    return data;\n};\n\nexport default buildFormData;\n","// ==========================================================================\n// Extend objects\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Deep extend destination object with N more objects\n * @param {Object} target\n * @param {...Object} sources\n */\nexport function extend(target = {}, ...sources) {\n    if (!sources.length) {\n        return target;\n    }\n\n    const source = sources.shift();\n\n    if (!is.object(source)) {\n        return target;\n    }\n\n    Object.keys(source).forEach(key => {\n        if (is.object(source[key])) {\n            if (!Object.keys(target).includes(key)) {\n                Object.assign(target, { [key]: {} });\n            }\n\n            extend(target[key], source[key]);\n        } else {\n            Object.assign(target, { [key]: source[key] });\n        }\n    });\n\n    return extend(target, ...sources);\n}\n\n/**\n * Safer JSON parsing\n * @param {Object} data\n */\nexport function parseJSON(data = {}) {\n    return new Promise((resolve, reject) => {\n        try {\n            resolve(JSON.parse(data));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// Fetch\n// ==========================================================================\n\nimport buildFormData from './form-data';\nimport { extend, parseJSON } from './objects';\n\nconst defaults = {\n    type: 'GET',\n    body: {},\n    responseType: 'json',\n};\n\n/**\n * Custom immitation fetch using XHR\n * @param {string} url - The URL of the endpoint\n * @param {object} options - Object of options for the request\n */\nexport default function(url, options = {}) {\n    const { type, body, responseType } = extend({}, defaults, options);\n\n    return new Promise((resolve, reject) => {\n        try {\n            const xhr = new XMLHttpRequest();\n\n            // Check for CORS support\n            if (!('withCredentials' in xhr)) {\n                const error = new Error('No CORS support');\n                error.request = xhr;\n                throw error;\n            }\n\n            // Handle failures\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status\n            const fail = () => {\n                const error = new Error(xhr.status);\n                error.request = xhr;\n                reject(error);\n            };\n\n            // Successfully made the request\n            xhr.addEventListener('load', () => {\n                const { response } = xhr;\n\n                // Something went wrong either with the request or server\n                if (xhr.status >= 400) {\n                    fail();\n                    return;\n                }\n\n                // Parse JSON responses\n                if (responseType === 'json') {\n                    parseJSON(response)\n                        .then(json => {\n                            if (json.success) {\n                                resolve(json.data);\n                            } else {\n                                const error = new Error('Request failed');\n                                error.errors = json.errors;\n                                reject(error);\n                            }\n                        })\n                        .catch(reject);\n                } else {\n                    resolve(response);\n                }\n            });\n\n            // Request failed\n            xhr.addEventListener('error', fail);\n\n            // Start the request\n            xhr.open(type, url, true);\n\n            // Set the required response type\n            // 'json' responseType is much slower, so we parse later\n            // https://github.com/arendjr/fetch-vs-xhr-perf\n            if (responseType !== 'json') {\n                xhr.responseType = responseType;\n            }\n\n            // Send data if passed\n            xhr.send(buildFormData(body));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// Common fetch actions\n// ==========================================================================\n\nimport fetch from './fetch';\n\nconst queue = {};\n\nconst http = {\n    /**\n     * GET remote URL and parse as JSON\n     * @param {string} url - The endpoint URL\n     */\n    get(url) {\n        // Queue requests to prevent hammering\n        if (!Object.keys(queue).includes(url)) {\n            queue[url] = fetch(url);\n\n            const remove = () => {\n                delete queue[url];\n            };\n\n            // Remove from queue on completed\n            queue[url].then(remove).catch(remove);\n        }\n\n        return queue[url];\n    },\n\n    /**\n     * POST to remote URL and parse as JSON\n     * @param {string} url - The endpoint URL\n     * @param {object} data - The POST data payload\n     */\n    post(url, data = {}) {\n        const options = {\n            type: 'POST',\n            body: data,\n        };\n\n        return fetch(url, options);\n    },\n};\n\nexport default http;\n","// ==========================================================================\n// Array utils\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Remove duplicates in an array\n * @param {array} array\n */\nexport function dedupe(array) {\n    if (!is.array(array)) {\n        return array;\n    }\n\n    return array.filter((item, index) => array.indexOf(item) === index);\n}\n\n// Rounding methods for .closest()\nconst closestRounding = {\n    none: 0,\n    ceil: 1,\n    floor: 2,\n};\nexport { closestRounding };\n\n/**\n * Get the closest value in an array\n * @param {array} array\n * @param {number} value\n * @param {number} rounding\n */\nexport function closest(array, value, rounding = closestRounding.none) {\n    if (!is.array(array) || !array.length) {\n        return null;\n    }\n\n    return array.reduce((prev, curr) => {\n        if (Math.abs(curr - value) <= Math.abs(prev - value)) {\n            switch (rounding) {\n                case closestRounding.ceil:\n                    return curr >= value ? curr : prev;\n\n                case closestRounding.floor:\n                    return curr <= value ? curr : prev;\n\n                default:\n                    return curr;\n            }\n        }\n\n        return prev;\n    });\n}\n","/**\n * Parse a string to URL object\n * @param {String} url\n */\nexport default function parseUrl(url) {\n    let string = url;\n\n    // Add the protocol if required\n    if (!/^https?:\\/\\/*/.test(url)) {\n        string = `http://${url}`;\n    }\n\n    try {\n        return new URL(string);\n    } catch (e) {\n        return null;\n    }\n}\n","// ==========================================================================\n// Local storage wrapper\n// TODO: methods should return promises?\n// ==========================================================================\n\nimport Store from '../models/Store';\nimport { dedupe } from './arrays';\nimport is from './is';\nimport { extend } from './objects';\nimport parseUrl from './parseUrl';\n\nconst storage = new Map();\n\nconst getKey = url => {\n    if (url === null) {\n        return null;\n    }\n\n    const parsed = parseUrl(url);\n\n    if (parsed === null) {\n        return null;\n    }\n\n    return `${parsed.host}${parsed.pathname}`.replace(/\\/$/, '');\n};\n\nclass Storage {\n    constructor(config) {\n        this.config = Object.assign(\n            {\n                keys: {\n                    root: 'selz-js-sdk',\n                    carts: 'carts',\n                    stores: 'stores',\n                },\n                ttl: 3600, // 1 hour\n                schema: new Date('2018-07-02').getTime(), // Schema version (allowing us to change data schema and invalidate storage)\n            },\n            config,\n        );\n\n        this.purge();\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        if (!window.localStorage) {\n            return false;\n        }\n\n        const key = '___test';\n\n        // Try to use it\n        try {\n            window.localStorage.setItem(key, key);\n            window.localStorage.removeItem(key);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        let data = storage.get(this.config.keys.root);\n\n        // Grab from real storage if we can or use faux-storage\n        if (Storage.supported) {\n            const stored = window.localStorage.getItem(this.config.keys.root);\n\n            if (!is.empty(stored)) {\n                data = JSON.parse(stored);\n            }\n        }\n\n        if (is.empty(data)) {\n            return null;\n        }\n\n        if (!is.empty(key)) {\n            return Object.keys(data).includes(key) ? data[key] : null;\n        }\n\n        return data;\n    }\n\n    set(key, value, merge = false) {\n        // Get current storage\n        const data = this.get() || {};\n\n        // Extend with the new data\n        if (merge && Object.keys(data).includes(key)) {\n            data[key] = extend(data[key], value);\n        } else {\n            data[key] = value;\n        }\n\n        // Set in faux-storage\n        storage.set(this.config.keys.root, data);\n\n        // Bail if no real support\n        if (!Storage.supported) {\n            return;\n        }\n\n        // Set schema version\n        data.schema = this.config.schema;\n\n        // Update storage\n        try {\n            window.localStorage.setItem(this.config.keys.root, JSON.stringify(data));\n        } catch (e) {\n            // Do nothing\n        }\n    }\n\n    // Clean up stale storage\n    purge() {\n        // Check schema\n        const data = this.get();\n\n        // Nothing to purge\n        if (is.empty(data)) {\n            return;\n        }\n\n        // If schema does not match, kill it\n        if (Number(data.schema) !== this.config.schema) {\n            window.localStorage.removeItem(this.config.keys.root);\n            return;\n        }\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n\n        // Nothing to cleanup\n        if (is.empty(stores)) {\n            return;\n        }\n\n        // Check TTL is valid\n        this.set(\n            this.config.keys.stores,\n            stores.filter(store => {\n                const ttl = Number(store.ttl);\n                return ttl > 0 && ttl > Date.now();\n            }),\n        );\n    }\n\n    getCarts(store) {\n        const data = this.get(this.config.keys.carts) || {};\n\n        // If no carts\n        if (is.empty(data)) {\n            return null;\n        }\n\n        // Get all carts\n        if (!is.number(store)) {\n            return data;\n        }\n\n        // Store not found\n        if (!Object.keys(data).includes(store.toString())) {\n            return null;\n        }\n\n        // Get all for a store\n        return data[store.toString()];\n    }\n\n    getCart(store, currency) {\n        const carts = this.getCarts(store);\n\n        // No carts\n        if (is.empty(carts)) {\n            return null;\n        }\n\n        // Get all for a store\n        if (!is.string(currency)) {\n            return carts;\n        }\n\n        // Currency not found\n        if (!Object.keys(carts).includes(currency.toUpperCase())) {\n            return null;\n        }\n\n        return carts[currency.toUpperCase()];\n    }\n\n    setCart(store, currency, cart) {\n        this.set(\n            this.config.keys.carts,\n            {\n                [store]: {\n                    [currency.toUpperCase()]: {\n                        id: cart.id,\n                        active: cart.active,\n                    },\n                },\n            },\n            true,\n        );\n    }\n\n    setCarts(store, carts = {}) {\n        this.set(this.config.keys.carts, {\n            [store]: carts,\n        });\n    }\n\n    getStore(input) {\n        let store = null;\n\n        if (!is.number(input) && !is.url(input)) {\n            return null;\n        }\n\n        const stores = this.get(this.config.keys.stores) || [];\n\n        if (is.number(input)) {\n            store = stores.find(s => is.object(s.data) && s.data.id === input);\n        } else if (is.url(input)) {\n            const key = getKey(input);\n\n            // Bail if invalid URL\n            if (key === null) {\n                return null;\n            }\n\n            store = stores.find(s => is.array(s.urls) && s.urls.includes(key));\n        }\n\n        if (!is.object(store)) {\n            return null;\n        }\n\n        // Check TTL is valid\n        const ttl = Number(store.ttl);\n\n        if (ttl > 0 && ttl < Date.now()) {\n            this.purge();\n            return null;\n        }\n\n        return new Store(store.data);\n    }\n\n    setStore(data, url = null) {\n        // Strip the protocol from the lookup url\n        const key = getKey(url);\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n        let existing = null;\n\n        if (!is.empty(stores)) {\n            // Find existing store by id\n            existing = stores.find(s => s.data.id === data.id);\n        }\n\n        // Extend TTL each\n        const ttl = Date.now() + this.config.ttl;\n\n        // If we found something\n        if (is.object(existing)) {\n            // Update data and extend TTL\n            Object.assign(existing, {\n                data,\n                ttl,\n            });\n\n            if (key !== null) {\n                // Add the URL key for later lookup\n                if (!is.array(existing.urls)) {\n                    existing.urls = [key];\n                } else {\n                    existing.urls.push(key);\n                }\n\n                // Remove duplicate entries\n                const urls = dedupe(existing.urls);\n\n                // Add to existing record\n                Object.assign(existing, {\n                    urls,\n                });\n            }\n        } else {\n            const store = {\n                data,\n                ttl,\n            };\n\n            if (key !== null) {\n                Object.assign(store, {\n                    urls: [key],\n                });\n            }\n\n            stores.push(store);\n        }\n\n        this.set(this.config.keys.stores, stores);\n    }\n}\n\nexport default Storage;\n"]}