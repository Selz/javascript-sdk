{"version":3,"file":"client.mjs","sources":["src/utils/is.js","src/config.js","src/models/Product.js","src/models/Cart.js","src/models/Store.js","node_modules/map-obj/index.js","node_modules/upper-case/upper-case.js","node_modules/lower-case/lower-case.js","node_modules/sentence-case/vendor/non-word-regexp.js","node_modules/sentence-case/vendor/camel-case-regexp.js","node_modules/sentence-case/vendor/trailing-digit-regexp.js","node_modules/sentence-case/sentence-case.js","node_modules/camel-case/camel-case.js","node_modules/upper-case-first/upper-case-first.js","node_modules/pascal-case/pascal-case.js","node_modules/pascalcase-keys/index.js","src/utils/fetch.js","src/utils/form-data.js","src/utils/http.js","src/utils/arrays.js","src/utils/extend.js","src/utils/parseUrl.js","src/utils/storage.js","src/client.js"],"sourcesContent":["// ==========================================================================\n// Type checking\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\nconst isArray = input => Array.isArray(input);\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObjectId = input => isString(input) && /^[a-f\\d]{24}$/i.test(input);\nconst isCurrencyCode = input => isString(input) && /^[A-z]{3}$/.test(input);\n\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nconst isUrl = (input, strict = false) => {\n    // Accept a URL object\n    if (instanceOf(input, window.URL)) {\n        return true;\n    }\n\n    // Add the protocol if required\n    let string = input;\n    if (!strict && !/^https?:\\/\\/*/.test(input)) {\n        string = `http://${input}`;\n    }\n\n    try {\n        return !isEmpty(new URL(string).hostname);\n    } catch (e) {\n        return false;\n    }\n};\n\nconst is = {\n    array: isArray,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    nullOrUndefined: isNullOrUndefined,\n    objectId: isObjectId,\n    currencyCode: isCurrencyCode,\n    url: isUrl,\n    empty: isEmpty,\n};\n\nexport default is;\n","import is from './utils/is';\n\nfunction getBase(env) {\n    return `https://${!is.empty(env) ? `${env}-` : ''}selz.com/sdk/`;\n}\n\nconst config = {\n    urls: {\n        /**\n         * Get URL for product data by URL\n         * @param {string} env - Environment (for internal use)\n         * @param {string} url - Short or full URL for a product\n         */\n        product(env, url = '') {\n            return `${getBase(env)}products/find?url=${url}`;\n        },\n\n        /**\n         * Get URL for all products by store ID\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - The store ID\n         * @param {string} query - Search query\n         * @param {number} page - Page to fetch\n         */\n        products(env, id, query = '', page = 1) {\n            return `${getBase(env)}products/all${id}?q=${query}&p=${page}`;\n        },\n\n        /**\n         * Get URL for finding a store by URL or ID\n         * @param {string} env - Environment (for internal use)\n         * @param {number|string} input - The ID or URL to lookup\n         */\n        store(env, input = null) {\n            if (is.number(input)) {\n                return `${getBase(env)}store/find/${input}`;\n            }\n\n            return `${getBase(env)}store/find?url=${input}`;\n        },\n\n        /**\n         * Create a new cart\n         * @param {string} env - Environment (for internal use)\n         * @param {number} id - Store ID\n         */\n        createCart(env, id = '') {\n            return `${getBase(env)}cart/create/${id}`;\n        },\n\n        /**\n         * Get cart from ID\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - Cart ID\n         */\n        getCart(env, id = '') {\n            return `${getBase(env)}cart/${id}`;\n        },\n\n        /**\n         * Check carts still exist server side\n         * @param {string} env - Environment (for internal use)\n         * @param {number} id - Cart IDs\n         */\n        checkCarts(env, ids = '') {\n            return `${getBase(env)}cart/verify?ids=${ids}`;\n        },\n\n        /**\n         * Add product to cart\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - Cart ID\n         */\n        addToCart(env, id = '') {\n            return `${getBase(env)}cart/add/${id}`;\n        },\n\n        /**\n         * Update a cart item quantity\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - Cart ID\n         */\n        updateCartItemQuantity(env, id = '') {\n            return `${getBase(env)}cart/updateitemquantity/${id}`;\n        },\n\n        /**\n         * Remove product from cart\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - Cart ID\n         */\n        removeFromCart(env, id = '') {\n            return `${getBase(env)}cart/remove/${id}`;\n        },\n    },\n};\n\nexport default config;\n","import is from '../utils/is';\n\nlet client = null;\n\nclass ProductUrls {\n    constructor(urls) {\n        // Take all properties by default\n        Object.assign(this, urls);\n    }\n}\n\nclass ProductImage {\n    constructor(image) {\n        // Take all properties by default\n        Object.assign(this, image);\n    }\n}\n\nclass ProductMedia {\n    constructor(media) {\n        // Take all properties by default\n        Object.assign(this, media);\n\n        // Map cover image\n        this.cover = new ProductImage(media.cover);\n    }\n}\n\nclass ProductFile {\n    constructor(file) {\n        // Take all properties by default\n        Object.assign(this, file);\n    }\n}\n\nclass ProductVariant {\n    constructor(variant, selected = '') {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        this.selected = variant.id === selected;\n    }\n}\n\nclass ProductVariantAttributeOption {\n    constructor(id, label) {\n        this.id = id;\n        this.label = label;\n    }\n}\n\nclass ProductVariantAttribute {\n    constructor(variant) {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        // Map options\n        this.options = Object.keys(variant.options).map(\n            id => new ProductVariantAttributeOption(id, variant.options[id]),\n        );\n    }\n}\n\nclass Product {\n    constructor(instance, product, variantId = '') {\n        if (!is.object(product)) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, product);\n\n        // Map store\n        this.store = client.store;\n\n        // Product URLs\n        if (is.object(product.urls)) {\n            this.urls = new ProductUrls(product.urls);\n        }\n\n        // Media (Video, YouTube, Vimeo, Audio)\n        if (is.object(product.media)) {\n            this.media = new ProductMedia(product.media);\n        }\n\n        // Images\n        if (is.array(product.images)) {\n            this.images = product.images.map(image => new ProductImage(image));\n        }\n\n        // Files for digital products\n        if (is.array(product.files)) {\n            this.files = product.files.map(file => new ProductFile(file));\n        }\n\n        // Variants\n        if (is.array(product.variants) && product.variants.length) {\n            const selected = !is.empty(variantId) ? variantId : product.variants[0].id;\n            this.variants = product.variants.map(variant => new ProductVariant(variant, selected));\n        }\n        if (is.array(product.variant_attributes) && product.variant_attributes.length) {\n            this.variant_attributes = product.variant_attributes.map(\n                attribute => new ProductVariantAttribute(attribute),\n            );\n        }\n    }\n\n    // eslint-disable-next-line camelcase\n    get featured_image() {\n        return this.images.find(image => image.is_featured);\n    }\n\n    // eslint-disable-next-line camelcase\n    get is_sold_out() {\n        return this.quantity_available === 0;\n    }\n\n    // eslint-disable-next-line camelcase\n    get selected_variant() {\n        if (is.empty(this.variants)) {\n            return null;\n        }\n\n        return this.variants.find(variant => variant.selected);\n    }\n}\n\nexport default Product;\n","import Product from './Product';\n\nlet client = null;\n\nclass CartItem {\n    constructor(item, cartId) {\n        this.cartId = cartId;\n\n        // Semi private for quantity updates so we can bind to getters/setters\n        let _quantity = item.quantity;\n\n        // Take all properties by default\n        Object.assign(this, item, {\n            _setQuantity: (quantity = 1) => {\n                _quantity = quantity;\n                client.updateCartItemQuantity(this.cartId, this.index, quantity);\n            },\n            _getQuantity: () => _quantity,\n            get quantity() {\n                return this._getQuantity();\n            },\n            set quantity(quantity) {\n                this._setQuantity(quantity);\n            },\n        });\n\n        // Map product\n        this.product = new Product(client, item.product, item.variant_id);\n    }\n}\n\nclass Cart {\n    constructor(instance, cart, active = false) {\n        if (cart === null) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, cart);\n\n        // Map store\n        this.store = client.store;\n\n        // Set active state\n        this.active = active;\n\n        // Map items\n        this.items = Array.from(cart.items).map(item => new CartItem(item, cart.id));\n    }\n\n    /**\n     * Add a product to this cart\n     * @param {object} product - The product details\n     */\n    add(product) {\n        return client.addToCart(this.id, product);\n    }\n\n    /**\n     * Remove a product from this cart\n     * @param {string} index\n     */\n    remove(index) {\n        return client.removeFromCart(this.id, index);\n    }\n}\n\nexport default Cart;\n","import is from '../utils/is';\n\nclass Store {\n    constructor(store = null) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, store);\n    }\n}\n\nexport default Store;\n","'use strict';\nmodule.exports = function (obj, cb) {\n\tvar ret = {};\n\tvar keys = Object.keys(obj);\n\n\tfor (var i = 0; i < keys.length; i++) {\n\t\tvar key = keys[i];\n\t\tvar res = cb(key, obj[key], obj);\n\t\tret[res[0]] = res[1];\n\t}\n\n\treturn ret;\n};\n","/**\n * Special language-specific overrides.\n *\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n *\n * @type {Object}\n */\nvar LANGUAGES = {\n  tr: {\n    regexp: /[\\u0069]/g,\n    map: {\n      '\\u0069': '\\u0130'\n    }\n  },\n  az: {\n    regexp: /[\\u0069]/g,\n    map: {\n      '\\u0069': '\\u0130'\n    }\n  },\n  lt: {\n    regexp: /[\\u0069\\u006A\\u012F]\\u0307|\\u0069\\u0307[\\u0300\\u0301\\u0303]/g,\n    map: {\n      '\\u0069\\u0307': '\\u0049',\n      '\\u006A\\u0307': '\\u004A',\n      '\\u012F\\u0307': '\\u012E',\n      '\\u0069\\u0307\\u0300': '\\u00CC',\n      '\\u0069\\u0307\\u0301': '\\u00CD',\n      '\\u0069\\u0307\\u0303': '\\u0128'\n    }\n  }\n}\n\n/**\n * Upper case a string.\n *\n * @param  {String} str\n * @return {String}\n */\nmodule.exports = function (str, locale) {\n  var lang = LANGUAGES[locale]\n\n  str = str == null ? '' : String(str)\n\n  if (lang) {\n    str = str.replace(lang.regexp, function (m) { return lang.map[m] })\n  }\n\n  return str.toUpperCase()\n}\n","/**\n * Special language-specific overrides.\n *\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n *\n * @type {Object}\n */\nvar LANGUAGES = {\n  tr: {\n    regexp: /\\u0130|\\u0049|\\u0049\\u0307/g,\n    map: {\n      '\\u0130': '\\u0069',\n      '\\u0049': '\\u0131',\n      '\\u0049\\u0307': '\\u0069'\n    }\n  },\n  az: {\n    regexp: /[\\u0130]/g,\n    map: {\n      '\\u0130': '\\u0069',\n      '\\u0049': '\\u0131',\n      '\\u0049\\u0307': '\\u0069'\n    }\n  },\n  lt: {\n    regexp: /[\\u0049\\u004A\\u012E\\u00CC\\u00CD\\u0128]/g,\n    map: {\n      '\\u0049': '\\u0069\\u0307',\n      '\\u004A': '\\u006A\\u0307',\n      '\\u012E': '\\u012F\\u0307',\n      '\\u00CC': '\\u0069\\u0307\\u0300',\n      '\\u00CD': '\\u0069\\u0307\\u0301',\n      '\\u0128': '\\u0069\\u0307\\u0303'\n    }\n  }\n}\n\n/**\n * Lowercase a string.\n *\n * @param  {String} str\n * @return {String}\n */\nmodule.exports = function (str, locale) {\n  var lang = LANGUAGES[locale]\n\n  str = str == null ? '' : String(str)\n\n  if (lang) {\n    str = str.replace(lang.regexp, function (m) { return lang.map[m] })\n  }\n\n  return str.toLowerCase()\n}\n","module.exports = /[^\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\\u0030-\\u0039\\u00B2\\u00B3\\u00B9\\u00BC-\\u00BE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]+/g\n","module.exports = /([\\u0061-\\u007A\\u00B5\\u00DF-\\u00F6\\u00F8-\\u00FF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0561-\\u0587\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7FA\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A])([\\u0041-\\u005A\\u00C0-\\u00D6\\u00D8-\\u00DE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA\\uFF21-\\uFF3A\\u0030-\\u0039\\u00B2\\u00B3\\u00B9\\u00BC-\\u00BE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19])/g\n","module.exports = /([\\u0030-\\u0039\\u00B2\\u00B3\\u00B9\\u00BC-\\u00BE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19])([^\\u0030-\\u0039\\u00B2\\u00B3\\u00B9\\u00BC-\\u00BE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19])/g\n","var lowerCase = require('lower-case')\n\nvar NON_WORD_REGEXP = require('./vendor/non-word-regexp')\nvar CAMEL_CASE_REGEXP = require('./vendor/camel-case-regexp')\nvar TRAILING_DIGIT_REGEXP = require('./vendor/trailing-digit-regexp')\n\n/**\n * Sentence case a string.\n *\n * @param  {String} str\n * @param  {String} locale\n * @param  {String} replacement\n * @return {String}\n */\nmodule.exports = function (str, locale, replacement) {\n  if (str == null) {\n    return ''\n  }\n\n  replacement = replacement || ' '\n\n  function replace (match, index, string) {\n    if (index === 0 || index === (string.length - match.length)) {\n      return ''\n    }\n\n    return replacement\n  }\n\n  str = String(str)\n    // Support camel case (\"camelCase\" -> \"camel Case\").\n    .replace(CAMEL_CASE_REGEXP, '$1 $2')\n    // Support digit groups (\"test2012\" -> \"test 2012\").\n    .replace(TRAILING_DIGIT_REGEXP, '$1 $2')\n    // Remove all non-word characters and replace with a single space.\n    .replace(NON_WORD_REGEXP, replace)\n\n  // Lower case the entire string.\n  return lowerCase(str, locale)\n}\n","var upperCase = require('upper-case')\nvar sentenceCase = require('sentence-case')\n\n/**\n * Camel case a string.\n *\n * @param  {String} string\n * @param  {String} [locale]\n * @return {String}\n */\nmodule.exports = function (string, locale, mergeNumbers) {\n  var result = sentenceCase(string, locale)\n\n  // Replace periods between numeric entities with an underscore.\n  if (!mergeNumbers) {\n    result = result.replace(/(\\d) (?=\\d)/g, '$1_')\n  }\n\n  // Replace spaces between words with an upper cased character.\n  return result.replace(/ (.)/g, function (m, $1) {\n    return upperCase($1, locale)\n  })\n}\n","var upperCase = require('upper-case')\n\n/**\n * Upper case the first character of a string.\n *\n * @param  {String} str\n * @return {String}\n */\nmodule.exports = function (str, locale) {\n  if (str == null) {\n    return ''\n  }\n\n  str = String(str)\n\n  return upperCase(str.charAt(0), locale) + str.substr(1)\n}\n","var camelCase = require('camel-case')\nvar upperCaseFirst = require('upper-case-first')\n\n/**\n * Pascal case a string.\n *\n * @param  {String} string\n * @param  {String} [locale]\n * @return {String}\n */\nmodule.exports = function (string, locale) {\n  return upperCaseFirst(camelCase(string, locale), locale)\n}\n","'use strict'\n\nvar mapObj = require('map-obj')\nvar pascalCase = require('pascal-case')\n\nmodule.exports = function (obj) {\n  return mapObj(obj, function (key, val) {\n    return [pascalCase(key), val]\n  })\n}\n","// ==========================================================================\n// Fetch\n// ==========================================================================\n\n/**\n * Custom fetch wrapper\n * @param {string} url - The URL of the endpoint\n * @param {object} options - Object of options for the request\n */\nexport default function(url, options) {\n    const defaults = {\n        mode: 'cors',\n        redirect: 'follow',\n    };\n\n    return new Promise((resolve, reject) => {\n        const request = new Request(url, Object.assign(defaults, options));\n        request.headers.append('Accept', 'application/json');\n\n        fetch(request)\n            .then(response => {\n                if (response.status >= 200 && response.status < 300) {\n                    try {\n                        response\n                            .json()\n                            .then(json => {\n                                if (json.success) {\n                                    resolve(json.data);\n                                } else {\n                                    const error = new Error('Request failed');\n                                    error.errors = json.errors;\n                                    throw error;\n                                }\n                            })\n                            .catch(reject);\n                    } catch (error) {\n                        throw error;\n                    }\n                } else {\n                    const error = new Error(response.status);\n                    error.response = response;\n                    throw error;\n                }\n            })\n            .catch(reject);\n    });\n}\n","// ==========================================================================\n// Form Data utils\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Convert an Object to FormData\n * @param {object} source - source Object\n * @param {formdata} form - existing FormData object\n * @param {string} namespace - namespace for FormData\n */\nconst buildFormData = (source, form, namespace) => {\n    const data = form || new FormData();\n    let formKey;\n\n    // Source must be an object\n    if (!is.object(source)) {\n        return data;\n    }\n\n    // Loop through the object to convert\n    Object.keys(source).forEach(key => {\n        if (namespace) {\n            formKey = `${namespace}[${key}]`;\n        } else {\n            formKey = key;\n        }\n\n        // If the property is an object, but not a File, use recursivity\n        if (typeof source[key] === 'object' && !(source[key] instanceof File)) {\n            buildFormData(source[key], data, key);\n        } else {\n            data.append(formKey, source[key]);\n        }\n    });\n\n    return data;\n};\n\nexport default buildFormData;\n","// ==========================================================================\n// Common fetch actions\n// ==========================================================================\n\nimport pascalCase from 'pascalcase-keys';\nimport fetch from './fetch';\nimport buildFormData from './form-data';\nimport is from './is';\n\nconst queue = {};\n\nconst http = {\n    /**\n     * GET remote URL and parse as JSON\n     * @param {string} url - The endpoint URL\n     */\n    get(url) {\n        // Queue requests to prevent hammering\n        if (!Object.keys(queue).includes(url)) {\n            queue[url] = fetch(url);\n\n            const remove = () => {\n                delete queue[url];\n            };\n\n            // Remove from queue on completed\n            queue[url].then(remove).catch(remove);\n        }\n\n        return queue[url];\n    },\n\n    /**\n     * POST to remote URL and parse as JSON\n     * @param {string} url - The endpoint URL\n     * @param {object} data - The POST data payload\n     */\n    post(url, data) {\n        const options = {\n            method: 'POST',\n        };\n\n        // Convert POST data to FormData for C#\n        if (is.object(data)) {\n            options.body = buildFormData(pascalCase(data));\n        }\n\n        return fetch(url, options);\n    },\n};\n\nexport default http;\n","// ==========================================================================\n// Array utils\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Remove duplicates in an array\n * @param {array} array\n */\nexport function dedupe(array) {\n    if (!is.array(array)) {\n        return array;\n    }\n\n    return array.filter((item, index) => array.indexOf(item) === index);\n}\n\n// Rounding methods for .closest()\nconst closestRounding = {\n    none: 0,\n    ceil: 1,\n    floor: 2,\n};\nexport { closestRounding };\n\n/**\n * Get the closest value in an array\n * @param {array} array\n * @param {number} value\n * @param {number} rounding\n */\nexport function closest(array, value, rounding = closestRounding.none) {\n    if (!is.array(array) || !array.length) {\n        return null;\n    }\n\n    return array.reduce((prev, curr) => {\n        if (Math.abs(curr - value) <= Math.abs(prev - value)) {\n            switch (rounding) {\n                case closestRounding.ceil:\n                    return curr >= value ? curr : prev;\n\n                case closestRounding.floor:\n                    return curr <= value ? curr : prev;\n\n                default:\n                    return curr;\n            }\n        }\n\n        return prev;\n    });\n}\n","// ==========================================================================\n// Extend objects\n// ==========================================================================\n\nimport is from './is';\n\n// Deep extend destination object with N more objects\nconst extend = (target = {}, ...sources) => {\n    if (!sources.length) {\n        return target;\n    }\n\n    const source = sources.shift();\n\n    if (!is.object(source)) {\n        return target;\n    }\n\n    Object.keys(source).forEach(key => {\n        if (is.object(source[key])) {\n            if (!Object.keys(target).includes(key)) {\n                Object.assign(target, { [key]: {} });\n            }\n\n            extend(target[key], source[key]);\n        } else {\n            Object.assign(target, { [key]: source[key] });\n        }\n    });\n\n    return extend(target, ...sources);\n};\n\nexport default extend;\n","/**\n * Parse a string to URL object\n * @param {String} url\n */\nexport default function parseUrl(url) {\n    let string = url;\n\n    // Add the protocol if required\n    if (!/^https?:\\/\\/*/.test(url)) {\n        string = `http://${url}`;\n    }\n\n    try {\n        return new URL(string);\n    } catch (e) {\n        return null;\n    }\n}\n","// ==========================================================================\n// Local storage wrapper\n// TODO: methods should return promises?\n// ==========================================================================\n\nimport Store from '../models/Store';\nimport { dedupe } from './arrays';\nimport extend from './extend';\nimport is from './is';\nimport parseUrl from './parseUrl';\n\nconst storage = new Map();\n\nconst getKey = url => {\n    if (url === null) {\n        return null;\n    }\n\n    const parsed = parseUrl(url);\n\n    if (parsed === null) {\n        return null;\n    }\n\n    return `${parsed.host}${parsed.pathname}`.replace(/\\/$/, '');\n};\n\nclass Storage {\n    constructor(config) {\n        this.config = Object.assign(\n            {\n                keys: {\n                    root: 'selz-js-sdk',\n                    carts: 'carts',\n                    stores: 'stores',\n                },\n                ttl: 3600, // 1 hour\n                schema: new Date('2018-07-02').getTime(), // Schema version (allowing us to change data schema and invalidate storage)\n            },\n            config,\n        );\n\n        this.purge();\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        if (!window.localStorage) {\n            return false;\n        }\n\n        const key = '___test';\n\n        // Try to use it\n        try {\n            window.localStorage.setItem(key, key);\n            window.localStorage.removeItem(key);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        let data = storage.get(this.config.keys.root);\n\n        // Grab from real storage if we can or use faux-storage\n        if (Storage.supported) {\n            const stored = window.localStorage.getItem(this.config.keys.root);\n\n            if (!is.empty(stored)) {\n                data = JSON.parse(stored);\n            }\n        }\n\n        if (is.empty(data)) {\n            return null;\n        }\n\n        if (!is.empty(key)) {\n            return Object.keys(data).includes(key) ? data[key] : null;\n        }\n\n        return data;\n    }\n\n    set(key, value, merge = false) {\n        // Get current storage\n        const data = this.get() || {};\n\n        // Extend with the new data\n        if (merge && Object.keys(data).includes(key)) {\n            data[key] = extend(data[key], value);\n        } else {\n            data[key] = value;\n        }\n\n        // Set in faux-storage\n        storage.set(this.config.keys.root, data);\n\n        // Bail if no real support\n        if (!Storage.supported) {\n            return;\n        }\n\n        // Set schema version\n        data.schema = this.config.schema;\n\n        // Update storage\n        try {\n            window.localStorage.setItem(this.config.keys.root, JSON.stringify(data));\n        } catch (e) {\n            // Do nothing\n        }\n    }\n\n    // Clean up stale storage\n    purge() {\n        // Check schema\n        const data = this.get();\n\n        // Nothing to purge\n        if (is.empty(data)) {\n            return;\n        }\n\n        // If schema does not match, kill it\n        if (Number(data.schema) !== this.config.schema) {\n            window.localStorage.removeItem(this.config.keys.root);\n            return;\n        }\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n\n        // Nothing to cleanup\n        if (is.empty(stores)) {\n            return;\n        }\n\n        // Check TTL is valid\n        this.set(\n            this.config.keys.stores,\n            stores.filter(store => {\n                const ttl = Number(store.ttl);\n                return ttl > 0 && ttl > Date.now();\n            }),\n        );\n    }\n\n    getCarts(store) {\n        const data = this.get(this.config.keys.carts) || {};\n\n        // If no carts\n        if (is.empty(data)) {\n            return null;\n        }\n\n        // Get all carts\n        if (!is.number(store)) {\n            return data;\n        }\n\n        // Store not found\n        if (!Object.keys(data).includes(store.toString())) {\n            return null;\n        }\n\n        // Get all for a store\n        return data[store.toString()];\n    }\n\n    getCart(store, currency) {\n        const carts = this.getCarts(store);\n\n        // No carts\n        if (is.empty(carts)) {\n            return null;\n        }\n\n        // Get all for a store\n        if (!is.string(currency)) {\n            return carts;\n        }\n\n        // Currency not found\n        if (!Object.keys(carts).includes(currency.toUpperCase())) {\n            return null;\n        }\n\n        return carts[currency.toUpperCase()];\n    }\n\n    setCart(store, currency, cart) {\n        this.set(\n            this.config.keys.carts,\n            {\n                [store]: {\n                    [currency.toUpperCase()]: {\n                        id: cart.id,\n                        active: cart.active,\n                    },\n                },\n            },\n            true,\n        );\n    }\n\n    setCarts(store, carts = {}) {\n        this.set(this.config.keys.carts, {\n            [store]: carts,\n        });\n    }\n\n    getStore(input) {\n        let store = null;\n\n        if (!is.number(input) && !is.url(input)) {\n            return null;\n        }\n\n        const stores = this.get(this.config.keys.stores) || [];\n\n        if (is.number(input)) {\n            store = stores.find(s => is.object(s.data) && s.data.id === input);\n        } else if (is.url(input)) {\n            const key = getKey(input);\n\n            // Bail if invalid URL\n            if (key === null) {\n                return null;\n            }\n\n            store = stores.find(s => is.array(s.urls) && s.urls.includes(key));\n        }\n\n        if (!is.object(store)) {\n            return null;\n        }\n\n        // Check TTL is valid\n        const ttl = Number(store.ttl);\n\n        if (ttl > 0 && ttl < Date.now()) {\n            this.purge();\n            return null;\n        }\n\n        return new Store(store.data);\n    }\n\n    setStore(data, url = null) {\n        // Strip the protocol from the lookup url\n        const key = getKey(url);\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n        let existing = null;\n\n        if (!is.empty(stores)) {\n            // Find existing store by id\n            existing = stores.find(s => s.data.id === data.id);\n        }\n\n        console.warn(existing);\n\n        // Extend TTL each\n        const ttl = Date.now() + this.config.ttl;\n\n        // If we found something\n        if (is.object(existing)) {\n            // Update data and extend TTL\n            Object.assign(existing, {\n                data,\n                ttl,\n            });\n\n            if (key !== null) {\n                // Add the URL key for later lookup\n                if (!is.array(existing.urls)) {\n                    existing.urls = [key];\n                } else {\n                    existing.urls.push(key);\n                }\n\n                // Remove duplicate entries\n                const urls = dedupe(existing.urls);\n\n                // Add to existing record\n                Object.assign(existing, {\n                    urls,\n                });\n            }\n\n            console.warn(existing);\n        } else {\n            const store = {\n                data,\n                ttl,\n            };\n\n            if (key !== null) {\n                Object.assign(store, {\n                    urls: [key],\n                });\n            }\n\n            stores.push(store);\n        }\n\n        this.set(this.config.keys.stores, stores);\n    }\n}\n\nexport default Storage;\n","import config from './config';\nimport Cart from './models/Cart';\nimport Product from './models/Product';\nimport Store from './models/Store';\nimport http from './utils/http';\nimport is from './utils/is';\nimport Storage from './utils/storage';\n\nclass SelzClient {\n    constructor(props) {\n        const { env, store } = props;\n\n        this.env = !is.empty(env) ? env : '';\n        this.store = store;\n\n        if (!is.url(store) && !is.number(store)) {\n            throw Error('A store ID or URL is required to create a client');\n        }\n\n        this.storage = new Storage();\n    }\n\n    /**\n     * Get the store ID only\n     */\n    getStoreId() {\n        return new Promise((resolve, reject) => {\n            if (is.number(this.store)) {\n                resolve(this.store);\n                return;\n            }\n\n            if (this.store instanceof Store) {\n                resolve(this.store.id);\n                return;\n            }\n\n            // URL is required\n            if (!is.url(this.store)) {\n                reject(new Error('Url is required for user lookup'));\n            }\n\n            // Get by URL\n            this.getStore()\n                .then(store => {\n                    resolve(store.id);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the Store for current instance\n     */\n    getStore() {\n        return new Promise((resolve, reject) => {\n            let cached = null;\n\n            // Try from cache by ID or URL\n            if (is.number(this.store) || is.url(this.store)) {\n                cached = this.storage.getStore(this.store);\n            }\n\n            // Return cached if we have it\n            if (!is.empty(cached)) {\n                this.setStore(cached);\n                resolve(this.store);\n                return;\n            }\n\n            // Lookup from remote by ID or URL\n            const url = config.urls.store(this.env, this.store);\n\n            http.get(url)\n                .then(store => {\n                    this.setStore(store);\n                    resolve(this.store);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the store details\n     * @param {object} store\n     */\n    setStore(store) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Store reference to lookup URL\n        const url = is.url(this.store) ? this.store : null;\n\n        // Map to Store\n        this.store = new Store(store);\n\n        // Add to storage for cache\n        this.storage.setStore(this.store, url);\n    }\n\n    /**\n     * Get product data\n     * @param {string} url - Short or full URL for a product\n     */\n    getProduct(url) {\n        return new Promise((resolve, reject) => {\n            http.get(config.urls.product(this.env, url))\n                .then(json => {\n                    if (!(this.store instanceof Store)) {\n                        this.setStore(json.store);\n                    }\n\n                    resolve(new Product(this, json));\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all products\n     */\n    getProducts(query = '', page = 1) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    http.get(config.urls.products(this.env, id, query, page < 1 ? 1 : page))\n                        .then(json => {\n                            resolve(json.map(p => new Product(this, p)));\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Create a new shopping cart\n     * @param {string} currency - ISO currency code\n     * @param {string} [discount] - Discount code\n     */\n    createCart(currency, discount) {\n        return new Promise((resolve, reject) => {\n            if (is.empty(currency)) {\n                reject(new Error('currency is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n\n                    http.post(config.urls.createCart(this.env, id), {\n                        currency: currencyCode,\n                        discount: !is.empty(discount) ? discount : null,\n                    })\n                        .then(json => {\n                            const cart = new Cart(this, json);\n\n                            // Store reference to cart id for later\n                            this.storage.setCart(id, currencyCode, cart);\n\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart or create one if needed\n     * @param {string} currency - The shopping cart ISO currency code\n     */\n    getCartId(currency) {\n        return new Promise((resolve, reject) => {\n            if (!is.currencyCode(currency)) {\n                reject(new Error('A valid currency code is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n                    const currentCart = this.storage.getCart(id, currencyCode);\n\n                    // Create cart if it doesn't exist\n                    if (is.empty(currentCart)) {\n                        this.createCart(currencyCode)\n                            .then(cart => resolve(cart.id))\n                            .catch(reject);\n                    } else {\n                        resolve(currentCart.id);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart\n     * @param {string} input - The shopping cart ISO currency code or cart ID\n     */\n    getCart(input) {\n        return new Promise((resolve, reject) => {\n            const isCurrency = is.currencyCode(input);\n            const isObjectId = is.objectId(input);\n\n            if (!isCurrency && !isObjectId) {\n                reject(new Error('A valid currency code or cart id are required'));\n                return;\n            }\n\n            if (isCurrency) {\n                const currencyCode = input.toUpperCase();\n\n                this.getCartId(currencyCode)\n                    .then(id => {\n                        if (is.empty(id)) {\n                            reject(new Error(`Could not find matching cart for currency code '${currencyCode}'`));\n                            return;\n                        }\n\n                        this.getCart(id)\n                            .then(cart => {\n                                // Set store\n                                if (!(this.store instanceof Store)) {\n                                    this.setStore(cart.store);\n                                }\n\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    })\n                    .catch(reject);\n            } else {\n                http.get(config.urls.getCart(this.env, input))\n                    .then(json => {\n                        const activeId = this.getActiveCart();\n                        const cart = new Cart(this, json, json.id === activeId);\n\n                        // Set store\n                        if (!(this.store instanceof Store)) {\n                            this.setStore(cart.store);\n                        }\n\n                        resolve(cart);\n                    })\n                    .catch(reject);\n            }\n        });\n    }\n\n    /**\n     * Get all current carts\n     */\n    getCarts(validate = true) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (is.empty(carts)) {\n                        resolve(null);\n                        return;\n                    }\n\n                    // Check the carts still exist in the server\n                    if (validate) {\n                        const ids = Object.keys(carts).map(currency => carts[currency].id);\n\n                        http.get(config.urls.checkCarts(this.env, ids.join(',')))\n                            .then(json => {\n                                // Remove non existant carts\n                                Object.entries(json).forEach(([cartId, exists]) => {\n                                    if (!exists) {\n                                        const currency = Object.keys(carts).find(c => carts[c].id === cartId);\n                                        delete carts[currency];\n                                    }\n                                });\n\n                                // Store again\n                                this.storage.setCarts(id, carts);\n\n                                // Set active\n                                if (!Object.values(carts).find(cart => cart.active)) {\n                                    this.setActiveCart()\n                                        .then(resolve)\n                                        .catch(reject);\n                                } else {\n                                    resolve(carts);\n                                }\n                            })\n                            .catch(reject);\n                    } else {\n                        resolve(carts);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the active cart based on currency\n     * @param {string} input - The shopping cart ISO currency code or cart ID\n     */\n    setActiveCart(input = null) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    this.getCarts(false).then(data => {\n                        const carts = data;\n\n                        // No carts\n                        if (is.empty(carts)) {\n                            resolve(null);\n                            return;\n                        }\n\n                        // Currency code was passed...\n                        if (is.currencyCode(input)) {\n                            const currencyCode = input.toUpperCase();\n                            const currencies = Object.keys(carts);\n\n                            // Bail if not included\n                            if (!currencies.includes(currencyCode)) {\n                                reject(new Error(`No carts for ${currencyCode}`));\n                                return;\n                            }\n\n                            // Set active\n                            currencies.forEach(currency => {\n                                carts[currency].active = currency === currencyCode;\n                            });\n                        } else {\n                            // Set to id if specified, otherwise first\n                            const cartId = is.objectId(input) ? input : carts[Object.keys(carts)[0]].id;\n\n                            // Set active\n                            Object.keys(carts).forEach(currency => {\n                                const cart = carts[currency];\n                                cart.active = cart.id === cartId;\n                            });\n                        }\n\n                        // Store again\n                        this.storage.setCarts(id, carts);\n\n                        resolve(carts);\n                    });\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the current active cart\n     */\n    getActiveCart(fetch = false) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (!Object.keys(carts).length) {\n                        resolve(null);\n                        return;\n                    }\n\n                    const active = Object.values(carts).find(cart => cart.active);\n\n                    if (!active) {\n                        resolve(null);\n                        return;\n                    }\n\n                    if (!fetch) {\n                        resolve(active.id);\n                        return;\n                    }\n\n                    this.getCart(active.id)\n                        .then(resolve)\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Add a product to a cart\n     * @param {string} id - The cart ID\n     * @param {object} product - The product details\n     */\n    addToCart(id, product) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(product)) {\n                reject(new Error('A valid product is required'));\n                return;\n            }\n\n            http.post(config.urls.addToCart(this.env, id), product)\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Set store\n                    if (!(this.store instanceof Store)) {\n                        this.setStore(cart.store);\n                    }\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Update an items quantity in the shopping cart\n     * @param {string} id - The shopping cart ID\n     * @param {string} index - The shopping cart item quid\n     * @param {number} quantity - Desired quantity\n     */\n    updateCartItemQuantity(id, index, quantity = 1) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.updateCartItemQuantity(this.env, id), { index, quantity })\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Set store\n                    if (!(this.store instanceof Store)) {\n                        this.setStore(cart.store);\n                    }\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Remove a product from a cart\n     * @param {string} id - The shopping cart id\n     * @param {string} index - The shopping cart item guid\n     */\n    removeFromCart(id, index) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.removeFromCart(this.env, id), { index })\n                .then(json => {\n                    // If there's actually a cart left, map it\n                    if (!is.empty(json)) {\n                        const cart = new Cart(this, json, true);\n\n                        // Set the active cart\n                        this.setActiveCart(cart.id)\n                            .then(() => {\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    } else {\n                        // Otherwise, update carts (as one removed)\n                        this.getCarts()\n                            .then(() => resolve(null))\n                            .catch(reject);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n}\n\nexport default SelzClient;\n"],"names":["getConstructor","input","constructor","instanceOf","Boolean","isArray","Array","isObject","Object","isNumber","Number","isNaN","isString","String","isBoolean","isFunction","Function","isNullOrUndefined","isObjectId","test","isCurrencyCode","isEmpty","length","keys","isUrl","strict","window","URL","string","hostname","e","is","getBase","env","empty","config","url","id","query","page","number","ids","client","ProductUrls","urls","assign","this","ProductImage","image","ProductMedia","media","cover","ProductFile","file","ProductVariant","variant","selected","ProductVariantAttributeOption","label","ProductVariantAttribute","options","map","Product","instance","product","variantId","object","store","array","images","files","variants","variant_attributes","attribute","find","is_featured","quantity_available","CartItem","item","cartId","_quantity","quantity","updateCartItemQuantity","_this","index","_getQuantity","_setQuantity","variant_id","Cart","cart","active","items","from","addToCart","removeFromCart","Store","obj","cb","ret","i","key","res","LANGUAGES","str","locale","lang","replace","regexp","m","toUpperCase","toLowerCase","replacement","CAMEL_CASE_REGEXP","TRAILING_DIGIT_REGEXP","NON_WORD_REGEXP","match","lowerCase","mergeNumbers","result","sentenceCase","$1","upperCase","charAt","substr","upperCaseFirst","camelCase","mapObj","val","pascalCase","defaults","Promise","resolve","reject","request","Request","headers","append","then","response","status","error","Error","json","success","errors","data","catch","buildFormData","source","form","namespace","FormData","formKey","forEach","babelHelpers.typeof","File","queue","http","includes","fetch","remove","body","dedupe","filter","indexOf","extend","sources","target","shift","parseUrl","storage","Map","getKey","parsed","host","pathname","Storage","Date","getTime","purge","get","root","supported","stored","localStorage","getItem","JSON","parse","value","merge","set","schema","setItem","stringify","stores","ttl","now","removeItem","carts","toString","currency","getCarts","s","existing","warn","push","SelzClient","props","getStore","cached","_this2","setStore","_this3","getStoreId","products","_this4","p","discount","currencyCode","post","createCart","_this5","setCart","currentCart","_this6","getCart","isCurrency","objectId","getCartId","_this7","activeId","getActiveCart","validate","_this8","checkCarts","join","entries","c","setCarts","values","setActiveCart","currencies","_this10","_this11","_this12","_this13"],"mappings":"AAIA,IAAMA,eAAiB,mBAAoB,OAAVC,QAAmC,IAAVA,EAAwBA,EAAMC,YAAc,MAChGC,WAAa,SAACF,EAAOC,UAAgBE,QAAQH,GAASC,GAAeD,aAAiBC,IACtFG,QAAU,mBAASC,MAAMD,QAAQJ,IACjCM,SAAW,mBAASP,eAAeC,KAAWO,QAC9CC,SAAW,mBAAST,eAAeC,KAAWS,SAAWA,OAAOC,MAAMV,IACtEW,SAAW,mBAASZ,eAAeC,KAAWY,QAC9CC,UAAY,mBAASd,eAAeC,KAAWG,SAC/CW,WAAa,mBAASf,eAAeC,KAAWe,UAChDC,kBAAoB,mBAAmB,OAAVhB,QAAmC,IAAVA,GACtDiB,WAAa,mBAASN,SAASX,IAAU,iBAAiBkB,KAAKlB,IAC/DmB,eAAiB,mBAASR,SAASX,IAAU,aAAakB,KAAKlB,IAE/DoB,QAAU,mBACZJ,kBAAkBhB,KAChBW,SAASX,IAAUI,QAAQJ,MAAYA,EAAMqB,QAC9Cf,SAASN,KAAWO,OAAOe,KAAKtB,GAAOqB,QAEtCE,MAAQ,SAACvB,OAAOwB,6DAEdtB,WAAWF,EAAOyB,OAAOC,YAClB,MAIPC,EAAS3B,EACRwB,GAAW,gBAAgBN,KAAKlB,iBACdA,cAIXoB,QAAQ,IAAIM,IAAIC,GAAQC,UAClC,MAAOC,UACE,IAITC,UACK1B,eACCE,gBACAE,gBACAG,iBACCE,mBACCC,2BACOE,2BACPC,wBACIE,mBACTI,YACEH,SCjDX,SAASW,QAAQC,qBACMF,GAAGG,MAAMD,GAAmB,GAATA,uBAG1C,IAAME,+BAOUF,OAAKG,yDAAM,UACLJ,QAAQC,wBAAyBG,qBAUtCH,EAAKI,OAAIC,yDAAQ,GAAIC,yDAAO,SACvBP,QAAQC,kBAAmBI,QAAQC,QAAWC,kBAQtDN,OAAKhC,yDAAQ,YACX8B,GAAGS,OAAOvC,GACA+B,QAAQC,iBAAkBhC,EAG9B+B,QAAQC,qBAAsBhC,uBAQjCgC,OAAKI,yDAAK,UACPL,QAAQC,kBAAmBI,oBAQjCJ,OAAKI,yDAAK,UACJL,QAAQC,WAAYI,uBAQvBJ,OAAKQ,yDAAM,UACRT,QAAQC,sBAAuBQ,sBAQnCR,OAAKI,yDAAK,UACNL,QAAQC,eAAgBI,mCAQfJ,OAAKI,yDAAK,UACnBL,QAAQC,8BAA+BI,2BAQtCJ,OAAKI,yDAAK,UACXL,QAAQC,kBAAmBI,unCC1F7CK,OAAS,KAEPC,YACF,WAAYC,iCAEDC,OAAOC,KAAMF,IAItBG,aACF,WAAYC,iCAEDH,OAAOC,KAAME,IAItBC,aACF,WAAYC,iCAEDL,OAAOC,KAAMI,QAGfC,MAAQ,IAAIJ,aAAaG,EAAMC,QAItCC,YACF,WAAYC,iCAEDR,OAAOC,KAAMO,IAItBC,eACF,WAAYC,OAASC,yDAAW,iCAErBX,OAAOC,KAAMS,QAEfC,SAAWD,EAAQlB,KAAOmB,GAIjCC,8BACF,WAAYpB,EAAIqB,+BACPrB,GAAKA,OACLqB,MAAQA,GAIfC,wBACF,WAAYJ,iCAEDV,OAAOC,KAAMS,QAGfK,QAAUpD,OAAOe,KAAKgC,EAAQK,SAASC,IACxC,mBAAM,IAAIJ,8BAA8BpB,EAAIkB,EAAQK,QAAQvB,OAKlEyB,8BACUC,EAAUC,OAASC,yDAAY,6BAClClC,GAAGmC,OAAOF,cAIND,SAGFlB,OAAOC,KAAMkB,QAGfG,MAAQzB,OAAOyB,MAGhBpC,GAAGmC,OAAOF,EAAQpB,aACbA,KAAO,IAAID,YAAYqB,EAAQpB,OAIpCb,GAAGmC,OAAOF,EAAQd,cACbA,MAAQ,IAAID,aAAae,EAAQd,QAItCnB,GAAGqC,MAAMJ,EAAQK,eACZA,OAASL,EAAQK,OAAOR,IAAI,mBAAS,IAAId,aAAaC,MAI3DjB,GAAGqC,MAAMJ,EAAQM,cACZA,MAAQN,EAAQM,MAAMT,IAAI,mBAAQ,IAAIT,YAAYC,MAIvDtB,GAAGqC,MAAMJ,EAAQO,WAAaP,EAAQO,SAASjD,OAAQ,KACjDkC,EAAYzB,GAAGG,MAAM+B,GAAyBD,EAAQO,SAAS,GAAGlC,GAAhC4B,OACnCM,SAAWP,EAAQO,SAASV,IAAI,mBAAW,IAAIP,eAAeC,EAASC,KAE5EzB,GAAGqC,MAAMJ,EAAQQ,qBAAuBR,EAAQQ,mBAAmBlD,cAC9DkD,mBAAqBR,EAAQQ,mBAAmBX,IACjD,mBAAa,IAAIF,wBAAwBc,yEAO1C3B,KAAKuB,OAAOK,KAAK,mBAAS1B,EAAM2B,yDAKJ,IAA5B7B,KAAK8B,mEAKR7C,GAAGG,MAAMY,KAAKyB,UACP,KAGJzB,KAAKyB,SAASG,KAAK,mBAAWnB,EAAQC,oBC3HjDd,SAAS,KAEPmC,SACF,WAAYC,EAAMC,0CACTA,OAASA,MAGVC,EAAYF,EAAKG,gBAGdpC,OAAOC,KAAMgC,gBACF,eAACG,yDAAW,IACVA,WACLC,uBAAuBC,EAAKJ,OAAQI,EAAKC,MAAOH,iBAE7C,kBAAMD,yBAETlC,KAAKuC,6BAEHJ,QACJK,aAAaL,WAKrBjB,QAAU,IAAIF,QAAQpB,SAAQoC,EAAKd,QAASc,EAAKS,aAIxDC,2BACUzB,EAAU0B,OAAMC,iFACX,OAATD,aAIK1B,SAGFlB,OAAOC,KAAM2C,QAGftB,MAAQzB,SAAOyB,WAGfuB,OAASA,OAGTC,MAAQrF,MAAMsF,KAAKH,EAAKE,OAAO9B,IAAI,mBAAQ,IAAIgB,SAASC,EAAMW,EAAKpD,uDAOxE2B,UACOtB,SAAOmD,UAAU/C,KAAKT,GAAI2B,kCAO9BoB,UACI1C,SAAOoD,eAAehD,KAAKT,GAAI+C,YC/DxCW,MACF,iBAAY5B,yDAAQ,4BACXpC,GAAGmC,OAAOC,WAKRtB,OAAOC,KAAMqB,WCRX,SAAU6B,EAAKC,WAC3BC,KACA3E,EAAOf,OAAOe,KAAKyE,GAEdG,EAAI,EAAGA,EAAI5E,EAAKD,OAAQ6E,IAAK,KACjCC,EAAM7E,EAAK4E,GACXE,EAAMJ,EAAGG,EAAKJ,EAAII,GAAMJ,KACxBK,EAAI,IAAMA,EAAI,UAGZH,GCJJI,sBAEQ,mBAEI,iBAIJ,mBAEI,iBAIJ,yEAEU,SACA,SACA,UACM,UACA,UACA,iBAWX,SAAUC,EAAKC,OAC1BC,EAAOH,UAAUE,YAER,MAAPD,EAAc,GAAK1F,OAAO0F,GAE5BE,MACIF,EAAIG,QAAQD,EAAKE,OAAQ,SAAUC,UAAYH,EAAK5C,IAAI+C,MAGzDL,EAAIM,eCzCTP,wBAEQ,uCAEI,MACA,SACM,iBAIV,qBAEI,MACA,SACM,iBAIV,iDAEI,OACA,SACA,SACA,UACA,UACA,mBAWC,SAAUC,EAAKC,OAC1BC,EAAOH,YAAUE,YAER,MAAPD,EAAc,GAAK1F,OAAO0F,GAE5BE,MACIF,EAAIG,QAAQD,EAAKE,OAAQ,SAAUC,UAAYH,EAAK5C,IAAI+C,MAGzDL,EAAIO,6BCpDI,46JCAA,s3QCAA,gmDCcA,SAAUP,EAAKC,EAAQO,MAC3B,MAAPR,QACK,YAGKQ,GAAe,MAUvBlG,OAAO0F,GAEVG,QAAQM,gBAAmB,SAE3BN,QAAQO,oBAAuB,SAE/BP,QAAQQ,uBAdOC,EAAO/B,EAAOxD,UAChB,IAAVwD,GAAeA,IAAWxD,EAAON,OAAS6F,EAAM7F,OAC3C,GAGFyF,IAYFK,UAAUb,EAAKC,cC5BP,SAAU5E,EAAQ4E,EAAQa,OACrCC,EAASC,aAAa3F,EAAQ4E,UAG7Ba,MACMC,EAAOZ,QAAQ,eAAgB,QAInCY,EAAOZ,QAAQ,QAAS,SAAUE,EAAGY,UACnCC,UAAUD,EAAIhB,qBCZR,SAAUD,EAAKC,UACnB,MAAPD,EACK,MAGH1F,OAAO0F,GAENkB,UAAUlB,EAAImB,OAAO,GAAIlB,GAAUD,EAAIoB,OAAO,gBCLtC,SAAU/F,EAAQ4E,UAC1BoB,eAAeC,UAAUjG,EAAQ4E,GAASA,mBCNlC,SAAUR,UAClB8B,OAAO9B,EAAK,SAAUI,EAAK2B,UACxBC,WAAW5B,GAAM2B,MCEd,iBAAS3F,EAAKwB,OACnBqE,QACI,gBACI,iBAGP,IAAIC,QAAQ,SAACC,EAASC,OACnBC,EAAU,IAAIC,QAAQlG,EAAK5B,OAAOqC,OAAOoF,EAAUrE,MACjD2E,QAAQC,OAAO,SAAU,0BAE3BH,GACDI,KAAK,iBACEC,EAASC,QAAU,KAAOD,EAASC,OAAS,KAiBzC,KACGC,EAAQ,IAAIC,MAAMH,EAASC,gBAC3BD,SAAWA,EACXE,QAjBGE,OACAL,KAAK,gBACEK,EAAKC,QAEF,KACGH,EAAQ,IAAIC,MAAM,0BAClBG,OAASF,EAAKE,OACdJ,IAJEE,EAAKG,QAOpBC,MAAMd,GACb,MAAOQ,SACCA,KAQjBM,MAAMd,KChCnB,IAAMe,cAAgB,SAAhBA,EAAiBC,EAAQC,EAAMC,OAC3BL,EAAOI,GAAQ,IAAIE,SACrBC,gBAGCzH,GAAGmC,OAAOkF,WAKR7H,KAAK6H,GAAQK,QAAQ,cACpBH,EACaA,MAAalD,MAEhBA,EAIa,WAAvBsD,QAAON,EAAOhD,KAAuBgD,EAAOhD,aAAgBuD,OAGvDnB,OAAOgB,EAASJ,EAAOhD,MAFdgD,EAAOhD,GAAM6C,EAAM7C,KAMlC6C,GAnBIA,GCTTW,SAEAC,mBAKEzH,OAEK5B,OAAOe,KAAKqI,OAAOE,SAAS1H,GAAM,OAC7BA,GAAO2H,QAAM3H,OAEb4H,EAAS,kBACJJ,MAAMxH,UAIXA,GAAKqG,KAAKuB,GAAQd,MAAMc,UAG3BJ,MAAMxH,kBAQZA,EAAK6G,OACArF,UACM,eAIR7B,GAAGmC,OAAO+E,OACFgB,KAAOd,cAAcnB,eAAWiB,KAGrCc,QAAM3H,EAAKwB,KCrCnB,SAASsG,OAAO9F,UACdrC,GAAGqC,MAAMA,GAIPA,EAAM+F,OAAO,SAACrF,EAAMM,UAAUhB,EAAMgG,QAAQtF,KAAUM,IAHlDhB,ECLf,IAAMiG,OAAS,SAATA,+BAA0BC,uDAAhBC,gEACPD,EAAQhJ,cACFiJ,MAGLnB,EAASkB,EAAQE,eAElBzI,GAAGmC,OAAOkF,WAIR7H,KAAK6H,GAAQK,QAAQ,YACpB1H,GAAGmC,OAAOkF,EAAOhD,KACZ5F,OAAOe,KAAKgJ,GAAQT,SAAS1D,WACvBvD,OAAO0H,oBAAWnE,SAGtBmE,EAAOnE,GAAMgD,EAAOhD,YAEpBvD,OAAO0H,oBAAWnE,EAAMgD,EAAOhD,OAIvCiE,gBAAOE,UAAWD,KAfdC,GCXA,SAASE,SAASrI,OACzBR,EAASQ,EAGR,gBAAgBjB,KAAKiB,iBACHA,cAIZ,IAAIT,IAAIC,GACjB,MAAOE,UACE,MCJf,IAAM4I,QAAU,IAAIC,IAEdC,OAAS,eACC,OAARxI,SACO,SAGLyI,EAASJ,SAASrI,UAET,OAAXyI,EACO,SAGDA,EAAOC,KAAOD,EAAOE,UAAWrE,QAAQ,MAAO,KAGvDsE,8BACU7I,+BACHA,OAAS3B,OAAOqC,mBAGH,oBACC,eACC,cAEP,YACG,IAAIoI,KAAK,cAAcC,WAEnC/I,QAGCgJ,wDAqBL/E,OACI6C,EAAOyB,QAAQU,IAAItI,KAAKX,OAAOZ,KAAK8J,SAGpCL,EAAQM,UAAW,KACbC,EAAS7J,OAAO8J,aAAaC,QAAQ3I,KAAKX,OAAOZ,KAAK8J,MAEvDtJ,GAAGG,MAAMqJ,OACHG,KAAKC,MAAMJ,WAItBxJ,GAAGG,MAAM+G,GACF,KAGNlH,GAAGG,MAAMkE,GAIP6C,EAHIzI,OAAOe,KAAK0H,GAAMa,SAAS1D,GAAO6C,EAAK7C,GAAO,iCAMzDA,EAAKwF,OAAOC,0DAEN5C,EAAOnG,KAAKsI,aAGdS,GAASrL,OAAOe,KAAK0H,GAAMa,SAAS1D,KAC/BA,GAAOiE,OAAOpB,EAAK7C,GAAMwF,KAEzBxF,GAAOwF,UAIRE,IAAIhJ,KAAKX,OAAOZ,KAAK8J,KAAMpC,GAG9B+B,EAAQM,aAKRS,OAASjJ,KAAKX,OAAO4J,kBAIfP,aAAaQ,QAAQlJ,KAAKX,OAAOZ,KAAK8J,KAAMK,KAAKO,UAAUhD,IACpE,MAAOnH,0CAQHmH,EAAOnG,KAAKsI,UAGdrJ,GAAGG,MAAM+G,MAKTvI,OAAOuI,EAAK8C,UAAYjJ,KAAKX,OAAO4J,YAMlCG,EAASpJ,KAAKsI,IAAItI,KAAKX,OAAOZ,KAAK2K,YAGrCnK,GAAGG,MAAMgK,SAKRJ,IACDhJ,KAAKX,OAAOZ,KAAK2K,OACjBA,EAAO/B,OAAO,gBACJgC,EAAMzL,OAAOyD,EAAMgI,YAClBA,EAAM,GAAKA,EAAMlB,KAAKmB,qBAjB1BZ,aAAaa,WAAWvJ,KAAKX,OAAOZ,KAAK8J,uCAsB/ClH,OACC8E,EAAOnG,KAAKsI,IAAItI,KAAKX,OAAOZ,KAAK+K,kBAGnCvK,GAAGG,MAAM+G,GACF,KAINlH,GAAGS,OAAO2B,GAKV3D,OAAOe,KAAK0H,GAAMa,SAAS3F,EAAMoI,YAK/BtD,EAAK9E,EAAMoI,YAJP,KALAtD,kCAYP9E,EAAOqI,OACLF,EAAQxJ,KAAK2J,SAAStI,UAGxBpC,GAAGG,MAAMoK,GACF,KAINvK,GAAGH,OAAO4K,GAKVhM,OAAOe,KAAK+K,GAAOxC,SAAS0C,EAAS3F,eAInCyF,EAAME,EAAS3F,eAHX,KALAyF,kCAWPnI,EAAOqI,EAAU/G,QAChBqG,IACDhJ,KAAKX,OAAOZ,KAAK+K,wBAEZnI,oBACIqI,EAAS3F,kBACFpB,EAAKpD,UACDoD,EAAKC,WAIzB,oCAICvB,OAAOmI,iEACPR,IAAIhJ,KAAKX,OAAOZ,KAAK+K,wBACrBnI,EAAQmI,qCAIRrM,OACDkE,EAAQ,SAEPpC,GAAGS,OAAOvC,KAAW8B,GAAGK,IAAInC,UACtB,SAGLiM,EAASpJ,KAAKsI,IAAItI,KAAKX,OAAOZ,KAAK2K,eAErCnK,GAAGS,OAAOvC,KACFiM,EAAOxH,KAAK,mBAAK3C,GAAGmC,OAAOwI,EAAEzD,OAASyD,EAAEzD,KAAK5G,KAAOpC,SACzD,GAAI8B,GAAGK,IAAInC,GAAQ,KAChBmG,EAAMwE,OAAO3K,MAGP,OAARmG,SACO,OAGH8F,EAAOxH,KAAK,mBAAK3C,GAAGqC,MAAMsI,EAAE9J,OAAS8J,EAAE9J,KAAKkH,SAAS1D,SAG5DrE,GAAGmC,OAAOC,UACJ,SAILgI,EAAMzL,OAAOyD,EAAMgI,YAErBA,EAAM,GAAKA,EAAMlB,KAAKmB,YACjBjB,QACE,MAGJ,IAAIpF,MAAM5B,EAAM8E,uCAGlBA,OAAM7G,yDAAM,KAEXgE,EAAMwE,OAAOxI,GAGb8J,EAASpJ,KAAKsI,IAAItI,KAAKX,OAAOZ,KAAK2K,YACrCS,EAAW,KAEV5K,GAAGG,MAAMgK,OAECA,EAAOxH,KAAK,mBAAKgI,EAAEzD,KAAK5G,KAAO4G,EAAK5G,cAG3CuK,KAAKD,OAGPR,EAAMlB,KAAKmB,MAAQtJ,KAAKX,OAAOgK,OAGjCpK,GAAGmC,OAAOyI,GAAW,WAEd9J,OAAO8J,kBAKF,OAARvG,EAAc,CAETrE,GAAGqC,MAAMuI,EAAS/J,QAGVA,KAAKiK,KAAKzG,KAFVxD,MAAQwD,OAMfxD,EAAOsH,OAAOyC,EAAS/J,aAGtBC,OAAO8J,oBAKVC,KAAKD,OACV,KACGxI,iBAKM,OAARiC,UACOvD,OAAOsB,SACHiC,OAIRyG,KAAK1I,QAGX2H,IAAIhJ,KAAKX,OAAOZ,KAAK2K,OAAQA,2CAvQ7BxK,OAAO8J,oBACD,MAGLpF,EAAM,4BAIDoF,aAAaQ,QAAQ5F,EAAKA,UAC1BoF,aAAaa,WAAWjG,IACxB,EACT,MAAOtE,UACE,YCnDbgL,iCACUC,8BACA9K,EAAe8K,EAAf9K,IAAKkC,EAAU4I,EAAV5I,cAERlC,IAAOF,GAAGG,MAAMD,GAAa,GAANA,OACvBkC,MAAQA,GAERpC,GAAGK,IAAI+B,KAAWpC,GAAGS,OAAO2B,SACvB0E,MAAM,yDAGX6B,QAAU,IAAIM,mFAOZ,IAAI9C,QAAQ,SAACC,EAASC,GACrBrG,GAAGS,OAAO2C,EAAKhB,SACPgB,EAAKhB,OAIbgB,EAAKhB,iBAAiB4B,QACdZ,EAAKhB,MAAM9B,KAKlBN,GAAGK,IAAI+C,EAAKhB,UACN,IAAI0E,MAAM,sCAIhBmE,WACAvE,KAAK,cACMtE,EAAM9B,MAEjB6G,MAAMd,2DAQR,IAAIF,QAAQ,SAACC,EAASC,OACrB6E,EAAS,SAGTlL,GAAGS,OAAO0K,EAAK/I,QAAUpC,GAAGK,IAAI8K,EAAK/I,YAC5B+I,EAAKxC,QAAQsC,SAASE,EAAK/I,SAInCpC,GAAGG,MAAM+K,YACLE,SAASF,UACNC,EAAK/I,WAKX/B,EAAMD,OAAOS,KAAKuB,MAAM+I,EAAKjL,IAAKiL,EAAK/I,YAExCiH,IAAIhJ,GACJqG,KAAK,cACG0E,SAAShJ,KACN+I,EAAK/I,SAEhB+E,MAAMd,sCAQVjE,MACApC,GAAGmC,OAAOC,QAKT/B,EAAML,GAAGK,IAAIU,KAAKqB,OAASrB,KAAKqB,MAAQ,UAGzCA,MAAQ,IAAI4B,MAAM5B,QAGlBuG,QAAQyC,SAASrK,KAAKqB,MAAO/B,uCAO3BA,qBACA,IAAI8F,QAAQ,SAACC,EAASC,QACpBgD,IAAIjJ,OAAOS,KAAKoB,QAAQoJ,EAAKnL,IAAKG,IAClCqG,KAAK,YACI2E,EAAKjJ,iBAAiB4B,SACnBoH,SAASrE,EAAK3E,SAGf,IAAIL,QAAQsJ,EAAMtE,MAE7BI,MAAMd,sDAOP9F,yDAAQ,GAAIC,yDAAO,SACpB,IAAI2F,QAAQ,SAACC,EAASC,KACpBiF,aACA5E,KAAK,iBACG2C,IAAIjJ,OAAOS,KAAK0K,SAASC,EAAKtL,IAAKI,EAAIC,EAAOC,EAAO,EAAI,EAAIA,IAC7DkG,KAAK,cACMK,EAAKjF,IAAI,mBAAK,IAAIC,QAAQyJ,EAAMC,QAE3CtE,MAAMd,KAEdc,MAAMd,wCASRoE,EAAUiB,qBACV,IAAIvF,QAAQ,SAACC,EAASC,GACrBrG,GAAGG,MAAMsK,KACF,IAAI3D,MAAM,2BAIhBwE,aACA5E,KAAK,gBACIiF,EAAelB,EAAS3F,mBAEzB8G,KAAKxL,OAAOS,KAAKgL,WAAWC,EAAK5L,IAAKI,aAC7BqL,WACC3L,GAAGG,MAAMuL,GAAuB,KAAXA,IAE/BhF,KAAK,gBACIhD,EAAO,IAAID,KAAKqI,EAAM/E,KAGvB4B,QAAQoD,QAAQzL,EAAIqL,EAAcjI,KAE/BA,KAEXyD,MAAMd,KAEdc,MAAMd,uCAQToE,qBACC,IAAItE,QAAQ,SAACC,EAASC,GACpBrG,GAAG2L,aAAalB,KAKhBa,aACA5E,KAAK,gBACIiF,EAAelB,EAAS3F,cACxBkH,EAAcC,EAAKtD,QAAQuD,QAAQ5L,EAAIqL,GAGzC3L,GAAGG,MAAM6L,KACJH,WAAWF,GACXjF,KAAK,mBAAQN,EAAQ1C,EAAKpD,MAC1B6G,MAAMd,KAEH2F,EAAY1L,MAG3B6G,MAAMd,KAlBA,IAAIS,MAAM,wEA0BrB5I,qBACG,IAAIiI,QAAQ,SAACC,EAASC,OACnB8F,EAAanM,GAAG2L,aAAazN,GAC7BiB,EAAaa,GAAGoM,SAASlO,MAE1BiO,GAAehN,KAKhBgN,EAAY,KACNR,EAAezN,EAAM4G,gBAEtBuH,UAAUV,GACVjF,KAAK,YACE1G,GAAGG,MAAMG,KACF,IAAIwG,yDAAyD6E,UAInEO,QAAQ5L,GACRoG,KAAK,YAEI4F,EAAKlK,iBAAiB4B,SACnBoH,SAAS1H,EAAKtB,SAGfsB,KAEXyD,MAAMd,KAEdc,MAAMd,aAENgD,IAAIjJ,OAAOS,KAAKqL,QAAQI,EAAKpM,IAAKhC,IAClCwI,KAAK,gBACI6F,EAAWD,EAAKE,gBAChB9I,EAAO,IAAID,KAAK6I,EAAMvF,EAAMA,EAAKzG,KAAOiM,GAGxCD,EAAKlK,iBAAiB4B,SACnBoH,SAAS1H,EAAKtB,SAGfsB,KAEXyD,MAAMd,UAvCJ,IAAIS,MAAM,kGA+CpB2F,oEACE,IAAItG,QAAQ,SAACC,EAASC,KACpBiF,aACA5E,KAAK,gBACI6D,EAAQmC,EAAK/D,QAAQ+B,SAASpK,MAEhCN,GAAGG,MAAMoK,KACD,cAKRkC,EAAU,KACJ/L,EAAMjC,OAAOe,KAAK+K,GAAOzI,IAAI,mBAAYyI,EAAME,GAAUnK,UAE1D+I,IAAIjJ,OAAOS,KAAK8L,WAAWD,EAAKxM,IAAKQ,EAAIkM,KAAK,OAC9ClG,KAAK,mBAEKmG,QAAQ9F,GAAMW,QAAQ,qCAAE1E,gBACd,KACHyH,EAAWhM,OAAOe,KAAK+K,GAAO5H,KAAK,mBAAK4H,EAAMuC,GAAGxM,KAAO0C,WACvDuH,EAAME,QAKhB9B,QAAQoE,SAASzM,EAAIiK,GAGrB9L,OAAOuO,OAAOzC,GAAO5H,KAAK,mBAAQe,EAAKC,WAKhC4G,KAJH0C,gBACAvG,KAAKN,GACLe,MAAMd,KAKlBc,MAAMd,UAEHkE,KAGfpD,MAAMd,wDAQLnI,yDAAQ,YACX,IAAIiI,QAAQ,SAACC,EAASC,KACpBiF,aACA5E,KAAK,cACGgE,UAAS,GAAOhE,KAAK,gBAChB6D,EAAQrD,KAGVlH,GAAGG,MAAMoK,KACD,cAKRvK,GAAG2L,aAAazN,GAAQ,KAClByN,EAAezN,EAAM4G,cACrBoI,EAAazO,OAAOe,KAAK+K,OAG1B2C,EAAWnF,SAAS4D,iBACd,IAAI7E,sBAAsB6E,MAK1BjE,QAAQ,cACT+C,GAAU9G,OAAS8G,IAAakB,QAEvC,KAEG3I,EAAShD,GAAGoM,SAASlO,GAASA,EAAQqM,EAAM9L,OAAOe,KAAK+K,GAAO,IAAIjK,UAGlEd,KAAK+K,GAAO7C,QAAQ,gBACjBhE,EAAO6G,EAAME,KACd9G,OAASD,EAAKpD,KAAO0C,MAK7B2F,QAAQoE,SAASzM,EAAIiK,KAElBA,QAGfpD,MAAMd,wDAOL2B,iEACH,IAAI7B,QAAQ,SAACC,EAASC,KACpBiF,aACA5E,KAAK,gBACI6D,EAAQ4C,EAAKxE,QAAQ+B,SAASpK,MAE/B7B,OAAOe,KAAK+K,GAAOhL,YAKlBoE,EAASlF,OAAOuO,OAAOzC,GAAO5H,KAAK,mBAAQe,EAAKC,SAEjDA,EAKAqE,IAKAkE,QAAQvI,EAAOrD,IACfoG,KAAKN,GACLe,MAAMd,KANC1C,EAAOrD,MALP,aAPA,QAoBf6G,MAAMd,uCAST/F,EAAI2B,qBACH,IAAIkE,QAAQ,SAACC,EAASC,GACpBrG,GAAGoM,SAAS9L,GAKbN,GAAGG,MAAM8B,KACF,IAAI6E,MAAM,qCAIhB8E,KAAKxL,OAAOS,KAAKiD,UAAUsJ,EAAKlN,IAAKI,GAAK2B,GAC1CyE,KAAK,gBACIhD,EAAO,IAAID,KAAK2J,EAAMrG,GAAM,GAG5BqG,EAAKhL,iBAAiB4B,SACnBoH,SAAS1H,EAAKtB,SAIlB6K,cAAcvJ,EAAKpD,IACnBoG,KAAK,aACMhD,KAEXyD,MAAMd,KAEdc,MAAMd,KAzBA,IAAIS,MAAM,4EAmCNxG,EAAI+C,cAAOH,yDAAW,SAClC,IAAIiD,QAAQ,SAACC,EAASC,GACpBrG,GAAGoM,SAAS9L,GAKbN,GAAGG,MAAMkD,KACF,IAAIyD,MAAM,mCAIhB8E,KAAKxL,OAAOS,KAAKsC,uBAAuBkK,EAAKnN,IAAKI,IAAO+C,QAAOH,aAChEwD,KAAK,gBACIhD,EAAO,IAAID,KAAK4J,EAAMtG,GAAM,GAG5BsG,EAAKjL,iBAAiB4B,SACnBoH,SAAS1H,EAAKtB,SAIlB6K,cAAcvJ,EAAKpD,IACnBoG,KAAK,aACMhD,KAEXyD,MAAMd,KAEdc,MAAMd,KAzBA,IAAIS,MAAM,oEAkCdxG,EAAI+C,qBACR,IAAI8C,QAAQ,SAACC,EAASC,GACpBrG,GAAGoM,SAAS9L,GAKbN,GAAGG,MAAMkD,KACF,IAAIyD,MAAM,mCAIhB8E,KAAKxL,OAAOS,KAAKkD,eAAeuJ,EAAKpN,IAAKI,IAAO+C,UACjDqD,KAAK,eAEG1G,GAAGG,MAAM4G,KAWL2D,WACAhE,KAAK,kBAAMN,EAAQ,QACnBe,MAAMd,OAbM,KACX3C,EAAO,IAAID,KAAK6J,EAAMvG,GAAM,KAG7BkG,cAAcvJ,EAAKpD,IACnBoG,KAAK,aACMhD,KAEXyD,MAAMd,MAQlBc,MAAMd,KA5BA,IAAIS,MAAM"}