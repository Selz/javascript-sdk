{"version":3,"sources":["src/client.js","src/utils/is.js","src/classes/Product/ProductFile.js","src/classes/Product/ProductImage.js","src/classes/Product/ProductMedia.js","src/classes/Product/ProductUrls.js","src/classes/Product/ProductVariant.js","src/classes/Product/ProductVariantAttributeOption.js","src/classes/Product/ProductVariantAttribute.js","src/classes/Product/Product.js","src/classes/Cart/CartItem.js","src/classes/Cart/Cart.js","src/classes/Cart/CartAddItem.js","src/classes/Category/Category.js","src/classes/Store/Store.js","src/config.js","node_modules/humps/humps.js","src/utils/objects.js","src/utils/strings.js","src/utils/form-data.js","src/utils/fetch.js","src/utils/http.js","src/utils/arrays.js","src/utils/storage.js","src/utils/parseUrl.js"],"names":["global","factory","exports","module","define","amd","self","Selz","this","_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","_defineProperty","value","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","_slicedToArray","arr","Array","isArray","_arrayWithHoles","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","_iterableToArrayLimit","_nonIterableRest","getConstructor","input","instanceOf","isObject","isString","String","isNullOrUndefined","isEmpty","is","Number","isNaN","test","strict","window","URL","string","concat","hostname","e","ProductFile","a","file","assign","ProductImage","image","ProductMedia","media","cover","ProductUrls","urls","ProductVariant","variant","selected","id","ProductVariantAttributeOption","label","ProductVariantAttribute","options","map","client","Product","product","variantId","store","images","files","hasVariants","variants","hasVariantAttributes","variantAttributes","attribute","get","find","CartItem","item","cartId","Cart","cart","active","items","from","addToCart","index","removeFromCart","CartAddItem","productId","quantity","discountCode","buyersUnitPrice","isProduct","Category","category","Store","getBase","env","config","url","products","keyword","page","categories","buy","createCart","getCart","checkCarts","ids","updateCartItemQuantity","commonjsGlobal","globalThis","humps","fn","createCommonjsModule","_processKeys","camelize","pascalize","decamelize","_isFunction","_isObject","_isArray","_isDate","_isRegExp","_isBoolean","_isNumerical","_processor","convert","output","l","hasOwnProperty","replace","match","chr","toUpperCase","substr","toLowerCase","camelized","separator","split","join","separateWords","callback","process","depascalize","camelizeKeys","decamelizeKeys","pascalizeKeys","depascalizeKeys","cloneDeep","JSON","parse","stringify","extend","b","sources","d","shift","includes","parseJSON","data","Promise","resolve","reject","error","replaceAll","RegExp","toTitleCase","text","charAt","toPascalCase","buildFormData","formKey","form","namespace","formData","FormData","File","append","defaults","type","body","responseType","fetch","c","xhr","XMLHttpRequest","Error","request","fail","status","addEventListener","response","then","json","success","errors","catch","open","send","queue","http","remove","dedupe","array","indexOf","storage","Map","getKey","parsed","parseUrl","host","pathname","Storage","root","carts","stores","ttl","schema","Date","getTime","purge","supported","stored","localStorage","getItem","merge","set","setItem","removeItem","now","currency","getCarts","s","existing","Client","getStore","cached","setStore","getStoreId","p","cartItem","discount","currencyCode","setCart","currentCart","isCurrency","isObjectId","getCartId","activeId","getActiveCart","validate","entries","setCarts","values","setActiveCart","currencies","default"],"mappings":"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","file":"client.js","sourcesContent":["import { Cart, CartAddItem, CartItem } from './classes/Cart';\nimport Category from './classes/Category';\nimport { Product } from './classes/Product';\nimport Store from './classes/Store';\nimport config from './config';\nimport http from './utils/http';\nimport is from './utils/is';\nimport Storage from './utils/storage';\n\nclass Client {\n    constructor(props) {\n        const { env, store, source } = props;\n\n        this.env = !is.empty(env) ? env : '';\n        this.store = store;\n        this.source = source;\n\n        if (!is.url(store) && !is.number(store)) {\n            throw Error('A store ID or URL is required to create a client');\n        }\n\n        this.storage = new Storage();\n    }\n\n    /**\n     * Get the store ID only\n     */\n    getStoreId() {\n        return new Promise((resolve, reject) => {\n            if (is.number(this.store)) {\n                resolve(this.store);\n                return;\n            }\n\n            if (this.store instanceof Store) {\n                resolve(this.store.id);\n                return;\n            }\n\n            // URL is required\n            if (!is.url(this.store)) {\n                reject(new Error('Url is required for user lookup'));\n            }\n\n            // Get by URL\n            this.getStore()\n                .then(store => {\n                    resolve(store.id);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the Store for current instance\n     */\n    getStore() {\n        return new Promise((resolve, reject) => {\n            // Try from cache by ID or URL\n            if (is.number(this.store) || is.url(this.store)) {\n                const cached = this.storage.getStore(this.store);\n\n                // Return cached if we have it\n                if (cached !== null && cached instanceof Store) {\n                    resolve(cached);\n                    return;\n                }\n            }\n\n            // If already fetched\n            if (this.store instanceof Store) {\n                resolve(this.store);\n                return;\n            }\n\n            // Fetch from remote by ID or URL\n            const url = config.urls.store(this.env, this.store);\n\n            http.get(url)\n                .then(store => {\n                    this.setStore(store);\n                    resolve(this.store);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the store details\n     * @param {object} store\n     */\n    setStore(store) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Store reference to lookup URL\n        const url = is.url(this.store) ? this.store : null;\n\n        // Map to Store\n        this.store = new Store(store);\n\n        // Add to storage for cache\n        this.storage.setStore(this.store, url);\n    }\n\n    /**\n     * Get product data\n     * @param {String} url - Short or full URL for a product\n     */\n    getProduct(url) {\n        return new Promise((resolve, reject) => {\n            http.get(config.urls.product(this.env, url))\n                .then(json => {\n                    if (!(this.store instanceof Store)) {\n                        this.setStore(json.store);\n                    }\n\n                    resolve(new Product(this, json));\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all products\n     */\n    getProducts(keyword = '', category = '', page = 1) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    http.get(\n                        config.urls.products(\n                            this.env,\n                            id,\n                            !is.empty(keyword) ? keyword : '',\n                            is.string(category) ? category : '',\n                            !is.number(page) || page < 1 ? 1 : page,\n                        ),\n                    )\n                        .then(json => {\n                            resolve({\n                                ...json,\n                                products: json.products.map(p => new Product(this, p)),\n                            });\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all categories\n     */\n    getCategories() {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    http.get(config.urls.categories(this.env, id))\n                        .then(json => {\n                            resolve({\n                                ...json,\n                                categories: json.categories.map(c => new Category(c)),\n                            });\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Buy a product\n     * @param {Object} item - The cart item\n     * @returns {Cart}\n     */\n    buy(item) {\n        return new Promise((resolve, reject) => {\n            if (is.empty(item)) {\n                reject(new Error('A cart item is required'));\n                return;\n            }\n\n            // Map the cart item if required\n            let cartItem = item;\n            if (is.object(item) || item instanceof Product) {\n                cartItem = new CartAddItem(item);\n            }\n\n            if (!(cartItem instanceof CartAddItem)) {\n                reject(new Error('A valid cart item is required'));\n            }\n\n            http.post(config.urls.buy(this.env), cartItem)\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Cache store\n                    this.setStore(cart.store);\n\n                    resolve(cart);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Create a new shopping cart\n     * @param {String} currency - ISO currency code\n     * @param {String} discount - Discount code\n     */\n    createCart(currency, discount) {\n        return new Promise((resolve, reject) => {\n            if (is.empty(currency)) {\n                reject(new Error('currency is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n\n                    http.post(config.urls.createCart(this.env, id), {\n                        currency: currencyCode,\n                        discount: !is.empty(discount) ? discount : null,\n                        source: this.source,\n                    })\n                        .then(json => {\n                            const cart = new Cart(this, json);\n\n                            // Store reference to cart id for later\n                            this.storage.setCart(id, currencyCode, cart);\n\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart or create one if needed\n     * @param {String} currency - The shopping cart ISO currency code\n     */\n    getCartId(currency) {\n        return new Promise((resolve, reject) => {\n            if (!is.currencyCode(currency)) {\n                reject(new Error('A valid currency code is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n                    const currentCart = this.storage.getCart(id, currencyCode);\n\n                    // Create cart if it doesn't exist\n                    if (is.empty(currentCart)) {\n                        this.createCart(currencyCode)\n                            .then(cart => resolve(cart.id))\n                            .catch(reject);\n                    } else {\n                        resolve(currentCart.id);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart\n     * @param {String} input - The shopping cart ISO currency code or cart ID\n     */\n    getCart(input) {\n        return new Promise((resolve, reject) => {\n            const isCurrency = is.currencyCode(input);\n            const isObjectId = is.objectId(input);\n\n            if (!isCurrency && !isObjectId) {\n                reject(new Error('A valid currency code or cart id are required'));\n                return;\n            }\n\n            if (isCurrency) {\n                const currencyCode = input.toUpperCase();\n\n                this.getCartId(currencyCode)\n                    .then(id => {\n                        if (is.empty(id)) {\n                            reject(new Error(`Could not find matching cart for currency code '${currencyCode}'`));\n                            return;\n                        }\n\n                        this.getCart(id)\n                            .then(cart => {\n                                // Update store\n                                this.setStore(cart.store);\n\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    })\n                    .catch(reject);\n            } else {\n                http.get(config.urls.getCart(this.env, input))\n                    .then(json => {\n                        const activeId = this.getActiveCart();\n                        const cart = new Cart(this, json, json.id === activeId);\n\n                        // Update store\n                        this.setStore(cart.store);\n\n                        resolve(cart);\n                    })\n                    .catch(reject);\n            }\n        });\n    }\n\n    /**\n     * Get all current carts\n     */\n    getCarts(validate = true) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (is.empty(carts)) {\n                        resolve(null);\n                        return;\n                    }\n\n                    // Check the carts still exist in the server\n                    if (validate) {\n                        const ids = Object.keys(carts).map(currency => carts[currency].id);\n\n                        http.get(config.urls.checkCarts(this.env, ids.join(',')))\n                            .then(json => {\n                                // Remove non existant carts\n                                Object.entries(json).forEach(([cartId, exists]) => {\n                                    if (!exists) {\n                                        const currency = Object.keys(carts).find(c => carts[c].id === cartId);\n                                        delete carts[currency];\n                                    }\n                                });\n\n                                // Store again\n                                this.storage.setCarts(id, carts);\n\n                                // Set active\n                                if (!Object.values(carts).find(cart => cart.active)) {\n                                    this.setActiveCart()\n                                        .then(resolve)\n                                        .catch(reject);\n                                } else {\n                                    resolve(carts);\n                                }\n                            })\n                            .catch(reject);\n                    } else {\n                        resolve(carts);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the active cart based on currency\n     * @param {String} input - The shopping cart ISO currency code or cart ID\n     */\n    setActiveCart(input = null) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    this.getCarts(false).then(data => {\n                        const carts = data;\n\n                        // No carts\n                        if (is.empty(carts)) {\n                            resolve(null);\n                            return;\n                        }\n\n                        // Currency code was passed...\n                        if (is.currencyCode(input)) {\n                            const currencyCode = input.toUpperCase();\n                            const currencies = Object.keys(carts);\n\n                            // Bail if not included\n                            if (!currencies.includes(currencyCode)) {\n                                reject(new Error(`No carts for ${currencyCode}`));\n                                return;\n                            }\n\n                            // Set active\n                            currencies.forEach(currency => {\n                                carts[currency].active = currency === currencyCode;\n                            });\n                        } else {\n                            // Set to id if specified, otherwise first\n                            const cartId = is.objectId(input) ? input : carts[Object.keys(carts)[0]].id;\n\n                            // Set active\n                            Object.keys(carts).forEach(currency => {\n                                const cart = carts[currency];\n                                cart.active = cart.id === cartId;\n                            });\n                        }\n\n                        // Store again\n                        this.storage.setCarts(id, carts);\n\n                        resolve(carts);\n                    });\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the current active cart\n     */\n    getActiveCart(fetch = false) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (!Object.keys(carts).length) {\n                        resolve(null);\n                        return;\n                    }\n\n                    const active = Object.values(carts).find(cart => cart.active);\n\n                    if (!active) {\n                        resolve(null);\n                        return;\n                    }\n\n                    if (!fetch) {\n                        resolve(active.id);\n                        return;\n                    }\n\n                    this.getCart(active.id)\n                        .then(resolve)\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Add a product to a cart\n     * @param {String} id - The cart ID\n     * @param {Object} item - The cart item\n     */\n    addToCart(id, item) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(item)) {\n                reject(new Error('A cart item is required'));\n                return;\n            }\n\n            // Map the cart item if required\n            let cartItem = item;\n            if (is.object(item) || item instanceof Product) {\n                cartItem = new CartAddItem(item);\n            }\n\n            if (!(cartItem instanceof CartAddItem)) {\n                reject(new Error('A valid cart item is required'));\n            }\n\n            http.post(config.urls.addToCart(this.env, id), cartItem)\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Update an items quantity in the shopping cart\n     * @param {String} id - The shopping cart ID\n     * @param {String} index - The shopping cart item quid\n     * @param {Number} quantity - Desired quantity\n     */\n    updateCartItemQuantity(id, index, quantity = 1) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.updateCartItemQuantity(this.env, id), { index, quantity })\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Remove a product from a cart\n     * @param {String} id - The shopping cart id\n     * @param {String} index - The shopping cart item guid\n     */\n    removeFromCart(id, index) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.removeFromCart(this.env, id), { index })\n                .then(json => {\n                    // If there's actually a cart left, map it\n                    if (!is.empty(json)) {\n                        const cart = new Cart(this, json, true);\n\n                        // Set the active cart\n                        this.setActiveCart(cart.id)\n                            .then(() => {\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    } else {\n                        // Otherwise, update carts (as one removed)\n                        this.getCarts()\n                            .then(() => resolve(null))\n                            .catch(reject);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n}\n\nexport { Product, Category, Cart, CartItem, CartAddItem, Store };\n\nexport default Client;\n","// ==========================================================================\n// Type checking\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\nconst isArray = input => Array.isArray(input);\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObjectId = input => isString(input) && /^[a-f\\d]{24}$/i.test(input);\nconst isCurrencyCode = input => isString(input) && /^[A-z]{3}$/.test(input);\n\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nconst isUrl = (input, strict = false) => {\n    // Accept a URL object\n    if (instanceOf(input, window.URL)) {\n        return true;\n    }\n\n    // Add the protocol if required\n    let string = input;\n    if (!strict && !/^https?:\\/\\/*/.test(input)) {\n        string = `http://${input}`;\n    }\n\n    try {\n        return !isEmpty(new URL(string).hostname);\n    } catch (e) {\n        return false;\n    }\n};\n\nconst is = {\n    array: isArray,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    nullOrUndefined: isNullOrUndefined,\n    objectId: isObjectId,\n    currencyCode: isCurrencyCode,\n    url: isUrl,\n    empty: isEmpty,\n};\n\nexport default is;\n","export default class ProductFile {\n    constructor(file) {\n        // Take all properties by default\n        Object.assign(this, file);\n    }\n}\n","export default class ProductImage {\n    constructor(image) {\n        // Take all properties by default\n        Object.assign(this, image);\n    }\n}\n","import ProductImage from './ProductImage';\n\nexport default class ProductMedia {\n    constructor(media) {\n        // Take all properties by default\n        Object.assign(this, media);\n\n        // Map cover image\n        this.cover = new ProductImage(media.cover);\n    }\n}\n","export default class ProductUrls {\n    constructor(urls) {\n        // Take all properties by default\n        Object.assign(this, urls);\n    }\n}\n","export default class ProductVariant {\n    constructor(variant, selected = '') {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        this.selected = variant.id === selected;\n    }\n}\n","export default class ProductVariantAttributeOption {\n    constructor(id, label) {\n        this.id = id;\n        this.label = label;\n    }\n}\n","import ProductVariantAttributeOption from './ProductVariantAttributeOption';\n\nexport default class ProductVariantAttribute {\n    constructor(variant) {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        // Map options\n        this.options = Object.keys(variant.options).map(\n            id => new ProductVariantAttributeOption(id, variant.options[id]),\n        );\n    }\n}\n","import is from '../../utils/is';\nimport ProductFile from './ProductFile';\nimport ProductImage from './ProductImage';\nimport ProductMedia from './ProductMedia';\nimport ProductUrls from './ProductUrls';\nimport ProductVariant from './ProductVariant';\nimport ProductVariantAttribute from './ProductVariantAttribute';\n\nlet client = null;\n\nexport default class Product {\n    constructor(instance, product, variantId = '') {\n        if (!is.object(product)) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, product);\n\n        // Map store\n        this.store = client.store;\n\n        // Product URLs\n        if (is.object(product.urls)) {\n            this.urls = new ProductUrls(product.urls);\n        }\n\n        // Media (Video, YouTube, Vimeo, Audio)\n        if (is.object(product.media)) {\n            this.media = new ProductMedia(product.media);\n        }\n\n        // Images\n        if (is.array(product.images)) {\n            this.images = product.images.map(image => new ProductImage(image));\n        }\n\n        // Files for digital products\n        if (is.array(product.files)) {\n            this.files = product.files.map(file => new ProductFile(file));\n        }\n\n        // Variants\n        if (product.hasVariants) {\n            const selected = !is.empty(variantId) ? variantId : product.variants[0].id;\n            this.variants = product.variants.map(variant => new ProductVariant(variant, selected));\n        }\n        if (product.hasVariantAttributes) {\n            this.variantAttributes = product.variantAttributes.map(attribute => new ProductVariantAttribute(attribute));\n        }\n    }\n\n    get selectedVariant() {\n        if (is.empty(this.variants)) {\n            return null;\n        }\n\n        return this.variants.find(variant => variant.selected);\n    }\n}\n","import Product from '../Product/Product';\n\nexport default class CartItem {\n    constructor(client, item, cartId) {\n        this.cartId = cartId;\n\n        // Take all properties by default\n        Object.assign(this, item);\n\n        // Map product\n        this.product = new Product(client, item.product, item.variantId);\n    }\n}\n","import CartItem from './CartItem';\n\nlet client = null;\n\nexport default class Cart {\n    constructor(instance, cart, active = false) {\n        if (cart === null) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, cart);\n\n        // Map store\n        this.store = client.store;\n\n        // Set active state\n        this.active = active;\n\n        // Map items\n        this.items = Array.from(cart.items).map(item => new CartItem(client, item, cart.id));\n    }\n\n    /**\n     * Add a product to this cart\n     * @param {Object} item - The cart item\n     */\n    add(item) {\n        return client.addToCart(this.id, item);\n    }\n\n    /**\n     * Remove a product from this cart\n     * @param {String} index\n     */\n    remove(index) {\n        return client.removeFromCart(this.id, index);\n    }\n}\n","import is from '../../utils/is';\nimport Product from '../Product/Product';\n\nconst isProduct = input => !is.empty(input) && input instanceof Product;\n\nexport default class CartAddItem {\n    constructor(item) {\n        this.productId = null;\n        this.variantId = null;\n        this.quantity = 1;\n        this.discountCode = null;\n        this.buyersUnitPrice = null;\n\n        if (isProduct(item) || is.object(item)) {\n            this.productId = item.id;\n            this.variantId = is.objectId(item.variant) ? item.variant : null;\n        }\n    }\n}\n","import is from '../../utils/is';\n\nexport default class Category {\n    constructor(category = null) {\n        if (!is.object(category)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, category);\n    }\n}\n","import is from '../../utils/is';\n\nexport default class Store {\n    constructor(store = null) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, store);\n    }\n}\n","import is from './utils/is';\n\nconst getBase = env => `https://${is.empty(env) || env === 'selz.com' ? 'sdk.selz.com' : `${env}/sdk`}/`;\n\nconst config = {\n    urls: {\n        /**\n         * Get URL for product data by URL\n         * @param {String} env - Environment (for internal use)\n         * @param {String} url - Short or full URL for a product\n         */\n        product(env, url = '') {\n            return `${getBase(env)}products/find?url=${url}`;\n        },\n\n        /**\n         * Get URL for all products by store ID\n         * @param {String} env - Environment (for internal use)\n         * @param {Number|String} id - The store ID\n         * @param {String} keyword - Search keyword\n         * @param {ObjectId|String} category - Category ID or relative path\n         * @param {Number} page - Page to fetch\n         */\n        products(env, id, keyword = '', category = '', page = 1) {\n            return `${getBase(env)}products/all/${id}?q=${keyword}&c=${category}&p=${page}`;\n        },\n\n        /**\n         * Get all categories for a given store ID\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - The store ID\n         */\n        categories(env, id) {\n            return `${getBase(env)}categories/${id}`;\n        },\n\n        /**\n         * Get URL for finding a store by URL or ID\n         * @param {String} env - Environment (for internal use)\n         * @param {Number|String} input - The ID or URL to lookup\n         */\n        store(env, input = null) {\n            if (is.number(input)) {\n                return `${getBase(env)}store/find/${input}`;\n            }\n\n            return `${getBase(env)}store/find?url=${input}`;\n        },\n\n        /**\n         * Buy a product\n         * @param {String} env - Environment (for internal use)\n         */\n        buy(env) {\n            return `${getBase(env)}cart/buy`;\n        },\n\n        /**\n         * Create a new cart\n         * @param {String} env - Environment (for internal use)\n         * @param {Number} id - Store ID\n         */\n        createCart(env, id = '') {\n            return `${getBase(env)}cart/create/${id}`;\n        },\n\n        /**\n         * Get cart from ID\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        getCart(env, id = '') {\n            return `${getBase(env)}cart/${id}`;\n        },\n\n        /**\n         * Check carts still exist server side\n         * @param {String} env - Environment (for internal use)\n         * @param {Number} id - Cart IDs\n         */\n        checkCarts(env, ids = '') {\n            return `${getBase(env)}cart/verify?ids=${ids}`;\n        },\n\n        /**\n         * Add product to cart\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        addToCart(env, id = '') {\n            return `${getBase(env)}cart/add/${id}`;\n        },\n\n        /**\n         * Update a cart item quantity\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        updateCartItemQuantity(env, id = '') {\n            return `${getBase(env)}cart/updateitemquantity/${id}`;\n        },\n\n        /**\n         * Remove product from cart\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        removeFromCart(env, id = '') {\n            return `${getBase(env)}cart/remove/${id}`;\n        },\n    },\n};\n\nexport default config;\n","// =========\n// = humps =\n// =========\n// Underscore-to-camelCase converter (and vice versa)\n// for strings and object keys\n\n// humps is copyright © 2012+ Dom Christie\n// Released under the MIT license.\n\n\n;(function(global) {\n\n  var _processKeys = function(convert, obj, options) {\n    if(!_isObject(obj) || _isDate(obj) || _isRegExp(obj) || _isBoolean(obj) || _isFunction(obj)) {\n      return obj;\n    }\n\n    var output,\n        i = 0,\n        l = 0;\n\n    if(_isArray(obj)) {\n      output = [];\n      for(l=obj.length; i<l; i++) {\n        output.push(_processKeys(convert, obj[i], options));\n      }\n    }\n    else {\n      output = {};\n      for(var key in obj) {\n        if(Object.prototype.hasOwnProperty.call(obj, key)) {\n          output[convert(key, options)] = _processKeys(convert, obj[key], options);\n        }\n      }\n    }\n    return output;\n  };\n\n  // String conversion methods\n\n  var separateWords = function(string, options) {\n    options = options || {};\n    var separator = options.separator || '_';\n    var split = options.split || /(?=[A-Z])/;\n\n    return string.split(split).join(separator);\n  };\n\n  var camelize = function(string) {\n    if (_isNumerical(string)) {\n      return string;\n    }\n    string = string.replace(/[\\-_\\s]+(.)?/g, function(match, chr) {\n      return chr ? chr.toUpperCase() : '';\n    });\n    // Ensure 1st char is always lowercase\n    return string.substr(0, 1).toLowerCase() + string.substr(1);\n  };\n\n  var pascalize = function(string) {\n    var camelized = camelize(string);\n    // Ensure 1st char is always uppercase\n    return camelized.substr(0, 1).toUpperCase() + camelized.substr(1);\n  };\n\n  var decamelize = function(string, options) {\n    return separateWords(string, options).toLowerCase();\n  };\n\n  // Utilities\n  // Taken from Underscore.js\n\n  var toString = Object.prototype.toString;\n\n  var _isFunction = function(obj) {\n    return typeof(obj) === 'function';\n  };\n  var _isObject = function(obj) {\n    return obj === Object(obj);\n  };\n  var _isArray = function(obj) {\n    return toString.call(obj) == '[object Array]';\n  };\n  var _isDate = function(obj) {\n    return toString.call(obj) == '[object Date]';\n  };\n  var _isRegExp = function(obj) {\n    return toString.call(obj) == '[object RegExp]';\n  };\n  var _isBoolean = function(obj) {\n    return toString.call(obj) == '[object Boolean]';\n  };\n\n  // Performant way to determine if obj coerces to a number\n  var _isNumerical = function(obj) {\n    obj = obj - 0;\n    return obj === obj;\n  };\n\n  // Sets up function which handles processing keys\n  // allowing the convert function to be modified by a callback\n  var _processor = function(convert, options) {\n    var callback = options && 'process' in options ? options.process : options;\n\n    if(typeof(callback) !== 'function') {\n      return convert;\n    }\n\n    return function(string, options) {\n      return callback(string, convert, options);\n    }\n  };\n\n  var humps = {\n    camelize: camelize,\n    decamelize: decamelize,\n    pascalize: pascalize,\n    depascalize: decamelize,\n    camelizeKeys: function(object, options) {\n      return _processKeys(_processor(camelize, options), object);\n    },\n    decamelizeKeys: function(object, options) {\n      return _processKeys(_processor(decamelize, options), object, options);\n    },\n    pascalizeKeys: function(object, options) {\n      return _processKeys(_processor(pascalize, options), object);\n    },\n    depascalizeKeys: function () {\n      return this.decamelizeKeys.apply(this, arguments);\n    }\n  };\n\n  if (typeof define === 'function' && define.amd) {\n    define(humps);\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = humps;\n  } else {\n    global.humps = humps;\n  }\n\n})(this);\n","// ==========================================================================\n// Extend objects\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Clone nested objects\n * @param {object} object\n */\nexport function cloneDeep(object) {\n    return JSON.parse(JSON.stringify(object));\n}\n\n/**\n * Deep extend destination object with N more objects\n * @param {Object} target\n * @param {...Object} sources\n */\nexport function extend(target = {}, ...sources) {\n    if (!sources.length) {\n        return target;\n    }\n\n    const source = sources.shift();\n\n    if (!is.object(source)) {\n        return target;\n    }\n\n    Object.keys(source).forEach(key => {\n        if (is.object(source[key])) {\n            if (!Object.keys(target).includes(key)) {\n                Object.assign(target, { [key]: {} });\n            }\n\n            extend(target[key], source[key]);\n        } else {\n            Object.assign(target, { [key]: source[key] });\n        }\n    });\n\n    return extend(target, ...sources);\n}\n\n/**\n * Safer JSON parsing\n * @param {Object} data\n */\nexport function parseJSON(data = {}) {\n    return new Promise((resolve, reject) => {\n        try {\n            resolve(JSON.parse(data));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// String utils\n// ==========================================================================\n\n// Replace all occurances of a string in a string\nexport function replaceAll(input = '', find = '', replace = '') {\n    return input.replace(\n        new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'),\n        replace.toString(),\n    );\n}\n\n// Convert to title case\nexport function toTitleCase(input = '') {\n    return input.toString().replace(/\\w\\S*/g, text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase());\n}\n\n// Convert string to pascalCase\nexport function toPascalCase(input = '') {\n    let string = input.toString();\n\n    // Convert kebab case\n    string = replaceAll(string, '-', ' ');\n\n    // Convert snake case\n    string = replaceAll(string, '_', ' ');\n\n    // Convert to title case\n    string = toTitleCase(string);\n\n    // Convert to pascal case\n    return replaceAll(string, ' ', '');\n}\n\n// Convert string to pascalCase\nexport function toCamelCase(input = '') {\n    let string = input.toString();\n\n    // Convert to pascal case\n    string = toPascalCase(string);\n\n    // Convert first character to lowercase\n    return string.charAt(0).toLowerCase() + string.slice(1);\n}\n","// ==========================================================================\n// Form Data utils\n// ==========================================================================\n\nimport is from './is';\nimport { cloneDeep } from './objects';\nimport { toPascalCase } from './strings';\n\n/**\n * Convert an Object to FormData\n * @param {Object} source - source Object\n * @param {FormData} form - existing FormData object\n * @param {String} namespace - namespace for FormData\n */\nconst buildFormData = (source = {}, form, namespace) => {\n    const formData = form || new FormData();\n    let formKey;\n    let data = null;\n\n    // Parse as an object\n    try {\n        data = cloneDeep(source);\n    } catch (error) {\n        return formData;\n    }\n\n    // Source must be an object\n    if (!is.object(data)) {\n        return formData;\n    }\n\n    // Loop through the object to convert\n    Object.keys(data).forEach(key => {\n        if (namespace) {\n            formKey = `${namespace}[${key}]`;\n        } else {\n            formKey = key;\n        }\n\n        // If the property is an object, but not a File, use recursivity\n        if (typeof source[key] === 'object' && !(source[key] instanceof File)) {\n            buildFormData(source[key], formData, key);\n        } else {\n            formData.append(toPascalCase(formKey), source[key]);\n        }\n    });\n\n    return formData;\n};\n\nexport default buildFormData;\n","// ==========================================================================\n// Fetch\n// ==========================================================================\n\nimport humps from 'humps';\n\nimport buildFormData from './form-data';\nimport { extend, parseJSON } from './objects';\n\nconst defaults = {\n    type: 'GET',\n    body: {},\n    responseType: 'json',\n};\n\n/**\n * Custom immitation fetch using XHR\n * @param {String} url - The URL of the endpoint\n * @param {Object} options - Object of options for the request\n */\nexport default function(url, options = {}) {\n    const { type, body, responseType } = extend({}, defaults, options);\n\n    return new Promise((resolve, reject) => {\n        try {\n            const xhr = new XMLHttpRequest();\n\n            // Check for CORS support\n            if (!('withCredentials' in xhr)) {\n                const error = new Error('No CORS support');\n                error.request = xhr;\n                throw error;\n            }\n\n            // Handle failures\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status\n            const fail = () => {\n                const error = new Error(xhr.status);\n                error.request = xhr;\n                reject(error);\n            };\n\n            // Successfully made the request\n            xhr.addEventListener('load', () => {\n                const { response } = xhr;\n\n                // Something went wrong either with the request or server\n                if (xhr.status >= 400) {\n                    fail();\n                    return;\n                }\n\n                // Parse JSON responses\n                if (responseType === 'json') {\n                    parseJSON(response)\n                        .then(json => {\n                            if (json.success) {\n                                const data = humps.camelizeKeys(json.data);\n                                resolve(data);\n                            } else {\n                                const error = new Error('Request failed');\n                                error.errors = json.errors;\n                                reject(error);\n                            }\n                        })\n                        .catch(reject);\n                } else {\n                    resolve(response);\n                }\n            });\n\n            // Request failed\n            xhr.addEventListener('error', fail);\n\n            // Start the request\n            xhr.open(type, url, true);\n\n            // Set the required response type\n            // 'json' responseType is much slower, so we parse later\n            // https://github.com/arendjr/fetch-vs-xhr-perf\n            if (responseType !== 'json') {\n                xhr.responseType = responseType;\n            }\n\n            // Send data if passed\n            xhr.send(buildFormData(body));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// Common fetch actions\n// ==========================================================================\n\nimport fetch from './fetch';\n\nconst queue = {};\n\nconst http = {\n    /**\n     * GET remote URL and parse as JSON\n     * @param {String} url - The endpoint URL\n     */\n    get(url) {\n        // Queue requests to prevent hammering\n        if (!Object.keys(queue).includes(url)) {\n            queue[url] = fetch(url);\n\n            const remove = () => {\n                delete queue[url];\n            };\n\n            // Remove from queue on completed\n            queue[url].then(remove).catch(remove);\n        }\n\n        return queue[url];\n    },\n\n    /**\n     * POST to remote URL and parse as JSON\n     * @param {String} url - The endpoint URL\n     * @param {Object} data - The POST data payload\n     */\n    post(url, data = {}) {\n        const options = {\n            type: 'POST',\n            body: data,\n        };\n\n        return fetch(url, options);\n    },\n};\n\nexport default http;\n","// ==========================================================================\n// Array utils\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Remove duplicates in an array\n * @param {array} array\n */\nexport function dedupe(array) {\n    if (!is.array(array)) {\n        return array;\n    }\n\n    return array.filter((item, index) => array.indexOf(item) === index);\n}\n\n// Rounding methods for .closest()\nconst closestRounding = {\n    none: 0,\n    ceil: 1,\n    floor: 2,\n};\nexport { closestRounding };\n\n/**\n * Get the closest value in an array\n * @param {array} array\n * @param {number} value\n * @param {number} rounding\n */\nexport function closest(array, value, rounding = closestRounding.none) {\n    if (!is.array(array) || !array.length) {\n        return null;\n    }\n\n    return array.reduce((prev, curr) => {\n        if (Math.abs(curr - value) <= Math.abs(prev - value)) {\n            switch (rounding) {\n                case closestRounding.ceil:\n                    return curr >= value ? curr : prev;\n\n                case closestRounding.floor:\n                    return curr <= value ? curr : prev;\n\n                default:\n                    return curr;\n            }\n        }\n\n        return prev;\n    });\n}\n","// ==========================================================================\n// Local storage wrapper\n// TODO: methods should return promises?\n// ==========================================================================\n\nimport Store from '../classes/Store/Store';\nimport { dedupe } from './arrays';\nimport is from './is';\nimport { extend } from './objects';\nimport parseUrl from './parseUrl';\n\nconst storage = new Map();\n\nconst getKey = url => {\n    if (url === null) {\n        return null;\n    }\n\n    const parsed = parseUrl(url);\n\n    if (parsed === null) {\n        return null;\n    }\n\n    return `${parsed.host}${parsed.pathname}`.replace(/\\/$/, '');\n};\n\nclass Storage {\n    constructor(config) {\n        this.config = {\n            keys: {\n                root: 'selz-js-sdk',\n                carts: 'carts',\n                stores: 'stores',\n            },\n            ttl: 3600, // 1 hour\n            schema: new Date('2018-07-02').getTime(), // Schema version (allowing us to change data schema and invalidate storage)\n\n            ...config,\n        };\n\n        this.purge();\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        if (!window.localStorage) {\n            return false;\n        }\n\n        const key = '___test';\n\n        // Try to use it\n        try {\n            window.localStorage.setItem(key, key);\n            window.localStorage.removeItem(key);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        let data = storage.get(this.config.keys.root);\n\n        // Grab from real storage if we can or use faux-storage\n        if (Storage.supported) {\n            const stored = window.localStorage.getItem(this.config.keys.root);\n\n            if (!is.empty(stored)) {\n                data = JSON.parse(stored);\n            }\n        }\n\n        if (is.empty(data)) {\n            return null;\n        }\n\n        if (!is.empty(key)) {\n            return Object.keys(data).includes(key) ? data[key] : null;\n        }\n\n        return data;\n    }\n\n    set(key, value, merge = false) {\n        // Get current storage\n        const data = this.get() || {};\n\n        // Extend with the new data\n        if (merge && Object.keys(data).includes(key)) {\n            data[key] = extend(data[key], value);\n        } else {\n            data[key] = value;\n        }\n\n        // Set in faux-storage\n        storage.set(this.config.keys.root, data);\n\n        // Bail if no real support\n        if (!Storage.supported) {\n            return;\n        }\n\n        // Set schema version\n        data.schema = this.config.schema;\n\n        // Update storage\n        try {\n            window.localStorage.setItem(this.config.keys.root, JSON.stringify(data));\n        } catch (e) {\n            // Do nothing\n        }\n    }\n\n    // Clean up stale storage\n    purge() {\n        // Check schema\n        const data = this.get();\n\n        // Nothing to purge\n        if (is.empty(data)) {\n            return;\n        }\n\n        // If schema does not match, kill it\n        if (Number(data.schema) !== this.config.schema) {\n            window.localStorage.removeItem(this.config.keys.root);\n            return;\n        }\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n\n        // Nothing to cleanup\n        if (is.empty(stores)) {\n            return;\n        }\n\n        // Check TTL is valid\n        this.set(\n            this.config.keys.stores,\n            stores.filter(store => {\n                const ttl = Number(store.ttl);\n                return ttl > 0 && ttl > Date.now();\n            }),\n        );\n    }\n\n    getCarts(store) {\n        const data = this.get(this.config.keys.carts) || {};\n\n        // If no carts\n        if (is.empty(data)) {\n            return null;\n        }\n\n        // Get all carts\n        if (!is.number(store)) {\n            return data;\n        }\n\n        // Store not found\n        if (!Object.keys(data).includes(store.toString())) {\n            return null;\n        }\n\n        // Get all for a store\n        return data[store.toString()];\n    }\n\n    getCart(store, currency) {\n        const carts = this.getCarts(store);\n\n        // No carts\n        if (is.empty(carts)) {\n            return null;\n        }\n\n        // Get all for a store\n        if (!is.string(currency)) {\n            return carts;\n        }\n\n        // Currency not found\n        if (!Object.keys(carts).includes(currency.toUpperCase())) {\n            return null;\n        }\n\n        return carts[currency.toUpperCase()];\n    }\n\n    setCart(store, currency, cart) {\n        this.set(\n            this.config.keys.carts,\n            {\n                [store]: {\n                    [currency.toUpperCase()]: {\n                        id: cart.id,\n                        active: cart.active,\n                    },\n                },\n            },\n            true,\n        );\n    }\n\n    setCarts(store, carts = {}) {\n        this.set(this.config.keys.carts, {\n            [store]: carts,\n        });\n    }\n\n    getStore(input) {\n        let store = null;\n\n        if (!is.number(input) && !is.url(input)) {\n            return null;\n        }\n\n        const stores = this.get(this.config.keys.stores) || [];\n\n        if (is.number(input)) {\n            store = stores.find(s => is.object(s.data) && s.data.id === input);\n        } else if (is.url(input)) {\n            const key = getKey(input);\n\n            // Bail if invalid URL\n            if (key === null) {\n                return null;\n            }\n\n            store = stores.find(s => is.array(s.urls) && s.urls.includes(key));\n        }\n\n        if (!is.object(store)) {\n            return null;\n        }\n\n        // Check TTL is valid\n        const ttl = Number(store.ttl);\n\n        if (ttl > 0 && ttl < Date.now()) {\n            this.purge();\n            return null;\n        }\n\n        return new Store(store.data);\n    }\n\n    setStore(data, url = null) {\n        // Strip the protocol from the lookup url\n        const key = getKey(url);\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n        let existing = null;\n\n        if (!is.empty(stores)) {\n            // Find existing store by id\n            existing = stores.find(s => s.data.id === data.id);\n        }\n\n        // Extend TTL each\n        const ttl = Date.now() + this.config.ttl;\n\n        // If we found something\n        if (is.object(existing)) {\n            // Update data and extend TTL\n            Object.assign(existing, {\n                data,\n                ttl,\n            });\n\n            if (key !== null) {\n                // Add the URL key for later lookup\n                if (!is.array(existing.urls)) {\n                    existing.urls = [key];\n                } else {\n                    existing.urls.push(key);\n                }\n\n                // Remove duplicate entries\n                const urls = dedupe(existing.urls);\n\n                // Add to existing record\n                Object.assign(existing, {\n                    urls,\n                });\n            }\n        } else {\n            const store = {\n                data,\n                ttl,\n            };\n\n            if (key !== null) {\n                Object.assign(store, {\n                    urls: [key],\n                });\n            }\n\n            stores.push(store);\n        }\n\n        this.set(this.config.keys.stores, stores);\n    }\n}\n\nexport default Storage;\n","/**\n * Parse a string to URL object\n * @param {String} url\n */\nexport default function parseUrl(url) {\n    let string = url;\n\n    // Add the protocol if required\n    if (!/^https?:\\/\\/*/.test(url)) {\n        string = `http://${url}`;\n    }\n\n    try {\n        return new URL(string);\n    } catch (e) {\n        return null;\n    }\n}\n"]}