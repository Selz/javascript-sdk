{"version":3,"sources":["src/client.js","src/utils/is.js","src/config.js","src/models/Product.js","src/models/Cart.js","src/models/Category.js","src/models/Store.js","src/utils/strings.js","src/utils/form-data.js","src/utils/objects.js","src/utils/parseUrl.js","src/utils/fetch.js","src/utils/http.js","src/utils/arrays.js","src/utils/storage.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","_defineProperty","value","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","Array","isArray","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","getConstructor","input","instanceOf","isObject","isNumber","Number","isNaN","isString","String","isBoolean","Boolean","isFunction","Function","isNullOrUndefined","isObjectId","test","isCurrencyCode","isEmpty","keys","isUrl","strict","arguments","window","URL","string","concat","hostname","e","is","array","object","number","boolean","function","nullOrUndefined","objectId","currencyCode","url","empty","getBase","env","config","urls","product","products","id","keyword","category","page","categories","store","createCart","getCart","checkCarts","ids","addToCart","updateCartItemQuantity","removeFromCart","client","ProductUrls","a","this","assign","ProductImage","image","ProductMedia","media","cover","ProductFile","file","ProductVariant","variant","selected","ProductVariantAttributeOption","label","ProductVariantAttribute","options","map","Product","variantId","images","files","hasVariants","variants","hasVariantAttributes","variantAttributes","attribute","get","find","CartItem","item","cartId","Cart","cart","active","items","from","index","Category","Store","name","version","description","homepage","main","module$1","repository","type","keywords","author","license","bugs","browserslist","scripts","lint","build","watch","deploy","devDependencies","ansi-colors","aws-sdk","@babel/core","@babel/preset-env","babel-eslint","babel-preset-minify","del","eslint","eslint-config-airbnb-base","eslint-config-prettier","eslint-plugin-import","fancy-log","gulp","gulp-awspublish","gulp-better-rollup","gulp-plumber","gulp-rename","gulp-replace","gulp-s3","gulp-size","gulp-sourcemaps","gulp-terser","rollup-plugin-babel","rollup-plugin-commonjs","rollup-plugin-json","rollup-plugin-node-resolve","rollup-plugin-uglify","pkg","module","jsnext:main","replaceAll","replace","RegExp","toString","toTitleCase","text","charAt","toUpperCase","substr","toLowerCase","toPascalCase","buildFormData","formKey","source","form","namespace","data","FormData","forEach","File","append","extend","b","sources","d","shift","includes","apply","parseJSON","Promise","resolve","reject","JSON","parse","error","parseUrl","defaults","body","responseType","fetch","c","xhr","XMLHttpRequest","Error","request","fail","status","addEventListener","response","then","json","success","errors","catch","endpoint","searchParams","set","open","send","queue","http","remove","post","dedupe","filter","indexOf","storage","Map","getKey","parsed","host","pathname","Storage","root","carts","stores","ttl","schema","Date","getTime","purge","supported","stored","localStorage","getItem","merge","setItem","stringify","removeItem","now","currency","getCarts","s","existing","Client","getStore","cached","setStore","getStoreId","p","discount","setCart","currentCart","isCurrency","getCartId","activeId","getActiveCart","validate","join","entries","setCarts","values","setActiveCart","currencies","quantity","CartAddItem"],"mappings":"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","file":"client.mjs","sourcesContent":["import config from './config';\nimport { Cart, CartItem } from './models/Cart';\nimport Category from './models/Category';\nimport Product from './models/Product';\nimport Store from './models/Store';\nimport http from './utils/http';\nimport is from './utils/is';\nimport Storage from './utils/storage';\n\nclass Client {\n    constructor(props) {\n        const { env, store, source } = props;\n\n        this.env = !is.empty(env) ? env : '';\n        this.store = store;\n        this.source = source;\n\n        if (!is.url(store) && !is.number(store)) {\n            throw Error('A store ID or URL is required to create a client');\n        }\n\n        this.storage = new Storage();\n    }\n\n    /**\n     * Get the store ID only\n     */\n    getStoreId() {\n        return new Promise((resolve, reject) => {\n            if (is.number(this.store)) {\n                resolve(this.store);\n                return;\n            }\n\n            if (this.store instanceof Store) {\n                resolve(this.store.id);\n                return;\n            }\n\n            // URL is required\n            if (!is.url(this.store)) {\n                reject(new Error('Url is required for user lookup'));\n            }\n\n            // Get by URL\n            this.getStore()\n                .then(store => {\n                    resolve(store.id);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the Store for current instance\n     */\n    getStore() {\n        return new Promise((resolve, reject) => {\n            // Try from cache by ID or URL\n            if (is.number(this.store) || is.url(this.store)) {\n                const cached = this.storage.getStore(this.store);\n\n                // Return cached if we have it\n                if (cached !== null && cached instanceof Store) {\n                    resolve(cached);\n                    return;\n                }\n            }\n\n            // If already fetched\n            if (this.store instanceof Store) {\n                resolve(this.store);\n                return;\n            }\n\n            // Fetch from remote by ID or URL\n            const url = config.urls.store(this.env, this.store);\n\n            http.get(url)\n                .then(store => {\n                    this.setStore(store);\n                    resolve(this.store);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the store details\n     * @param {object} store\n     */\n    setStore(store) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Store reference to lookup URL\n        const url = is.url(this.store) ? this.store : null;\n\n        // Map to Store\n        this.store = new Store(store);\n\n        // Add to storage for cache\n        this.storage.setStore(this.store, url);\n    }\n\n    /**\n     * Get product data\n     * @param {String} url - Short or full URL for a product\n     */\n    getProduct(url) {\n        return new Promise((resolve, reject) => {\n            http.get(config.urls.product(this.env, url))\n                .then(json => {\n                    if (!(this.store instanceof Store)) {\n                        this.setStore(json.store);\n                    }\n\n                    resolve(new Product(this, json));\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all products\n     */\n    getProducts(keyword = '', category = '', page = 1) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    http.get(\n                        config.urls.products(\n                            this.env,\n                            id,\n                            !is.empty(keyword) ? keyword : '',\n                            is.string(category) ? category : '',\n                            !is.number(page) || page < 1 ? 1 : page,\n                        ),\n                    )\n                        .then(json => {\n                            resolve(\n                                Object.assign({}, json, {\n                                    products: json.products.map(p => new Product(this, p)),\n                                }),\n                            );\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all categories\n     */\n    getCategories() {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    http.get(config.urls.categories(this.env, id))\n                        .then(json => {\n                            resolve(\n                                Object.assign({}, json, {\n                                    categories: json.categories.map(c => new Category(c)),\n                                }),\n                            );\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Create a new shopping cart\n     * @param {String} currency - ISO currency code\n     * @param {String} discount - Discount code\n     */\n    createCart(currency, discount) {\n        return new Promise((resolve, reject) => {\n            if (is.empty(currency)) {\n                reject(new Error('currency is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n\n                    http.post(config.urls.createCart(this.env, id), {\n                        currency: currencyCode,\n                        discount: !is.empty(discount) ? discount : null,\n                        source: this.source,\n                    })\n                        .then(json => {\n                            const cart = new Cart(this, json);\n\n                            // Store reference to cart id for later\n                            this.storage.setCart(id, currencyCode, cart);\n\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart or create one if needed\n     * @param {String} currency - The shopping cart ISO currency code\n     */\n    getCartId(currency) {\n        return new Promise((resolve, reject) => {\n            if (!is.currencyCode(currency)) {\n                reject(new Error('A valid currency code is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n                    const currentCart = this.storage.getCart(id, currencyCode);\n\n                    // Create cart if it doesn't exist\n                    if (is.empty(currentCart)) {\n                        this.createCart(currencyCode)\n                            .then(cart => resolve(cart.id))\n                            .catch(reject);\n                    } else {\n                        resolve(currentCart.id);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart\n     * @param {String} input - The shopping cart ISO currency code or cart ID\n     */\n    getCart(input) {\n        return new Promise((resolve, reject) => {\n            const isCurrency = is.currencyCode(input);\n            const isObjectId = is.objectId(input);\n\n            if (!isCurrency && !isObjectId) {\n                reject(new Error('A valid currency code or cart id are required'));\n                return;\n            }\n\n            if (isCurrency) {\n                const currencyCode = input.toUpperCase();\n\n                this.getCartId(currencyCode)\n                    .then(id => {\n                        if (is.empty(id)) {\n                            reject(new Error(`Could not find matching cart for currency code '${currencyCode}'`));\n                            return;\n                        }\n\n                        this.getCart(id)\n                            .then(cart => {\n                                // Update store\n                                this.setStore(cart.store);\n\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    })\n                    .catch(reject);\n            } else {\n                http.get(config.urls.getCart(this.env, input))\n                    .then(json => {\n                        const activeId = this.getActiveCart();\n                        const cart = new Cart(this, json, json.id === activeId);\n\n                        // Update store\n                        this.setStore(cart.store);\n\n                        resolve(cart);\n                    })\n                    .catch(reject);\n            }\n        });\n    }\n\n    /**\n     * Get all current carts\n     */\n    getCarts(validate = true) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (is.empty(carts)) {\n                        resolve(null);\n                        return;\n                    }\n\n                    // Check the carts still exist in the server\n                    if (validate) {\n                        const ids = Object.keys(carts).map(currency => carts[currency].id);\n\n                        http.get(config.urls.checkCarts(this.env, ids.join(',')))\n                            .then(json => {\n                                // Remove non existant carts\n                                Object.entries(json).forEach(([cartId, exists]) => {\n                                    if (!exists) {\n                                        const currency = Object.keys(carts).find(c => carts[c].id === cartId);\n                                        delete carts[currency];\n                                    }\n                                });\n\n                                // Store again\n                                this.storage.setCarts(id, carts);\n\n                                // Set active\n                                if (!Object.values(carts).find(cart => cart.active)) {\n                                    this.setActiveCart()\n                                        .then(resolve)\n                                        .catch(reject);\n                                } else {\n                                    resolve(carts);\n                                }\n                            })\n                            .catch(reject);\n                    } else {\n                        resolve(carts);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the active cart based on currency\n     * @param {String} input - The shopping cart ISO currency code or cart ID\n     */\n    setActiveCart(input = null) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    this.getCarts(false).then(data => {\n                        const carts = data;\n\n                        // No carts\n                        if (is.empty(carts)) {\n                            resolve(null);\n                            return;\n                        }\n\n                        // Currency code was passed...\n                        if (is.currencyCode(input)) {\n                            const currencyCode = input.toUpperCase();\n                            const currencies = Object.keys(carts);\n\n                            // Bail if not included\n                            if (!currencies.includes(currencyCode)) {\n                                reject(new Error(`No carts for ${currencyCode}`));\n                                return;\n                            }\n\n                            // Set active\n                            currencies.forEach(currency => {\n                                carts[currency].active = currency === currencyCode;\n                            });\n                        } else {\n                            // Set to id if specified, otherwise first\n                            const cartId = is.objectId(input) ? input : carts[Object.keys(carts)[0]].id;\n\n                            // Set active\n                            Object.keys(carts).forEach(currency => {\n                                const cart = carts[currency];\n                                cart.active = cart.id === cartId;\n                            });\n                        }\n\n                        // Store again\n                        this.storage.setCarts(id, carts);\n\n                        resolve(carts);\n                    });\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the current active cart\n     */\n    getActiveCart(fetch = false) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (!Object.keys(carts).length) {\n                        resolve(null);\n                        return;\n                    }\n\n                    const active = Object.values(carts).find(cart => cart.active);\n\n                    if (!active) {\n                        resolve(null);\n                        return;\n                    }\n\n                    if (!fetch) {\n                        resolve(active.id);\n                        return;\n                    }\n\n                    this.getCart(active.id)\n                        .then(resolve)\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Add a product to a cart\n     * @param {String} id - The cart ID\n     * @param {Object} product - The product details\n     */\n    addToCart(id, product) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(product)) {\n                reject(new Error('A valid product is required'));\n                return;\n            }\n\n            http.post(config.urls.addToCart(this.env, id), product)\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Update an items quantity in the shopping cart\n     * @param {String} id - The shopping cart ID\n     * @param {String} index - The shopping cart item quid\n     * @param {Number} quantity - Desired quantity\n     */\n    updateCartItemQuantity(id, index, quantity = 1) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.updateCartItemQuantity(this.env, id), { index, quantity })\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Remove a product from a cart\n     * @param {String} id - The shopping cart id\n     * @param {String} index - The shopping cart item guid\n     */\n    removeFromCart(id, index) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.removeFromCart(this.env, id), { index })\n                .then(json => {\n                    // If there's actually a cart left, map it\n                    if (!is.empty(json)) {\n                        const cart = new Cart(this, json, true);\n\n                        // Set the active cart\n                        this.setActiveCart(cart.id)\n                            .then(() => {\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    } else {\n                        // Otherwise, update carts (as one removed)\n                        this.getCarts()\n                            .then(() => resolve(null))\n                            .catch(reject);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n}\n\nexport { Product, Category, Cart, CartItem, CartAddItem, Store };\n\nexport default Client;\n","// ==========================================================================\n// Type checking\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\nconst isArray = input => Array.isArray(input);\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObjectId = input => isString(input) && /^[a-f\\d]{24}$/i.test(input);\nconst isCurrencyCode = input => isString(input) && /^[A-z]{3}$/.test(input);\n\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nconst isUrl = (input, strict = false) => {\n    // Accept a URL object\n    if (instanceOf(input, window.URL)) {\n        return true;\n    }\n\n    // Add the protocol if required\n    let string = input;\n    if (!strict && !/^https?:\\/\\/*/.test(input)) {\n        string = `http://${input}`;\n    }\n\n    try {\n        return !isEmpty(new URL(string).hostname);\n    } catch (e) {\n        return false;\n    }\n};\n\nconst is = {\n    array: isArray,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    nullOrUndefined: isNullOrUndefined,\n    objectId: isObjectId,\n    currencyCode: isCurrencyCode,\n    url: isUrl,\n    empty: isEmpty,\n};\n\nexport default is;\n","import is from './utils/is';\n\nconst getBase = env => `https://${is.empty(env) ? 'sdk.selz.com' : `${env}/sdk`}/`;\n\nconst config = {\n    urls: {\n        /**\n         * Get URL for product data by URL\n         * @param {String} env - Environment (for internal use)\n         * @param {String} url - Short or full URL for a product\n         */\n        product(env, url = '') {\n            return `${getBase(env)}products/find?url=${url}`;\n        },\n\n        /**\n         * Get URL for all products by store ID\n         * @param {String} env - Environment (for internal use)\n         * @param {Number|String} id - The store ID\n         * @param {String} keyword - Search keyword\n         * @param {ObjectId|String} category - Category ID or relative path\n         * @param {Number} page - Page to fetch\n         */\n        products(env, id, keyword = '', category = '', page = 1) {\n            return `${getBase(env)}products/all/${id}?q=${keyword}&c=${category}&p=${page}`;\n        },\n\n        /**\n         * Get all categories for a given store ID\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - The store ID\n         */\n        categories(env, id) {\n            return `${getBase(env)}categories/${id}`;\n        },\n\n        /**\n         * Get URL for finding a store by URL or ID\n         * @param {String} env - Environment (for internal use)\n         * @param {Number|String} input - The ID or URL to lookup\n         */\n        store(env, input = null) {\n            if (is.number(input)) {\n                return `${getBase(env)}store/find/${input}`;\n            }\n\n            return `${getBase(env)}store/find?url=${input}`;\n        },\n\n        /**\n         * Create a new cart\n         * @param {String} env - Environment (for internal use)\n         * @param {Number} id - Store ID\n         */\n        createCart(env, id = '') {\n            return `${getBase(env)}cart/create/${id}`;\n        },\n\n        /**\n         * Get cart from ID\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        getCart(env, id = '') {\n            return `${getBase(env)}cart/${id}`;\n        },\n\n        /**\n         * Check carts still exist server side\n         * @param {String} env - Environment (for internal use)\n         * @param {Number} id - Cart IDs\n         */\n        checkCarts(env, ids = '') {\n            return `${getBase(env)}cart/verify?ids=${ids}`;\n        },\n\n        /**\n         * Add product to cart\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        addToCart(env, id = '') {\n            return `${getBase(env)}cart/add/${id}`;\n        },\n\n        /**\n         * Update a cart item quantity\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        updateCartItemQuantity(env, id = '') {\n            return `${getBase(env)}cart/updateitemquantity/${id}`;\n        },\n\n        /**\n         * Remove product from cart\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        removeFromCart(env, id = '') {\n            return `${getBase(env)}cart/remove/${id}`;\n        },\n    },\n};\n\nexport default config;\n","import is from '../utils/is';\n\nlet client = null;\n\nclass ProductUrls {\n    constructor(urls) {\n        // Take all properties by default\n        Object.assign(this, urls);\n    }\n}\n\nclass ProductImage {\n    constructor(image) {\n        // Take all properties by default\n        Object.assign(this, image);\n    }\n}\n\nclass ProductMedia {\n    constructor(media) {\n        // Take all properties by default\n        Object.assign(this, media);\n\n        // Map cover image\n        this.cover = new ProductImage(media.cover);\n    }\n}\n\nclass ProductFile {\n    constructor(file) {\n        // Take all properties by default\n        Object.assign(this, file);\n    }\n}\n\nclass ProductVariant {\n    constructor(variant, selected = '') {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        this.selected = variant.id === selected;\n    }\n}\n\nclass ProductVariantAttributeOption {\n    constructor(id, label) {\n        this.id = id;\n        this.label = label;\n    }\n}\n\nclass ProductVariantAttribute {\n    constructor(variant) {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        // Map options\n        this.options = Object.keys(variant.options).map(\n            id => new ProductVariantAttributeOption(id, variant.options[id]),\n        );\n    }\n}\n\nclass Product {\n    constructor(instance, product, variantId = '') {\n        if (!is.object(product)) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, product);\n\n        // Map store\n        this.store = client.store;\n\n        // Product URLs\n        if (is.object(product.urls)) {\n            this.urls = new ProductUrls(product.urls);\n        }\n\n        // Media (Video, YouTube, Vimeo, Audio)\n        if (is.object(product.media)) {\n            this.media = new ProductMedia(product.media);\n        }\n\n        // Images\n        if (is.array(product.images)) {\n            this.images = product.images.map(image => new ProductImage(image));\n        }\n\n        // Files for digital products\n        if (is.array(product.files)) {\n            this.files = product.files.map(file => new ProductFile(file));\n        }\n\n        // Variants\n        if (product.hasVariants) {\n            const selected = !is.empty(variantId) ? variantId : product.variants[0].id;\n            this.variants = product.variants.map(variant => new ProductVariant(variant, selected));\n        }\n        if (product.hasVariantAttributes) {\n            this.variantAttributes = product.variantAttributes.map(attribute => new ProductVariantAttribute(attribute));\n        }\n    }\n\n    get selectedVariant() {\n        if (is.empty(this.variants)) {\n            return null;\n        }\n\n        return this.variants.find(variant => variant.selected);\n    }\n}\n\nexport default Product;\n","import is from '../utils/is';\nimport Product from './Product';\n\nlet client = null;\n\nexport class CartItem {\n    constructor(item, cartId) {\n        this.cartId = cartId;\n\n        // Take all properties by default\n        Object.assign(this, item);\n\n        // Map product\n        this.product = new Product(client, item.product, item.variantId);\n    }\n}\n\nexport class CartAddItem {\n    constructor(item) {\n        this.id = null;\n        this.variant = null;\n        this.price = null;\n        this.quantity = 1;\n        this.discount = null;\n\n        if (is.product(item)) {\n            this.id = item.id;\n\n            if (is.product(item) && item.hasVariants && is.empty(item.variant)) {\n                const [defaultVariant] = item.variants;\n                this.variant = defaultVariant.id;\n            } else if (is.objectId(item.variant)) {\n                this.variant = item.variant;\n            }\n        }\n    }\n}\n\nexport class Cart {\n    constructor(instance, cart, active = false) {\n        if (cart === null) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, cart);\n\n        // Map store\n        this.store = client.store;\n\n        // Set active state\n        this.active = active;\n\n        // Map items\n        this.items = Array.from(cart.items).map(item => new CartItem(item, cart.id));\n    }\n\n    /**\n     * Add a product to this cart\n     * @param {object} product - The product details\n     */\n    add(product) {\n        return client.addToCart(this.id, product);\n    }\n\n    /**\n     * Remove a product from this cart\n     * @param {string} index\n     */\n    remove(index) {\n        return client.removeFromCart(this.id, index);\n    }\n}\n\nexport default Cart;\n","import is from '../utils/is';\n\nclass Category {\n    constructor(category = null) {\n        if (!is.object(category)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, category);\n    }\n}\n\nexport default Category;\n","import is from '../utils/is';\n\nclass Store {\n    constructor(store = null) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, store);\n    }\n}\n\nexport default Store;\n","// ==========================================================================\n// String utils\n// ==========================================================================\n\n// Replace all occurances of a string in a string\nexport function replaceAll(input = '', find = '', replace = '') {\n    return input.replace(\n        new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'),\n        replace.toString(),\n    );\n}\n\n// Convert to title case\nexport function toTitleCase(input = '') {\n    return input.toString().replace(/\\w\\S*/g, text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase());\n}\n\n// Convert string to pascalCase\nexport function toPascalCase(input = '') {\n    let string = input.toString();\n\n    // Convert kebab case\n    string = replaceAll(string, '-', ' ');\n\n    // Convert snake case\n    string = replaceAll(string, '_', ' ');\n\n    // Convert to title case\n    string = toTitleCase(string);\n\n    // Convert to pascal case\n    return replaceAll(string, ' ', '');\n}\n\n// Convert string to pascalCase\nexport function toCamelCase(input = '') {\n    let string = input.toString();\n\n    // Convert to pascal case\n    string = toPascalCase(string);\n\n    // Convert first character to lowercase\n    return string.charAt(0).toLowerCase() + string.slice(1);\n}\n","// ==========================================================================\n// Form Data utils\n// ==========================================================================\n\nimport is from './is';\nimport { toPascalCase } from './strings';\n\n/**\n * Convert an Object to FormData\n * @param {Object} source - source Object\n * @param {FormData} form - existing FormData object\n * @param {String} namespace - namespace for FormData\n */\nconst buildFormData = (source = {}, form, namespace) => {\n    const data = form || new FormData();\n    let formKey;\n\n    // Source must be an object\n    if (!is.object(source)) {\n        return data;\n    }\n\n    // Loop through the object to convert\n    Object.keys(source).forEach(key => {\n        if (namespace) {\n            formKey = `${namespace}[${key}]`;\n        } else {\n            formKey = key;\n        }\n\n        // If the property is an object, but not a File, use recursivity\n        if (typeof source[key] === 'object' && !(source[key] instanceof File)) {\n            buildFormData(source[key], data, key);\n        } else {\n            data.append(toPascalCase(formKey), source[key]);\n        }\n    });\n\n    return data;\n};\n\nexport default buildFormData;\n","// ==========================================================================\n// Extend objects\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Deep extend destination object with N more objects\n * @param {Object} target\n * @param {...Object} sources\n */\nexport function extend(target = {}, ...sources) {\n    if (!sources.length) {\n        return target;\n    }\n\n    const source = sources.shift();\n\n    if (!is.object(source)) {\n        return target;\n    }\n\n    Object.keys(source).forEach(key => {\n        if (is.object(source[key])) {\n            if (!Object.keys(target).includes(key)) {\n                Object.assign(target, { [key]: {} });\n            }\n\n            extend(target[key], source[key]);\n        } else {\n            Object.assign(target, { [key]: source[key] });\n        }\n    });\n\n    return extend(target, ...sources);\n}\n\n/**\n * Safer JSON parsing\n * @param {Object} data\n */\nexport function parseJSON(data = {}) {\n    return new Promise((resolve, reject) => {\n        try {\n            resolve(JSON.parse(data));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","/**\n * Parse a string to URL object\n * @param {String} url\n */\nexport default function parseUrl(url) {\n    let string = url;\n\n    // Add the protocol if required\n    if (!/^https?:\\/\\/*/.test(url)) {\n        string = `http://${url}`;\n    }\n\n    try {\n        return new URL(string);\n    } catch (e) {\n        return null;\n    }\n}\n","// ==========================================================================\n// Fetch\n// ==========================================================================\n\nimport pkg from '../../package.json';\nimport buildFormData from './form-data';\nimport { extend, parseJSON } from './objects';\nimport parseUrl from './parseUrl';\n\nconst { version } = pkg;\n\nconst defaults = {\n    type: 'GET',\n    body: {},\n    responseType: 'json',\n};\n\n/**\n * Custom immitation fetch using XHR\n * @param {String} url - The URL of the endpoint\n * @param {Object} options - Object of options for the request\n */\nexport default function(url, options = {}) {\n    const { type, body, responseType } = extend({}, defaults, options);\n\n    return new Promise((resolve, reject) => {\n        try {\n            const xhr = new XMLHttpRequest();\n\n            // Check for CORS support\n            if (!('withCredentials' in xhr)) {\n                const error = new Error('No CORS support');\n                error.request = xhr;\n                throw error;\n            }\n\n            // Handle failures\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status\n            const fail = () => {\n                const error = new Error(xhr.status);\n                error.request = xhr;\n                reject(error);\n            };\n\n            // Successfully made the request\n            xhr.addEventListener('load', () => {\n                const { response } = xhr;\n\n                // Something went wrong either with the request or server\n                if (xhr.status >= 400) {\n                    fail();\n                    return;\n                }\n\n                // Parse JSON responses\n                if (responseType === 'json') {\n                    parseJSON(response)\n                        .then(json => {\n                            if (json.success) {\n                                resolve(json.data);\n                            } else {\n                                const error = new Error('Request failed');\n                                error.errors = json.errors;\n                                reject(error);\n                            }\n                        })\n                        .catch(reject);\n                } else {\n                    resolve(response);\n                }\n            });\n\n            // Request failed\n            xhr.addEventListener('error', fail);\n\n            // Add version to URL\n            const endpoint = parseUrl(url);\n            endpoint.searchParams.set('v', version);\n\n            // Start the request\n            xhr.open(type, endpoint, true);\n\n            // Add version header\n            // xhr.setRequestHeader('x-sdk-version', version);\n\n            // Set the required response type\n            // 'json' responseType is much slower, so we parse later\n            // https://github.com/arendjr/fetch-vs-xhr-perf\n            if (responseType !== 'json') {\n                xhr.responseType = responseType;\n            }\n\n            // Send data if passed\n            xhr.send(buildFormData(body));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// Common fetch actions\n// ==========================================================================\n\nimport fetch from './fetch';\n\nconst queue = {};\n\nconst http = {\n    /**\n     * GET remote URL and parse as JSON\n     * @param {string} url - The endpoint URL\n     */\n    get(url) {\n        // Queue requests to prevent hammering\n        if (!Object.keys(queue).includes(url)) {\n            queue[url] = fetch(url);\n\n            const remove = () => {\n                delete queue[url];\n            };\n\n            // Remove from queue on completed\n            queue[url].then(remove).catch(remove);\n        }\n\n        return queue[url];\n    },\n\n    /**\n     * POST to remote URL and parse as JSON\n     * @param {string} url - The endpoint URL\n     * @param {object} data - The POST data payload\n     */\n    post(url, data = {}) {\n        const options = {\n            type: 'POST',\n            body: data,\n        };\n\n        return fetch(url, options);\n    },\n};\n\nexport default http;\n","// ==========================================================================\n// Array utils\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Remove duplicates in an array\n * @param {array} array\n */\nexport function dedupe(array) {\n    if (!is.array(array)) {\n        return array;\n    }\n\n    return array.filter((item, index) => array.indexOf(item) === index);\n}\n\n// Rounding methods for .closest()\nconst closestRounding = {\n    none: 0,\n    ceil: 1,\n    floor: 2,\n};\nexport { closestRounding };\n\n/**\n * Get the closest value in an array\n * @param {array} array\n * @param {number} value\n * @param {number} rounding\n */\nexport function closest(array, value, rounding = closestRounding.none) {\n    if (!is.array(array) || !array.length) {\n        return null;\n    }\n\n    return array.reduce((prev, curr) => {\n        if (Math.abs(curr - value) <= Math.abs(prev - value)) {\n            switch (rounding) {\n                case closestRounding.ceil:\n                    return curr >= value ? curr : prev;\n\n                case closestRounding.floor:\n                    return curr <= value ? curr : prev;\n\n                default:\n                    return curr;\n            }\n        }\n\n        return prev;\n    });\n}\n","// ==========================================================================\n// Local storage wrapper\n// TODO: methods should return promises?\n// ==========================================================================\n\nimport Store from '../models/Store';\nimport { dedupe } from './arrays';\nimport is from './is';\nimport { extend } from './objects';\nimport parseUrl from './parseUrl';\n\nconst storage = new Map();\n\nconst getKey = url => {\n    if (url === null) {\n        return null;\n    }\n\n    const parsed = parseUrl(url);\n\n    if (parsed === null) {\n        return null;\n    }\n\n    return `${parsed.host}${parsed.pathname}`.replace(/\\/$/, '');\n};\n\nclass Storage {\n    constructor(config) {\n        this.config = Object.assign(\n            {\n                keys: {\n                    root: 'selz-js-sdk',\n                    carts: 'carts',\n                    stores: 'stores',\n                },\n                ttl: 3600, // 1 hour\n                schema: new Date('2018-07-02').getTime(), // Schema version (allowing us to change data schema and invalidate storage)\n            },\n            config,\n        );\n\n        this.purge();\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        if (!window.localStorage) {\n            return false;\n        }\n\n        const key = '___test';\n\n        // Try to use it\n        try {\n            window.localStorage.setItem(key, key);\n            window.localStorage.removeItem(key);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        let data = storage.get(this.config.keys.root);\n\n        // Grab from real storage if we can or use faux-storage\n        if (Storage.supported) {\n            const stored = window.localStorage.getItem(this.config.keys.root);\n\n            if (!is.empty(stored)) {\n                data = JSON.parse(stored);\n            }\n        }\n\n        if (is.empty(data)) {\n            return null;\n        }\n\n        if (!is.empty(key)) {\n            return Object.keys(data).includes(key) ? data[key] : null;\n        }\n\n        return data;\n    }\n\n    set(key, value, merge = false) {\n        // Get current storage\n        const data = this.get() || {};\n\n        // Extend with the new data\n        if (merge && Object.keys(data).includes(key)) {\n            data[key] = extend(data[key], value);\n        } else {\n            data[key] = value;\n        }\n\n        // Set in faux-storage\n        storage.set(this.config.keys.root, data);\n\n        // Bail if no real support\n        if (!Storage.supported) {\n            return;\n        }\n\n        // Set schema version\n        data.schema = this.config.schema;\n\n        // Update storage\n        try {\n            window.localStorage.setItem(this.config.keys.root, JSON.stringify(data));\n        } catch (e) {\n            // Do nothing\n        }\n    }\n\n    // Clean up stale storage\n    purge() {\n        // Check schema\n        const data = this.get();\n\n        // Nothing to purge\n        if (is.empty(data)) {\n            return;\n        }\n\n        // If schema does not match, kill it\n        if (Number(data.schema) !== this.config.schema) {\n            window.localStorage.removeItem(this.config.keys.root);\n            return;\n        }\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n\n        // Nothing to cleanup\n        if (is.empty(stores)) {\n            return;\n        }\n\n        // Check TTL is valid\n        this.set(\n            this.config.keys.stores,\n            stores.filter(store => {\n                const ttl = Number(store.ttl);\n                return ttl > 0 && ttl > Date.now();\n            }),\n        );\n    }\n\n    getCarts(store) {\n        const data = this.get(this.config.keys.carts) || {};\n\n        // If no carts\n        if (is.empty(data)) {\n            return null;\n        }\n\n        // Get all carts\n        if (!is.number(store)) {\n            return data;\n        }\n\n        // Store not found\n        if (!Object.keys(data).includes(store.toString())) {\n            return null;\n        }\n\n        // Get all for a store\n        return data[store.toString()];\n    }\n\n    getCart(store, currency) {\n        const carts = this.getCarts(store);\n\n        // No carts\n        if (is.empty(carts)) {\n            return null;\n        }\n\n        // Get all for a store\n        if (!is.string(currency)) {\n            return carts;\n        }\n\n        // Currency not found\n        if (!Object.keys(carts).includes(currency.toUpperCase())) {\n            return null;\n        }\n\n        return carts[currency.toUpperCase()];\n    }\n\n    setCart(store, currency, cart) {\n        this.set(\n            this.config.keys.carts,\n            {\n                [store]: {\n                    [currency.toUpperCase()]: {\n                        id: cart.id,\n                        active: cart.active,\n                    },\n                },\n            },\n            true,\n        );\n    }\n\n    setCarts(store, carts = {}) {\n        this.set(this.config.keys.carts, {\n            [store]: carts,\n        });\n    }\n\n    getStore(input) {\n        let store = null;\n\n        if (!is.number(input) && !is.url(input)) {\n            return null;\n        }\n\n        const stores = this.get(this.config.keys.stores) || [];\n\n        if (is.number(input)) {\n            store = stores.find(s => is.object(s.data) && s.data.id === input);\n        } else if (is.url(input)) {\n            const key = getKey(input);\n\n            // Bail if invalid URL\n            if (key === null) {\n                return null;\n            }\n\n            store = stores.find(s => is.array(s.urls) && s.urls.includes(key));\n        }\n\n        if (!is.object(store)) {\n            return null;\n        }\n\n        // Check TTL is valid\n        const ttl = Number(store.ttl);\n\n        if (ttl > 0 && ttl < Date.now()) {\n            this.purge();\n            return null;\n        }\n\n        return new Store(store.data);\n    }\n\n    setStore(data, url = null) {\n        // Strip the protocol from the lookup url\n        const key = getKey(url);\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n        let existing = null;\n\n        if (!is.empty(stores)) {\n            // Find existing store by id\n            existing = stores.find(s => s.data.id === data.id);\n        }\n\n        // Extend TTL each\n        const ttl = Date.now() + this.config.ttl;\n\n        // If we found something\n        if (is.object(existing)) {\n            // Update data and extend TTL\n            Object.assign(existing, {\n                data,\n                ttl,\n            });\n\n            if (key !== null) {\n                // Add the URL key for later lookup\n                if (!is.array(existing.urls)) {\n                    existing.urls = [key];\n                } else {\n                    existing.urls.push(key);\n                }\n\n                // Remove duplicate entries\n                const urls = dedupe(existing.urls);\n\n                // Add to existing record\n                Object.assign(existing, {\n                    urls,\n                });\n            }\n        } else {\n            const store = {\n                data,\n                ttl,\n            };\n\n            if (key !== null) {\n                Object.assign(store, {\n                    urls: [key],\n                });\n            }\n\n            stores.push(store);\n        }\n\n        this.set(this.config.keys.stores, stores);\n    }\n}\n\nexport default Storage;\n"]}