{"version":3,"file":"client.mjs","sources":["src/utils/is.js","src/config.js","src/models/Product.js","src/models/Cart.js","src/models/Store.js","src/utils/strings.js","src/utils/form-data.js","src/utils/objects.js","src/utils/fetch.js","src/utils/http.js","src/utils/arrays.js","src/utils/parseUrl.js","src/utils/storage.js","src/client.js"],"sourcesContent":["// ==========================================================================\n// Type checking\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\nconst isArray = input => Array.isArray(input);\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObjectId = input => isString(input) && /^[a-f\\d]{24}$/i.test(input);\nconst isCurrencyCode = input => isString(input) && /^[A-z]{3}$/.test(input);\n\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nconst isUrl = (input, strict = false) => {\n    // Accept a URL object\n    if (instanceOf(input, window.URL)) {\n        return true;\n    }\n\n    // Add the protocol if required\n    let string = input;\n    if (!strict && !/^https?:\\/\\/*/.test(input)) {\n        string = `http://${input}`;\n    }\n\n    try {\n        return !isEmpty(new URL(string).hostname);\n    } catch (e) {\n        return false;\n    }\n};\n\nconst is = {\n    array: isArray,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    nullOrUndefined: isNullOrUndefined,\n    objectId: isObjectId,\n    currencyCode: isCurrencyCode,\n    url: isUrl,\n    empty: isEmpty,\n};\n\nexport default is;\n","import is from './utils/is';\n\nfunction getBase(env) {\n    return `https://${!is.empty(env) ? `${env}-` : ''}selz.com/sdk/`;\n}\n\nconst config = {\n    urls: {\n        /**\n         * Get URL for product data by URL\n         * @param {string} env - Environment (for internal use)\n         * @param {string} url - Short or full URL for a product\n         */\n        product(env, url = '') {\n            return `${getBase(env)}products/find?url=${url}`;\n        },\n\n        /**\n         * Get URL for all products by store ID\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - The store ID\n         * @param {string} query - Search query\n         * @param {number} page - Page to fetch\n         */\n        products(env, id, query = '', page = 1) {\n            return `${getBase(env)}products/all${id}?q=${query}&p=${page}`;\n        },\n\n        /**\n         * Get URL for finding a store by URL or ID\n         * @param {string} env - Environment (for internal use)\n         * @param {number|string} input - The ID or URL to lookup\n         */\n        store(env, input = null) {\n            if (is.number(input)) {\n                return `${getBase(env)}store/find/${input}`;\n            }\n\n            return `${getBase(env)}store/find?url=${input}`;\n        },\n\n        /**\n         * Create a new cart\n         * @param {string} env - Environment (for internal use)\n         * @param {number} id - Store ID\n         */\n        createCart(env, id = '') {\n            return `${getBase(env)}cart/create/${id}`;\n        },\n\n        /**\n         * Get cart from ID\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - Cart ID\n         */\n        getCart(env, id = '') {\n            return `${getBase(env)}cart/${id}`;\n        },\n\n        /**\n         * Check carts still exist server side\n         * @param {string} env - Environment (for internal use)\n         * @param {number} id - Cart IDs\n         */\n        checkCarts(env, ids = '') {\n            return `${getBase(env)}cart/verify?ids=${ids}`;\n        },\n\n        /**\n         * Add product to cart\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - Cart ID\n         */\n        addToCart(env, id = '') {\n            return `${getBase(env)}cart/add/${id}`;\n        },\n\n        /**\n         * Update a cart item quantity\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - Cart ID\n         */\n        updateCartItemQuantity(env, id = '') {\n            return `${getBase(env)}cart/updateitemquantity/${id}`;\n        },\n\n        /**\n         * Remove product from cart\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - Cart ID\n         */\n        removeFromCart(env, id = '') {\n            return `${getBase(env)}cart/remove/${id}`;\n        },\n    },\n};\n\nexport default config;\n","import is from '../utils/is';\n\nlet client = null;\n\nclass ProductUrls {\n    constructor(urls) {\n        // Take all properties by default\n        Object.assign(this, urls);\n    }\n}\n\nclass ProductImage {\n    constructor(image) {\n        // Take all properties by default\n        Object.assign(this, image);\n    }\n}\n\nclass ProductMedia {\n    constructor(media) {\n        // Take all properties by default\n        Object.assign(this, media);\n\n        // Map cover image\n        this.cover = new ProductImage(media.cover);\n    }\n}\n\nclass ProductFile {\n    constructor(file) {\n        // Take all properties by default\n        Object.assign(this, file);\n    }\n}\n\nclass ProductVariant {\n    constructor(variant, selected = '') {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        this.selected = variant.id === selected;\n    }\n}\n\nclass ProductVariantAttributeOption {\n    constructor(id, label) {\n        this.id = id;\n        this.label = label;\n    }\n}\n\nclass ProductVariantAttribute {\n    constructor(variant) {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        // Map options\n        this.options = Object.keys(variant.options).map(\n            id => new ProductVariantAttributeOption(id, variant.options[id]),\n        );\n    }\n}\n\nclass Product {\n    constructor(instance, product, variantId = '') {\n        if (!is.object(product)) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, product);\n\n        // Map store\n        this.store = client.store;\n\n        // Product URLs\n        if (is.object(product.urls)) {\n            this.urls = new ProductUrls(product.urls);\n        }\n\n        // Media (Video, YouTube, Vimeo, Audio)\n        if (is.object(product.media)) {\n            this.media = new ProductMedia(product.media);\n        }\n\n        // Images\n        if (is.array(product.images)) {\n            this.images = product.images.map(image => new ProductImage(image));\n        }\n\n        // Files for digital products\n        if (is.array(product.files)) {\n            this.files = product.files.map(file => new ProductFile(file));\n        }\n\n        // Variants\n        if (product.has_variants) {\n            const selected = !is.empty(variantId) ? variantId : product.variants[0].id;\n            this.variants = product.variants.map(variant => new ProductVariant(variant, selected));\n        }\n        if (product.has_variant_attributes) {\n            this.variant_attributes = product.variant_attributes.map(\n                attribute => new ProductVariantAttribute(attribute),\n            );\n        }\n    }\n\n    // eslint-disable-next-line camelcase\n    get selected_variant() {\n        if (is.empty(this.variants)) {\n            return null;\n        }\n\n        return this.variants.find(variant => variant.selected);\n    }\n}\n\nexport default Product;\n","import Product from './Product';\n\nlet client = null;\n\nclass CartItem {\n    constructor(item, cartId) {\n        this.cartId = cartId;\n\n        // Take all properties by default\n        Object.assign(this, item);\n\n        // Map product\n        this.product = new Product(client, item.product, item.variant_id);\n    }\n}\n\nclass Cart {\n    constructor(instance, cart, active = false) {\n        if (cart === null) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, cart);\n\n        // Map store\n        this.store = client.store;\n\n        // Set active state\n        this.active = active;\n\n        // Map items\n        this.items = Array.from(cart.items).map(item => new CartItem(item, cart.id));\n    }\n\n    /**\n     * Add a product to this cart\n     * @param {object} product - The product details\n     */\n    add(product) {\n        return client.addToCart(this.id, product);\n    }\n\n    /**\n     * Remove a product from this cart\n     * @param {string} index\n     */\n    remove(index) {\n        return client.removeFromCart(this.id, index);\n    }\n}\n\nexport default Cart;\n","import is from '../utils/is';\n\nclass Store {\n    constructor(store = null) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, store);\n    }\n}\n\nexport default Store;\n","// ==========================================================================\n// String utils\n// ==========================================================================\n\n// Replace all occurances of a string in a string\nexport function replaceAll(input = '', find = '', replace = '') {\n    return input.replace(\n        new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'),\n        replace.toString(),\n    );\n}\n\n// Convert to title case\nexport function toTitleCase(input = '') {\n    return input.toString().replace(/\\w\\S*/g, text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase());\n}\n\n// Convert string to pascalCase\nexport function toPascalCase(input = '') {\n    let string = input.toString();\n\n    // Convert kebab case\n    string = replaceAll(string, '-', ' ');\n\n    // Convert snake case\n    string = replaceAll(string, '_', ' ');\n\n    // Convert to title case\n    string = toTitleCase(string);\n\n    // Convert to pascal case\n    return replaceAll(string, ' ', '');\n}\n\n// Convert string to pascalCase\nexport function toCamelCase(input = '') {\n    let string = input.toString();\n\n    // Convert to pascal case\n    string = toPascalCase(string);\n\n    // Convert first character to lowercase\n    return string.charAt(0).toLowerCase() + string.slice(1);\n}\n","// ==========================================================================\n// Form Data utils\n// ==========================================================================\n\nimport is from './is';\nimport { toPascalCase } from './strings';\n\n/**\n * Convert an Object to FormData\n * @param {Object} source - source Object\n * @param {FormData} form - existing FormData object\n * @param {String} namespace - namespace for FormData\n */\nconst buildFormData = (source = {}, form, namespace) => {\n    const data = form || new FormData();\n    let formKey;\n\n    // Source must be an object\n    if (!is.object(source)) {\n        return data;\n    }\n\n    // Loop through the object to convert\n    Object.keys(source).forEach(key => {\n        if (namespace) {\n            formKey = `${namespace}[${key}]`;\n        } else {\n            formKey = key;\n        }\n\n        // If the property is an object, but not a File, use recursivity\n        if (typeof source[key] === 'object' && !(source[key] instanceof File)) {\n            buildFormData(source[key], data, key);\n        } else {\n            data.append(toPascalCase(formKey), source[key]);\n        }\n    });\n\n    return data;\n};\n\nexport default buildFormData;\n","// ==========================================================================\n// Extend objects\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Deep extend destination object with N more objects\n * @param {Object} target\n * @param {...Object} sources\n */\nexport function extend(target = {}, ...sources) {\n    if (!sources.length) {\n        return target;\n    }\n\n    const source = sources.shift();\n\n    if (!is.object(source)) {\n        return target;\n    }\n\n    Object.keys(source).forEach(key => {\n        if (is.object(source[key])) {\n            if (!Object.keys(target).includes(key)) {\n                Object.assign(target, { [key]: {} });\n            }\n\n            extend(target[key], source[key]);\n        } else {\n            Object.assign(target, { [key]: source[key] });\n        }\n    });\n\n    return extend(target, ...sources);\n}\n\n/**\n * Safer JSON parsing\n * @param {Object} data\n */\nexport function parseJSON(data = {}) {\n    return new Promise((resolve, reject) => {\n        try {\n            resolve(JSON.parse(data));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// Fetch\n// ==========================================================================\n\nimport buildFormData from './form-data';\nimport { extend, parseJSON } from './objects';\n\nconst defaults = {\n    type: 'GET',\n    body: {},\n    responseType: 'json',\n};\n\n/**\n * Custom immitation fetch using XHR\n * @param {string} url - The URL of the endpoint\n * @param {object} options - Object of options for the request\n */\nexport default function(url, options = {}) {\n    const { type, body, responseType } = extend({}, defaults, options);\n\n    return new Promise((resolve, reject) => {\n        try {\n            const xhr = new XMLHttpRequest();\n\n            // Check for CORS support\n            if (!('withCredentials' in xhr)) {\n                const error = new Error('No CORS support');\n                error.request = xhr;\n                throw error;\n            }\n\n            xhr.addEventListener('load', () => {\n                const { response } = xhr;\n\n                // Parse JSON responses\n                if (responseType === 'json') {\n                    parseJSON(response)\n                        .then(json => {\n                            if (json.success) {\n                                resolve(json.data);\n                            } else {\n                                const error = new Error('Request failed');\n                                error.errors = json.errors;\n                                throw error;\n                            }\n                        })\n                        .catch(reject);\n                } else {\n                    resolve(response);\n                }\n            });\n\n            xhr.addEventListener('error', () => {\n                const error = new Error(xhr.status);\n                error.request = xhr;\n                throw error;\n            });\n\n            // Start the request\n            xhr.open(type, url, true);\n\n            // Set the required response type\n            // 'json' responseType is much slower, so we parse later\n            // https://github.com/arendjr/fetch-vs-xhr-perf\n            if (responseType !== 'json') {\n                xhr.responseType = responseType;\n            }\n\n            // Send data if passed\n            xhr.send(buildFormData(body));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// Common fetch actions\n// ==========================================================================\n\nimport fetch from './fetch';\n\nconst queue = {};\n\nconst http = {\n    /**\n     * GET remote URL and parse as JSON\n     * @param {string} url - The endpoint URL\n     */\n    get(url) {\n        // Queue requests to prevent hammering\n        if (!Object.keys(queue).includes(url)) {\n            queue[url] = fetch(url);\n\n            const remove = () => {\n                delete queue[url];\n            };\n\n            // Remove from queue on completed\n            queue[url].then(remove).catch(remove);\n        }\n\n        return queue[url];\n    },\n\n    /**\n     * POST to remote URL and parse as JSON\n     * @param {string} url - The endpoint URL\n     * @param {object} data - The POST data payload\n     */\n    post(url, data = {}) {\n        const options = {\n            type: 'POST',\n            body: data,\n        };\n\n        return fetch(url, options);\n    },\n};\n\nexport default http;\n","// ==========================================================================\n// Array utils\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Remove duplicates in an array\n * @param {array} array\n */\nexport function dedupe(array) {\n    if (!is.array(array)) {\n        return array;\n    }\n\n    return array.filter((item, index) => array.indexOf(item) === index);\n}\n\n// Rounding methods for .closest()\nconst closestRounding = {\n    none: 0,\n    ceil: 1,\n    floor: 2,\n};\nexport { closestRounding };\n\n/**\n * Get the closest value in an array\n * @param {array} array\n * @param {number} value\n * @param {number} rounding\n */\nexport function closest(array, value, rounding = closestRounding.none) {\n    if (!is.array(array) || !array.length) {\n        return null;\n    }\n\n    return array.reduce((prev, curr) => {\n        if (Math.abs(curr - value) <= Math.abs(prev - value)) {\n            switch (rounding) {\n                case closestRounding.ceil:\n                    return curr >= value ? curr : prev;\n\n                case closestRounding.floor:\n                    return curr <= value ? curr : prev;\n\n                default:\n                    return curr;\n            }\n        }\n\n        return prev;\n    });\n}\n","/**\n * Parse a string to URL object\n * @param {String} url\n */\nexport default function parseUrl(url) {\n    let string = url;\n\n    // Add the protocol if required\n    if (!/^https?:\\/\\/*/.test(url)) {\n        string = `http://${url}`;\n    }\n\n    try {\n        return new URL(string);\n    } catch (e) {\n        return null;\n    }\n}\n","// ==========================================================================\n// Local storage wrapper\n// TODO: methods should return promises?\n// ==========================================================================\n\nimport Store from '../models/Store';\nimport { dedupe } from './arrays';\nimport is from './is';\nimport { extend } from './objects';\nimport parseUrl from './parseUrl';\n\nconst storage = new Map();\n\nconst getKey = url => {\n    if (url === null) {\n        return null;\n    }\n\n    const parsed = parseUrl(url);\n\n    if (parsed === null) {\n        return null;\n    }\n\n    return `${parsed.host}${parsed.pathname}`.replace(/\\/$/, '');\n};\n\nclass Storage {\n    constructor(config) {\n        this.config = Object.assign(\n            {\n                keys: {\n                    root: 'selz-js-sdk',\n                    carts: 'carts',\n                    stores: 'stores',\n                },\n                ttl: 3600, // 1 hour\n                schema: new Date('2018-07-02').getTime(), // Schema version (allowing us to change data schema and invalidate storage)\n            },\n            config,\n        );\n\n        this.purge();\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        if (!window.localStorage) {\n            return false;\n        }\n\n        const key = '___test';\n\n        // Try to use it\n        try {\n            window.localStorage.setItem(key, key);\n            window.localStorage.removeItem(key);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        let data = storage.get(this.config.keys.root);\n\n        // Grab from real storage if we can or use faux-storage\n        if (Storage.supported) {\n            const stored = window.localStorage.getItem(this.config.keys.root);\n\n            if (!is.empty(stored)) {\n                data = JSON.parse(stored);\n            }\n        }\n\n        if (is.empty(data)) {\n            return null;\n        }\n\n        if (!is.empty(key)) {\n            return Object.keys(data).includes(key) ? data[key] : null;\n        }\n\n        return data;\n    }\n\n    set(key, value, merge = false) {\n        // Get current storage\n        const data = this.get() || {};\n\n        // Extend with the new data\n        if (merge && Object.keys(data).includes(key)) {\n            data[key] = extend(data[key], value);\n        } else {\n            data[key] = value;\n        }\n\n        // Set in faux-storage\n        storage.set(this.config.keys.root, data);\n\n        // Bail if no real support\n        if (!Storage.supported) {\n            return;\n        }\n\n        // Set schema version\n        data.schema = this.config.schema;\n\n        // Update storage\n        try {\n            window.localStorage.setItem(this.config.keys.root, JSON.stringify(data));\n        } catch (e) {\n            // Do nothing\n        }\n    }\n\n    // Clean up stale storage\n    purge() {\n        // Check schema\n        const data = this.get();\n\n        // Nothing to purge\n        if (is.empty(data)) {\n            return;\n        }\n\n        // If schema does not match, kill it\n        if (Number(data.schema) !== this.config.schema) {\n            window.localStorage.removeItem(this.config.keys.root);\n            return;\n        }\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n\n        // Nothing to cleanup\n        if (is.empty(stores)) {\n            return;\n        }\n\n        // Check TTL is valid\n        this.set(\n            this.config.keys.stores,\n            stores.filter(store => {\n                const ttl = Number(store.ttl);\n                return ttl > 0 && ttl > Date.now();\n            }),\n        );\n    }\n\n    getCarts(store) {\n        const data = this.get(this.config.keys.carts) || {};\n\n        // If no carts\n        if (is.empty(data)) {\n            return null;\n        }\n\n        // Get all carts\n        if (!is.number(store)) {\n            return data;\n        }\n\n        // Store not found\n        if (!Object.keys(data).includes(store.toString())) {\n            return null;\n        }\n\n        // Get all for a store\n        return data[store.toString()];\n    }\n\n    getCart(store, currency) {\n        const carts = this.getCarts(store);\n\n        // No carts\n        if (is.empty(carts)) {\n            return null;\n        }\n\n        // Get all for a store\n        if (!is.string(currency)) {\n            return carts;\n        }\n\n        // Currency not found\n        if (!Object.keys(carts).includes(currency.toUpperCase())) {\n            return null;\n        }\n\n        return carts[currency.toUpperCase()];\n    }\n\n    setCart(store, currency, cart) {\n        this.set(\n            this.config.keys.carts,\n            {\n                [store]: {\n                    [currency.toUpperCase()]: {\n                        id: cart.id,\n                        active: cart.active,\n                    },\n                },\n            },\n            true,\n        );\n    }\n\n    setCarts(store, carts = {}) {\n        this.set(this.config.keys.carts, {\n            [store]: carts,\n        });\n    }\n\n    getStore(input) {\n        let store = null;\n\n        if (!is.number(input) && !is.url(input)) {\n            return null;\n        }\n\n        const stores = this.get(this.config.keys.stores) || [];\n\n        if (is.number(input)) {\n            store = stores.find(s => is.object(s.data) && s.data.id === input);\n        } else if (is.url(input)) {\n            const key = getKey(input);\n\n            // Bail if invalid URL\n            if (key === null) {\n                return null;\n            }\n\n            store = stores.find(s => is.array(s.urls) && s.urls.includes(key));\n        }\n\n        if (!is.object(store)) {\n            return null;\n        }\n\n        // Check TTL is valid\n        const ttl = Number(store.ttl);\n\n        if (ttl > 0 && ttl < Date.now()) {\n            this.purge();\n            return null;\n        }\n\n        return new Store(store.data);\n    }\n\n    setStore(data, url = null) {\n        // Strip the protocol from the lookup url\n        const key = getKey(url);\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n        let existing = null;\n\n        if (!is.empty(stores)) {\n            // Find existing store by id\n            existing = stores.find(s => s.data.id === data.id);\n        }\n\n        // Extend TTL each\n        const ttl = Date.now() + this.config.ttl;\n\n        // If we found something\n        if (is.object(existing)) {\n            // Update data and extend TTL\n            Object.assign(existing, {\n                data,\n                ttl,\n            });\n\n            if (key !== null) {\n                // Add the URL key for later lookup\n                if (!is.array(existing.urls)) {\n                    existing.urls = [key];\n                } else {\n                    existing.urls.push(key);\n                }\n\n                // Remove duplicate entries\n                const urls = dedupe(existing.urls);\n\n                // Add to existing record\n                Object.assign(existing, {\n                    urls,\n                });\n            }\n        } else {\n            const store = {\n                data,\n                ttl,\n            };\n\n            if (key !== null) {\n                Object.assign(store, {\n                    urls: [key],\n                });\n            }\n\n            stores.push(store);\n        }\n\n        this.set(this.config.keys.stores, stores);\n    }\n}\n\nexport default Storage;\n","import config from './config';\nimport Cart from './models/Cart';\nimport Product from './models/Product';\nimport Store from './models/Store';\nimport http from './utils/http';\nimport is from './utils/is';\nimport Storage from './utils/storage';\n\nclass Client {\n    constructor(props) {\n        const { env, store } = props;\n\n        this.env = !is.empty(env) ? env : '';\n        this.store = store;\n\n        if (!is.url(store) && !is.number(store)) {\n            throw Error('A store ID or URL is required to create a client');\n        }\n\n        this.storage = new Storage();\n    }\n\n    /**\n     * Get the store ID only\n     */\n    getStoreId() {\n        return new Promise((resolve, reject) => {\n            if (is.number(this.store)) {\n                resolve(this.store);\n                return;\n            }\n\n            if (this.store instanceof Store) {\n                resolve(this.store.id);\n                return;\n            }\n\n            // URL is required\n            if (!is.url(this.store)) {\n                reject(new Error('Url is required for user lookup'));\n            }\n\n            // Get by URL\n            this.getStore()\n                .then(store => {\n                    resolve(store.id);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the Store for current instance\n     */\n    getStore() {\n        return new Promise((resolve, reject) => {\n            // Try from cache by ID or URL\n            if (is.number(this.store) || is.url(this.store)) {\n                const cached = this.storage.getStore(this.store);\n\n                // Return cached if we have it\n                if (cached !== null && cached instanceof Store) {\n                    resolve(cached);\n                    return;\n                }\n            }\n\n            // If already fetched\n            if (this.store instanceof Store) {\n                resolve(this.store);\n                return;\n            }\n\n            // Fetch from remote by ID or URL\n            const url = config.urls.store(this.env, this.store);\n\n            http.get(url)\n                .then(store => {\n                    this.setStore(store);\n                    resolve(this.store);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the store details\n     * @param {object} store\n     */\n    setStore(store) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Store reference to lookup URL\n        const url = is.url(this.store) ? this.store : null;\n\n        // Map to Store\n        this.store = new Store(store);\n\n        // Add to storage for cache\n        this.storage.setStore(this.store, url);\n    }\n\n    /**\n     * Get product data\n     * @param {string} url - Short or full URL for a product\n     */\n    getProduct(url) {\n        return new Promise((resolve, reject) => {\n            http.get(config.urls.product(this.env, url))\n                .then(json => {\n                    if (!(this.store instanceof Store)) {\n                        this.setStore(json.store);\n                    }\n\n                    resolve(new Product(this, json));\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all products\n     */\n    getProducts(query = '', page = 1) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    http.get(config.urls.products(this.env, id, query, page < 1 ? 1 : page))\n                        .then(json => {\n                            resolve(json.map(p => new Product(this, p)));\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Create a new shopping cart\n     * @param {string} currency - ISO currency code\n     * @param {string} discount - Discount code\n     */\n    createCart(currency, discount) {\n        return new Promise((resolve, reject) => {\n            if (is.empty(currency)) {\n                reject(new Error('currency is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n\n                    http.post(config.urls.createCart(this.env, id), {\n                        currency: currencyCode,\n                        discount: !is.empty(discount) ? discount : null,\n                    })\n                        .then(json => {\n                            const cart = new Cart(this, json);\n\n                            // Store reference to cart id for later\n                            this.storage.setCart(id, currencyCode, cart);\n\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart or create one if needed\n     * @param {string} currency - The shopping cart ISO currency code\n     */\n    getCartId(currency) {\n        return new Promise((resolve, reject) => {\n            if (!is.currencyCode(currency)) {\n                reject(new Error('A valid currency code is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n                    const currentCart = this.storage.getCart(id, currencyCode);\n\n                    // Create cart if it doesn't exist\n                    if (is.empty(currentCart)) {\n                        this.createCart(currencyCode)\n                            .then(cart => resolve(cart.id))\n                            .catch(reject);\n                    } else {\n                        resolve(currentCart.id);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart\n     * @param {string} input - The shopping cart ISO currency code or cart ID\n     */\n    getCart(input) {\n        return new Promise((resolve, reject) => {\n            const isCurrency = is.currencyCode(input);\n            const isObjectId = is.objectId(input);\n\n            if (!isCurrency && !isObjectId) {\n                reject(new Error('A valid currency code or cart id are required'));\n                return;\n            }\n\n            if (isCurrency) {\n                const currencyCode = input.toUpperCase();\n\n                this.getCartId(currencyCode)\n                    .then(id => {\n                        if (is.empty(id)) {\n                            reject(new Error(`Could not find matching cart for currency code '${currencyCode}'`));\n                            return;\n                        }\n\n                        this.getCart(id)\n                            .then(cart => {\n                                // Update store\n                                this.setStore(cart.store);\n\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    })\n                    .catch(reject);\n            } else {\n                http.get(config.urls.getCart(this.env, input))\n                    .then(json => {\n                        const activeId = this.getActiveCart();\n                        const cart = new Cart(this, json, json.id === activeId);\n\n                        // Update store\n                        this.setStore(cart.store);\n\n                        resolve(cart);\n                    })\n                    .catch(reject);\n            }\n        });\n    }\n\n    /**\n     * Get all current carts\n     */\n    getCarts(validate = true) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (is.empty(carts)) {\n                        resolve(null);\n                        return;\n                    }\n\n                    // Check the carts still exist in the server\n                    if (validate) {\n                        const ids = Object.keys(carts).map(currency => carts[currency].id);\n\n                        http.get(config.urls.checkCarts(this.env, ids.join(',')))\n                            .then(json => {\n                                // Remove non existant carts\n                                Object.entries(json).forEach(([cartId, exists]) => {\n                                    if (!exists) {\n                                        const currency = Object.keys(carts).find(c => carts[c].id === cartId);\n                                        delete carts[currency];\n                                    }\n                                });\n\n                                // Store again\n                                this.storage.setCarts(id, carts);\n\n                                // Set active\n                                if (!Object.values(carts).find(cart => cart.active)) {\n                                    this.setActiveCart()\n                                        .then(resolve)\n                                        .catch(reject);\n                                } else {\n                                    resolve(carts);\n                                }\n                            })\n                            .catch(reject);\n                    } else {\n                        resolve(carts);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the active cart based on currency\n     * @param {string} input - The shopping cart ISO currency code or cart ID\n     */\n    setActiveCart(input = null) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    this.getCarts(false).then(data => {\n                        const carts = data;\n\n                        // No carts\n                        if (is.empty(carts)) {\n                            resolve(null);\n                            return;\n                        }\n\n                        // Currency code was passed...\n                        if (is.currencyCode(input)) {\n                            const currencyCode = input.toUpperCase();\n                            const currencies = Object.keys(carts);\n\n                            // Bail if not included\n                            if (!currencies.includes(currencyCode)) {\n                                reject(new Error(`No carts for ${currencyCode}`));\n                                return;\n                            }\n\n                            // Set active\n                            currencies.forEach(currency => {\n                                carts[currency].active = currency === currencyCode;\n                            });\n                        } else {\n                            // Set to id if specified, otherwise first\n                            const cartId = is.objectId(input) ? input : carts[Object.keys(carts)[0]].id;\n\n                            // Set active\n                            Object.keys(carts).forEach(currency => {\n                                const cart = carts[currency];\n                                cart.active = cart.id === cartId;\n                            });\n                        }\n\n                        // Store again\n                        this.storage.setCarts(id, carts);\n\n                        resolve(carts);\n                    });\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the current active cart\n     */\n    getActiveCart(fetch = false) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (!Object.keys(carts).length) {\n                        resolve(null);\n                        return;\n                    }\n\n                    const active = Object.values(carts).find(cart => cart.active);\n\n                    if (!active) {\n                        resolve(null);\n                        return;\n                    }\n\n                    if (!fetch) {\n                        resolve(active.id);\n                        return;\n                    }\n\n                    this.getCart(active.id)\n                        .then(resolve)\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Add a product to a cart\n     * @param {string} id - The cart ID\n     * @param {object} product - The product details\n     */\n    addToCart(id, product) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(product)) {\n                reject(new Error('A valid product is required'));\n                return;\n            }\n\n            http.post(config.urls.addToCart(this.env, id), product)\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Update an items quantity in the shopping cart\n     * @param {string} id - The shopping cart ID\n     * @param {string} index - The shopping cart item quid\n     * @param {number} quantity - Desired quantity\n     */\n    updateCartItemQuantity(id, index, quantity = 1) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.updateCartItemQuantity(this.env, id), { index, quantity })\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Remove a product from a cart\n     * @param {string} id - The shopping cart id\n     * @param {string} index - The shopping cart item guid\n     */\n    removeFromCart(id, index) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.removeFromCart(this.env, id), { index })\n                .then(json => {\n                    // If there's actually a cart left, map it\n                    if (!is.empty(json)) {\n                        const cart = new Cart(this, json, true);\n\n                        // Set the active cart\n                        this.setActiveCart(cart.id)\n                            .then(() => {\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    } else {\n                        // Otherwise, update carts (as one removed)\n                        this.getCarts()\n                            .then(() => resolve(null))\n                            .catch(reject);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n}\n\nexport { Product, Cart, Store };\n\nexport default Client;\n"],"names":["getConstructor","input","constructor","instanceOf","Boolean","isArray","Array","isObject","Object","isNumber","Number","isNaN","isString","String","isBoolean","isFunction","Function","isNullOrUndefined","isObjectId","test","isCurrencyCode","isEmpty","length","keys","isUrl","strict","window","URL","string","hostname","e","is","getBase","env","empty","config","url","id","query","page","number","ids","client","ProductUrls","urls","assign","this","ProductImage","image","ProductMedia","media","cover","ProductFile","file","ProductVariant","variant","selected","ProductVariantAttributeOption","label","ProductVariantAttribute","options","map","Product","instance","product","variantId","object","store","array","images","files","has_variants","variants","has_variant_attributes","variant_attributes","attribute","find","CartItem","item","cartId","variant_id","Cart","cart","active","items","from","addToCart","index","removeFromCart","Store","replaceAll","replace","RegExp","toString","toTitleCase","text","charAt","toUpperCase","substr","toLowerCase","toPascalCase","buildFormData","source","form","namespace","data","FormData","formKey","forEach","key","babelHelpers.typeof","File","append","extend","target","sources","shift","includes","parseJSON","Promise","resolve","reject","JSON","parse","error","defaults","type","body","responseType","xhr","XMLHttpRequest","Error","request","addEventListener","response","then","json","success","errors","catch","status","open","send","queue","http","fetch","remove","dedupe","filter","indexOf","parseUrl","storage","Map","getKey","parsed","host","pathname","Storage","Date","getTime","purge","get","root","supported","stored","localStorage","getItem","value","merge","set","schema","setItem","stringify","stores","ttl","now","removeItem","carts","currency","getCarts","s","existing","push","Client","props","_this","getStore","_this2","cached","setStore","_this3","getStoreId","products","_this4","p","discount","currencyCode","post","createCart","_this5","setCart","currentCart","_this6","getCart","isCurrency","objectId","getCartId","_this7","activeId","getActiveCart","validate","_this8","checkCarts","join","entries","c","setCarts","values","setActiveCart","currencies","_this10","_this11","quantity","updateCartItemQuantity","_this12","_this13"],"mappings":"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"}