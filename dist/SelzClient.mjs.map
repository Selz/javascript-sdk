{"version":3,"file":"SelzClient.mjs","sources":["../node_modules/to-no-case/index.js","../node_modules/to-space-case/index.js","../node_modules/to-snake-case/index.js","../node_modules/map-obj/index.js","../node_modules/snakecase-keys/index.js"],"sourcesContent":["\n/**\n * Expose `toNoCase`.\n */\n\nmodule.exports = toNoCase;\n\n\n/**\n * Test whether a string is camel-case.\n */\n\nvar hasSpace = /\\s/;\nvar hasCamel = /[a-z][A-Z]/;\nvar hasSeparator = /[\\W_]/;\n\n\n/**\n * Remove any starting case from a `string`, like camel or snake, but keep\n * spaces and punctuation that may be important otherwise.\n *\n * @param {String} string\n * @return {String}\n */\n\nfunction toNoCase (string) {\n  if (hasSpace.test(string)) return string.toLowerCase();\n\n  if (hasSeparator.test(string)) string = unseparate(string);\n  if (hasCamel.test(string)) string = uncamelize(string);\n  return string.toLowerCase();\n}\n\n\n/**\n * Separator splitter.\n */\n\nvar separatorSplitter = /[\\W_]+(.|$)/g;\n\n\n/**\n * Un-separate a `string`.\n *\n * @param {String} string\n * @return {String}\n */\n\nfunction unseparate (string) {\n  return string.replace(separatorSplitter, function (m, next) {\n    return next ? ' ' + next : '';\n  });\n}\n\n\n/**\n * Camelcase splitter.\n */\n\nvar camelSplitter = /(.)([A-Z]+)/g;\n\n\n/**\n * Un-camelcase a `string`.\n *\n * @param {String} string\n * @return {String}\n */\n\nfunction uncamelize (string) {\n  return string.replace(camelSplitter, function (m, previous, uppers) {\n    return previous + ' ' + uppers.toLowerCase().split('').join(' ');\n  });\n}","\nvar clean = require('to-no-case');\n\n\n/**\n * Expose `toSpaceCase`.\n */\n\nmodule.exports = toSpaceCase;\n\n\n/**\n * Convert a `string` to space case.\n *\n * @param {String} string\n * @return {String}\n */\n\n\nfunction toSpaceCase (string) {\n  return clean(string).replace(/[\\W_]+(.|$)/g, function (matches, match) {\n    return match ? ' ' + match : '';\n  });\n}","var toSpace = require('to-space-case');\n\n\n/**\n * Expose `toSnakeCase`.\n */\n\nmodule.exports = toSnakeCase;\n\n\n/**\n * Convert a `string` to snake case.\n *\n * @param {String} string\n * @return {String}\n */\n\n\nfunction toSnakeCase (string) {\n  return toSpace(string).replace(/\\s/g, '_');\n}\n","'use strict';\n\n// customized for this use-case\nconst isObject = x =>\n\ttypeof x === 'object' &&\n\tx !== null &&\n\t!(x instanceof RegExp) &&\n\t!(x instanceof Error) &&\n\t!(x instanceof Date);\n\nmodule.exports = function mapObj(obj, fn, opts, seen) {\n\topts = Object.assign({\n\t\tdeep: false,\n\t\ttarget: {}\n\t}, opts);\n\n\tseen = seen || new WeakMap();\n\n\tif (seen.has(obj)) {\n\t\treturn seen.get(obj);\n\t}\n\n\tseen.set(obj, opts.target);\n\n\tconst target = opts.target;\n\tdelete opts.target;\n\n\tfor (const key of Object.keys(obj)) {\n\t\tconst val = obj[key];\n\t\tconst res = fn(key, val, obj);\n\t\tlet newVal = res[1];\n\n\t\tif (opts.deep && isObject(newVal)) {\n\t\t\tif (Array.isArray(newVal)) {\n\t\t\t\tnewVal = newVal.map(x => isObject(x) ? mapObj(x, fn, opts, seen) : x);\n\t\t\t} else {\n\t\t\t\tnewVal = mapObj(newVal, fn, opts, seen);\n\t\t\t}\n\t\t}\n\n\t\ttarget[res[0]] = newVal;\n\t}\n\n\treturn target;\n};\n","'use strict'\n\nvar map = require('map-obj')\nvar snakeCase = require('to-snake-case')\n\nmodule.exports = function (obj) {\n  return map(obj, function (key, val) {\n    return [snakeCase(key), val]\n  }, {deep: true})\n}\n"],"names":["toNoCase","string","hasSpace","test","toLowerCase","hasSeparator","unseparate","hasCamel","uncamelize","replace","separatorSplitter","m","next","camelSplitter","previous","uppers","split","join","toSpaceCase","clean","matches","match","toSnakeCase","toSpace","isObject","x","RegExp","Error","Date","mapObj","obj","fn","opts","seen","Object","assign","WeakMap","has","get","set","target","keys","key","val","res","newVal","deep","Array","isArray","map","snakeCase"],"mappings":"AAyBA,SAASA,SAAUC,UACbC,SAASC,KAAKF,GAAgBA,EAAOG,eAErCC,aAAaF,KAAKF,KAASA,EAASK,WAAWL,IAC/CM,SAASJ,KAAKF,KAASA,EAASO,WAAWP,IACxCA,EAAOG,eAkBhB,SAASE,WAAYL,UACZA,EAAOQ,QAAQC,kBAAmB,SAAUC,EAAGC,UAC7CA,EAAO,IAAMA,EAAO,KAmB/B,SAASJ,WAAYP,UACZA,EAAOQ,QAAQI,cAAe,SAAUF,EAAGG,EAAUC,UACnDD,EAAW,IAAMC,EAAOX,cAAcY,MAAM,IAAIC,KAAK,OCpDhE,SAASC,YAAajB,UACbkB,WAAMlB,GAAQQ,QAAQ,eAAgB,SAAUW,EAASC,UACvDA,EAAQ,IAAMA,EAAQ,KCHjC,SAASC,YAAarB,UACbsB,cAAQtB,GAAQQ,QAAQ,MAAO,0/EChBlCe,SAAW,oBACH,qBAANC,sBAAAA,KACD,OAANA,GACEA,aAAaC,QACbD,aAAaE,OACbF,aAAaG,cAEC,SAASC,EAAOC,EAAKC,EAAIC,EAAMC,QACxCC,OAAOC,cACP,aAEJH,MAEIC,GAAQ,IAAIG,SAEVC,IAAIP,UACLG,EAAKK,IAAIR,KAGZS,IAAIT,EAAKE,EAAKQ,YAEbA,EAASR,EAAKQ,cACbR,EAAKQ,8CAEMN,OAAOO,KAAKX,kDAAM,KAAzBY,UACJC,EAAMb,EAAIY,GACVE,EAAMb,EAAGW,EAAKC,EAAKb,GACrBe,EAASD,EAAI,GAEbZ,EAAKc,MAAQtB,SAASqB,OACrBE,MAAMC,QAAQH,GACRA,EAAOI,IAAI,mBAAKzB,SAASC,GAAKI,EAAOJ,EAAGM,EAAIC,EAAMC,GAAQR,IAE1DI,EAAOgB,EAAQd,EAAIC,EAAMC,MAI7BW,EAAI,IAAMC,uFAGXL,cHtCSxC,SAObE,SAAW,KACXK,SAAW,aACXF,aAAe,QAwBfK,kBAAoB,eAqBpBG,cAAgB,6BCnDHK,0BCDAI,0BEFA,SAAUQ,UAClBmB,OAAInB,EAAK,SAAUY,EAAKC,UACrBO,cAAUR,GAAMC,KACtBG,MAAM"}