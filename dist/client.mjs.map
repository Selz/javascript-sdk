{"version":3,"sources":["src/utils/is.js","src/config.js","src/models/Product.js","src/models/Cart.js","src/models/Store.js","src/utils/strings.js","src/utils/form-data.js","src/utils/objects.js","src/utils/fetch.js","src/utils/http.js","src/utils/arrays.js","src/utils/parseUrl.js","src/utils/storage.js","src/client.js"],"names":["getConstructor","input","constructor","instanceOf","isArray","Array","isObject","Object","isNumber","Number","isNaN","isString","String","isBoolean","Boolean","isFunction","Function","isNullOrUndefined","isObjectId","test","isCurrencyCode","isEmpty","length","keys","isUrl","strict","arguments","window","URL","string","concat","hostname","e","is","array","object","number","boolean","function","nullOrUndefined","objectId","currencyCode","url","empty","getBase","env","config","urls","product","products","id","query","page","store","createCart","getCart","checkCarts","ids","addToCart","updateCartItemQuantity","removeFromCart","client","ProductUrls","a","_classCallCheck","this","assign","ProductImage","image","ProductMedia","media","cover","ProductFile","file","ProductVariant","variant","selected","ProductVariantAttributeOption","label","ProductVariantAttribute","options","map","Product","instance","variantId","images","files","has_variants","variants","has_variant_attributes","variant_attributes","attribute","find","CartItem","item","cartId","variant_id","Cart","cart","active","items","from","index","Store","replaceAll","replace","RegExp","toString","toTitleCase","text","charAt","toUpperCase","substr","toLowerCase","toPascalCase","buildFormData","formKey","source","form","namespace","data","FormData","forEach","key","_typeof","File","append","extend","target","b","sources","d","shift","includes","_defineProperty","apply","parseJSON","Promise","resolve","reject","JSON","parse","error","defaults","type","body","responseType","fetch","c","xhr","XMLHttpRequest","Error","request","addEventListener","response","then","json","success","errors","catch","status","open","send","queue","http","get","remove","post","dedupe","filter","indexOf","parseUrl","storage","Map","getKey","parsed","host","pathname","Storage","root","carts","stores","ttl","schema","Date","getTime","purge","supported","stored","localStorage","getItem","value","merge","set","setItem","stringify","removeItem","now","currency","getCarts","s","existing","push","Client","props","getStore","cached","setStore","getStoreId","keyword","p","discount","setCart","currentCart","isCurrency","getCartId","activeId","getActiveCart","validate","join","entries","_slicedToArray","setActiveCart","currencies","setCarts","values","quantity"],"mappings":"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","file":"client.mjs","sourcesContent":["// ==========================================================================\n// Type checking\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\nconst isArray = input => Array.isArray(input);\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObjectId = input => isString(input) && /^[a-f\\d]{24}$/i.test(input);\nconst isCurrencyCode = input => isString(input) && /^[A-z]{3}$/.test(input);\n\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nconst isUrl = (input, strict = false) => {\n    // Accept a URL object\n    if (instanceOf(input, window.URL)) {\n        return true;\n    }\n\n    // Add the protocol if required\n    let string = input;\n    if (!strict && !/^https?:\\/\\/*/.test(input)) {\n        string = `http://${input}`;\n    }\n\n    try {\n        return !isEmpty(new URL(string).hostname);\n    } catch (e) {\n        return false;\n    }\n};\n\nconst is = {\n    array: isArray,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    nullOrUndefined: isNullOrUndefined,\n    objectId: isObjectId,\n    currencyCode: isCurrencyCode,\n    url: isUrl,\n    empty: isEmpty,\n};\n\nexport default is;\n","import is from './utils/is';\n\nconst getBase = env => `https://${is.empty(env) ? 'sdk.selz.com' : `${env}-selz.com/sdk`}/`;\n\nconst config = {\n    urls: {\n        /**\n         * Get URL for product data by URL\n         * @param {string} env - Environment (for internal use)\n         * @param {string} url - Short or full URL for a product\n         */\n        product(env, url = '') {\n            return `${getBase(env)}products/find?url=${url}`;\n        },\n\n        /**\n         * Get URL for all products by store ID\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - The store ID\n         * @param {string} query - Search query\n         * @param {number} page - Page to fetch\n         */\n        products(env, id, query = '', page = 1) {\n            return `${getBase(env)}products/all/${id}?q=${query}&p=${page}`;\n        },\n\n        /**\n         * Get URL for finding a store by URL or ID\n         * @param {string} env - Environment (for internal use)\n         * @param {number|string} input - The ID or URL to lookup\n         */\n        store(env, input = null) {\n            if (is.number(input)) {\n                return `${getBase(env)}store/find/${input}`;\n            }\n\n            return `${getBase(env)}store/find?url=${input}`;\n        },\n\n        /**\n         * Create a new cart\n         * @param {string} env - Environment (for internal use)\n         * @param {number} id - Store ID\n         */\n        createCart(env, id = '') {\n            return `${getBase(env)}cart/create/${id}`;\n        },\n\n        /**\n         * Get cart from ID\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - Cart ID\n         */\n        getCart(env, id = '') {\n            return `${getBase(env)}cart/${id}`;\n        },\n\n        /**\n         * Check carts still exist server side\n         * @param {string} env - Environment (for internal use)\n         * @param {number} id - Cart IDs\n         */\n        checkCarts(env, ids = '') {\n            return `${getBase(env)}cart/verify?ids=${ids}`;\n        },\n\n        /**\n         * Add product to cart\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - Cart ID\n         */\n        addToCart(env, id = '') {\n            return `${getBase(env)}cart/add/${id}`;\n        },\n\n        /**\n         * Update a cart item quantity\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - Cart ID\n         */\n        updateCartItemQuantity(env, id = '') {\n            return `${getBase(env)}cart/updateitemquantity/${id}`;\n        },\n\n        /**\n         * Remove product from cart\n         * @param {string} env - Environment (for internal use)\n         * @param {string} id - Cart ID\n         */\n        removeFromCart(env, id = '') {\n            return `${getBase(env)}cart/remove/${id}`;\n        },\n    },\n};\n\nexport default config;\n","import is from '../utils/is';\n\nlet client = null;\n\nclass ProductUrls {\n    constructor(urls) {\n        // Take all properties by default\n        Object.assign(this, urls);\n    }\n}\n\nclass ProductImage {\n    constructor(image) {\n        // Take all properties by default\n        Object.assign(this, image);\n    }\n}\n\nclass ProductMedia {\n    constructor(media) {\n        // Take all properties by default\n        Object.assign(this, media);\n\n        // Map cover image\n        this.cover = new ProductImage(media.cover);\n    }\n}\n\nclass ProductFile {\n    constructor(file) {\n        // Take all properties by default\n        Object.assign(this, file);\n    }\n}\n\nclass ProductVariant {\n    constructor(variant, selected = '') {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        this.selected = variant.id === selected;\n    }\n}\n\nclass ProductVariantAttributeOption {\n    constructor(id, label) {\n        this.id = id;\n        this.label = label;\n    }\n}\n\nclass ProductVariantAttribute {\n    constructor(variant) {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        // Map options\n        this.options = Object.keys(variant.options).map(\n            id => new ProductVariantAttributeOption(id, variant.options[id]),\n        );\n    }\n}\n\nclass Product {\n    constructor(instance, product, variantId = '') {\n        if (!is.object(product)) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, product);\n\n        // Map store\n        this.store = client.store;\n\n        // Product URLs\n        if (is.object(product.urls)) {\n            this.urls = new ProductUrls(product.urls);\n        }\n\n        // Media (Video, YouTube, Vimeo, Audio)\n        if (is.object(product.media)) {\n            this.media = new ProductMedia(product.media);\n        }\n\n        // Images\n        if (is.array(product.images)) {\n            this.images = product.images.map(image => new ProductImage(image));\n        }\n\n        // Files for digital products\n        if (is.array(product.files)) {\n            this.files = product.files.map(file => new ProductFile(file));\n        }\n\n        // Variants\n        if (product.has_variants) {\n            const selected = !is.empty(variantId) ? variantId : product.variants[0].id;\n            this.variants = product.variants.map(variant => new ProductVariant(variant, selected));\n        }\n        if (product.has_variant_attributes) {\n            this.variant_attributes = product.variant_attributes.map(\n                attribute => new ProductVariantAttribute(attribute),\n            );\n        }\n    }\n\n    // eslint-disable-next-line camelcase\n    get selected_variant() {\n        if (is.empty(this.variants)) {\n            return null;\n        }\n\n        return this.variants.find(variant => variant.selected);\n    }\n}\n\nexport default Product;\n","import Product from './Product';\n\nlet client = null;\n\nclass CartItem {\n    constructor(item, cartId) {\n        this.cartId = cartId;\n\n        // Take all properties by default\n        Object.assign(this, item);\n\n        // Map product\n        this.product = new Product(client, item.product, item.variant_id);\n    }\n}\n\nclass Cart {\n    constructor(instance, cart, active = false) {\n        if (cart === null) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, cart);\n\n        // Map store\n        this.store = client.store;\n\n        // Set active state\n        this.active = active;\n\n        // Map items\n        this.items = Array.from(cart.items).map(item => new CartItem(item, cart.id));\n    }\n\n    /**\n     * Add a product to this cart\n     * @param {object} product - The product details\n     */\n    add(product) {\n        return client.addToCart(this.id, product);\n    }\n\n    /**\n     * Remove a product from this cart\n     * @param {string} index\n     */\n    remove(index) {\n        return client.removeFromCart(this.id, index);\n    }\n}\n\nexport default Cart;\n","import is from '../utils/is';\n\nclass Store {\n    constructor(store = null) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, store);\n    }\n}\n\nexport default Store;\n","// ==========================================================================\n// String utils\n// ==========================================================================\n\n// Replace all occurances of a string in a string\nexport function replaceAll(input = '', find = '', replace = '') {\n    return input.replace(\n        new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'),\n        replace.toString(),\n    );\n}\n\n// Convert to title case\nexport function toTitleCase(input = '') {\n    return input.toString().replace(/\\w\\S*/g, text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase());\n}\n\n// Convert string to pascalCase\nexport function toPascalCase(input = '') {\n    let string = input.toString();\n\n    // Convert kebab case\n    string = replaceAll(string, '-', ' ');\n\n    // Convert snake case\n    string = replaceAll(string, '_', ' ');\n\n    // Convert to title case\n    string = toTitleCase(string);\n\n    // Convert to pascal case\n    return replaceAll(string, ' ', '');\n}\n\n// Convert string to pascalCase\nexport function toCamelCase(input = '') {\n    let string = input.toString();\n\n    // Convert to pascal case\n    string = toPascalCase(string);\n\n    // Convert first character to lowercase\n    return string.charAt(0).toLowerCase() + string.slice(1);\n}\n","// ==========================================================================\n// Form Data utils\n// ==========================================================================\n\nimport is from './is';\nimport { toPascalCase } from './strings';\n\n/**\n * Convert an Object to FormData\n * @param {Object} source - source Object\n * @param {FormData} form - existing FormData object\n * @param {String} namespace - namespace for FormData\n */\nconst buildFormData = (source = {}, form, namespace) => {\n    const data = form || new FormData();\n    let formKey;\n\n    // Source must be an object\n    if (!is.object(source)) {\n        return data;\n    }\n\n    // Loop through the object to convert\n    Object.keys(source).forEach(key => {\n        if (namespace) {\n            formKey = `${namespace}[${key}]`;\n        } else {\n            formKey = key;\n        }\n\n        // If the property is an object, but not a File, use recursivity\n        if (typeof source[key] === 'object' && !(source[key] instanceof File)) {\n            buildFormData(source[key], data, key);\n        } else {\n            data.append(toPascalCase(formKey), source[key]);\n        }\n    });\n\n    return data;\n};\n\nexport default buildFormData;\n","// ==========================================================================\n// Extend objects\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Deep extend destination object with N more objects\n * @param {Object} target\n * @param {...Object} sources\n */\nexport function extend(target = {}, ...sources) {\n    if (!sources.length) {\n        return target;\n    }\n\n    const source = sources.shift();\n\n    if (!is.object(source)) {\n        return target;\n    }\n\n    Object.keys(source).forEach(key => {\n        if (is.object(source[key])) {\n            if (!Object.keys(target).includes(key)) {\n                Object.assign(target, { [key]: {} });\n            }\n\n            extend(target[key], source[key]);\n        } else {\n            Object.assign(target, { [key]: source[key] });\n        }\n    });\n\n    return extend(target, ...sources);\n}\n\n/**\n * Safer JSON parsing\n * @param {Object} data\n */\nexport function parseJSON(data = {}) {\n    return new Promise((resolve, reject) => {\n        try {\n            resolve(JSON.parse(data));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// Fetch\n// ==========================================================================\n\nimport buildFormData from './form-data';\nimport { extend, parseJSON } from './objects';\n\nconst defaults = {\n    type: 'GET',\n    body: {},\n    responseType: 'json',\n};\n\n/**\n * Custom immitation fetch using XHR\n * @param {string} url - The URL of the endpoint\n * @param {object} options - Object of options for the request\n */\nexport default function(url, options = {}) {\n    const { type, body, responseType } = extend({}, defaults, options);\n\n    return new Promise((resolve, reject) => {\n        try {\n            const xhr = new XMLHttpRequest();\n\n            // Check for CORS support\n            if (!('withCredentials' in xhr)) {\n                const error = new Error('No CORS support');\n                error.request = xhr;\n                throw error;\n            }\n\n            xhr.addEventListener('load', () => {\n                const { response } = xhr;\n\n                // Parse JSON responses\n                if (responseType === 'json') {\n                    parseJSON(response)\n                        .then(json => {\n                            if (json.success) {\n                                resolve(json.data);\n                            } else {\n                                const error = new Error('Request failed');\n                                error.errors = json.errors;\n                                throw error;\n                            }\n                        })\n                        .catch(reject);\n                } else {\n                    resolve(response);\n                }\n            });\n\n            xhr.addEventListener('error', () => {\n                const error = new Error(xhr.status);\n                error.request = xhr;\n                throw error;\n            });\n\n            // Start the request\n            xhr.open(type, url, true);\n\n            // Set the required response type\n            // 'json' responseType is much slower, so we parse later\n            // https://github.com/arendjr/fetch-vs-xhr-perf\n            if (responseType !== 'json') {\n                xhr.responseType = responseType;\n            }\n\n            // Send data if passed\n            xhr.send(buildFormData(body));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// Common fetch actions\n// ==========================================================================\n\nimport fetch from './fetch';\n\nconst queue = {};\n\nconst http = {\n    /**\n     * GET remote URL and parse as JSON\n     * @param {string} url - The endpoint URL\n     */\n    get(url) {\n        // Queue requests to prevent hammering\n        if (!Object.keys(queue).includes(url)) {\n            queue[url] = fetch(url);\n\n            const remove = () => {\n                delete queue[url];\n            };\n\n            // Remove from queue on completed\n            queue[url].then(remove).catch(remove);\n        }\n\n        return queue[url];\n    },\n\n    /**\n     * POST to remote URL and parse as JSON\n     * @param {string} url - The endpoint URL\n     * @param {object} data - The POST data payload\n     */\n    post(url, data = {}) {\n        const options = {\n            type: 'POST',\n            body: data,\n        };\n\n        return fetch(url, options);\n    },\n};\n\nexport default http;\n","// ==========================================================================\n// Array utils\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Remove duplicates in an array\n * @param {array} array\n */\nexport function dedupe(array) {\n    if (!is.array(array)) {\n        return array;\n    }\n\n    return array.filter((item, index) => array.indexOf(item) === index);\n}\n\n// Rounding methods for .closest()\nconst closestRounding = {\n    none: 0,\n    ceil: 1,\n    floor: 2,\n};\nexport { closestRounding };\n\n/**\n * Get the closest value in an array\n * @param {array} array\n * @param {number} value\n * @param {number} rounding\n */\nexport function closest(array, value, rounding = closestRounding.none) {\n    if (!is.array(array) || !array.length) {\n        return null;\n    }\n\n    return array.reduce((prev, curr) => {\n        if (Math.abs(curr - value) <= Math.abs(prev - value)) {\n            switch (rounding) {\n                case closestRounding.ceil:\n                    return curr >= value ? curr : prev;\n\n                case closestRounding.floor:\n                    return curr <= value ? curr : prev;\n\n                default:\n                    return curr;\n            }\n        }\n\n        return prev;\n    });\n}\n","/**\n * Parse a string to URL object\n * @param {String} url\n */\nexport default function parseUrl(url) {\n    let string = url;\n\n    // Add the protocol if required\n    if (!/^https?:\\/\\/*/.test(url)) {\n        string = `http://${url}`;\n    }\n\n    try {\n        return new URL(string);\n    } catch (e) {\n        return null;\n    }\n}\n","// ==========================================================================\n// Local storage wrapper\n// TODO: methods should return promises?\n// ==========================================================================\n\nimport Store from '../models/Store';\nimport { dedupe } from './arrays';\nimport is from './is';\nimport { extend } from './objects';\nimport parseUrl from './parseUrl';\n\nconst storage = new Map();\n\nconst getKey = url => {\n    if (url === null) {\n        return null;\n    }\n\n    const parsed = parseUrl(url);\n\n    if (parsed === null) {\n        return null;\n    }\n\n    return `${parsed.host}${parsed.pathname}`.replace(/\\/$/, '');\n};\n\nclass Storage {\n    constructor(config) {\n        this.config = Object.assign(\n            {\n                keys: {\n                    root: 'selz-js-sdk',\n                    carts: 'carts',\n                    stores: 'stores',\n                },\n                ttl: 3600, // 1 hour\n                schema: new Date('2018-07-02').getTime(), // Schema version (allowing us to change data schema and invalidate storage)\n            },\n            config,\n        );\n\n        this.purge();\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        if (!window.localStorage) {\n            return false;\n        }\n\n        const key = '___test';\n\n        // Try to use it\n        try {\n            window.localStorage.setItem(key, key);\n            window.localStorage.removeItem(key);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        let data = storage.get(this.config.keys.root);\n\n        // Grab from real storage if we can or use faux-storage\n        if (Storage.supported) {\n            const stored = window.localStorage.getItem(this.config.keys.root);\n\n            if (!is.empty(stored)) {\n                data = JSON.parse(stored);\n            }\n        }\n\n        if (is.empty(data)) {\n            return null;\n        }\n\n        if (!is.empty(key)) {\n            return Object.keys(data).includes(key) ? data[key] : null;\n        }\n\n        return data;\n    }\n\n    set(key, value, merge = false) {\n        // Get current storage\n        const data = this.get() || {};\n\n        // Extend with the new data\n        if (merge && Object.keys(data).includes(key)) {\n            data[key] = extend(data[key], value);\n        } else {\n            data[key] = value;\n        }\n\n        // Set in faux-storage\n        storage.set(this.config.keys.root, data);\n\n        // Bail if no real support\n        if (!Storage.supported) {\n            return;\n        }\n\n        // Set schema version\n        data.schema = this.config.schema;\n\n        // Update storage\n        try {\n            window.localStorage.setItem(this.config.keys.root, JSON.stringify(data));\n        } catch (e) {\n            // Do nothing\n        }\n    }\n\n    // Clean up stale storage\n    purge() {\n        // Check schema\n        const data = this.get();\n\n        // Nothing to purge\n        if (is.empty(data)) {\n            return;\n        }\n\n        // If schema does not match, kill it\n        if (Number(data.schema) !== this.config.schema) {\n            window.localStorage.removeItem(this.config.keys.root);\n            return;\n        }\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n\n        // Nothing to cleanup\n        if (is.empty(stores)) {\n            return;\n        }\n\n        // Check TTL is valid\n        this.set(\n            this.config.keys.stores,\n            stores.filter(store => {\n                const ttl = Number(store.ttl);\n                return ttl > 0 && ttl > Date.now();\n            }),\n        );\n    }\n\n    getCarts(store) {\n        const data = this.get(this.config.keys.carts) || {};\n\n        // If no carts\n        if (is.empty(data)) {\n            return null;\n        }\n\n        // Get all carts\n        if (!is.number(store)) {\n            return data;\n        }\n\n        // Store not found\n        if (!Object.keys(data).includes(store.toString())) {\n            return null;\n        }\n\n        // Get all for a store\n        return data[store.toString()];\n    }\n\n    getCart(store, currency) {\n        const carts = this.getCarts(store);\n\n        // No carts\n        if (is.empty(carts)) {\n            return null;\n        }\n\n        // Get all for a store\n        if (!is.string(currency)) {\n            return carts;\n        }\n\n        // Currency not found\n        if (!Object.keys(carts).includes(currency.toUpperCase())) {\n            return null;\n        }\n\n        return carts[currency.toUpperCase()];\n    }\n\n    setCart(store, currency, cart) {\n        this.set(\n            this.config.keys.carts,\n            {\n                [store]: {\n                    [currency.toUpperCase()]: {\n                        id: cart.id,\n                        active: cart.active,\n                    },\n                },\n            },\n            true,\n        );\n    }\n\n    setCarts(store, carts = {}) {\n        this.set(this.config.keys.carts, {\n            [store]: carts,\n        });\n    }\n\n    getStore(input) {\n        let store = null;\n\n        if (!is.number(input) && !is.url(input)) {\n            return null;\n        }\n\n        const stores = this.get(this.config.keys.stores) || [];\n\n        if (is.number(input)) {\n            store = stores.find(s => is.object(s.data) && s.data.id === input);\n        } else if (is.url(input)) {\n            const key = getKey(input);\n\n            // Bail if invalid URL\n            if (key === null) {\n                return null;\n            }\n\n            store = stores.find(s => is.array(s.urls) && s.urls.includes(key));\n        }\n\n        if (!is.object(store)) {\n            return null;\n        }\n\n        // Check TTL is valid\n        const ttl = Number(store.ttl);\n\n        if (ttl > 0 && ttl < Date.now()) {\n            this.purge();\n            return null;\n        }\n\n        return new Store(store.data);\n    }\n\n    setStore(data, url = null) {\n        // Strip the protocol from the lookup url\n        const key = getKey(url);\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n        let existing = null;\n\n        if (!is.empty(stores)) {\n            // Find existing store by id\n            existing = stores.find(s => s.data.id === data.id);\n        }\n\n        // Extend TTL each\n        const ttl = Date.now() + this.config.ttl;\n\n        // If we found something\n        if (is.object(existing)) {\n            // Update data and extend TTL\n            Object.assign(existing, {\n                data,\n                ttl,\n            });\n\n            if (key !== null) {\n                // Add the URL key for later lookup\n                if (!is.array(existing.urls)) {\n                    existing.urls = [key];\n                } else {\n                    existing.urls.push(key);\n                }\n\n                // Remove duplicate entries\n                const urls = dedupe(existing.urls);\n\n                // Add to existing record\n                Object.assign(existing, {\n                    urls,\n                });\n            }\n        } else {\n            const store = {\n                data,\n                ttl,\n            };\n\n            if (key !== null) {\n                Object.assign(store, {\n                    urls: [key],\n                });\n            }\n\n            stores.push(store);\n        }\n\n        this.set(this.config.keys.stores, stores);\n    }\n}\n\nexport default Storage;\n","import config from './config';\nimport Cart from './models/Cart';\nimport Product from './models/Product';\nimport Store from './models/Store';\nimport http from './utils/http';\nimport is from './utils/is';\nimport Storage from './utils/storage';\n\nclass Client {\n    constructor(props) {\n        const { env, store } = props;\n\n        this.env = !is.empty(env) ? env : '';\n        this.store = store;\n\n        if (!is.url(store) && !is.number(store)) {\n            throw Error('A store ID or URL is required to create a client');\n        }\n\n        this.storage = new Storage();\n    }\n\n    /**\n     * Get the store ID only\n     */\n    getStoreId() {\n        return new Promise((resolve, reject) => {\n            if (is.number(this.store)) {\n                resolve(this.store);\n                return;\n            }\n\n            if (this.store instanceof Store) {\n                resolve(this.store.id);\n                return;\n            }\n\n            // URL is required\n            if (!is.url(this.store)) {\n                reject(new Error('Url is required for user lookup'));\n            }\n\n            // Get by URL\n            this.getStore()\n                .then(store => {\n                    resolve(store.id);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the Store for current instance\n     */\n    getStore() {\n        return new Promise((resolve, reject) => {\n            // Try from cache by ID or URL\n            if (is.number(this.store) || is.url(this.store)) {\n                const cached = this.storage.getStore(this.store);\n\n                // Return cached if we have it\n                if (cached !== null && cached instanceof Store) {\n                    resolve(cached);\n                    return;\n                }\n            }\n\n            // If already fetched\n            if (this.store instanceof Store) {\n                resolve(this.store);\n                return;\n            }\n\n            // Fetch from remote by ID or URL\n            const url = config.urls.store(this.env, this.store);\n\n            http.get(url)\n                .then(store => {\n                    this.setStore(store);\n                    resolve(this.store);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the store details\n     * @param {object} store\n     */\n    setStore(store) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Store reference to lookup URL\n        const url = is.url(this.store) ? this.store : null;\n\n        // Map to Store\n        this.store = new Store(store);\n\n        // Add to storage for cache\n        this.storage.setStore(this.store, url);\n    }\n\n    /**\n     * Get product data\n     * @param {string} url - Short or full URL for a product\n     */\n    getProduct(url) {\n        return new Promise((resolve, reject) => {\n            http.get(config.urls.product(this.env, url))\n                .then(json => {\n                    if (!(this.store instanceof Store)) {\n                        this.setStore(json.store);\n                    }\n\n                    resolve(new Product(this, json));\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all products\n     */\n    getProducts(query = '', page = 1) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const keyword = !is.empty(query) ? query : '';\n\n                    http.get(config.urls.products(this.env, id, keyword, page < 1 ? 1 : page))\n                        .then(json => {\n                            resolve(json.map(p => new Product(this, p)));\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Create a new shopping cart\n     * @param {string} currency - ISO currency code\n     * @param {string} discount - Discount code\n     */\n    createCart(currency, discount) {\n        return new Promise((resolve, reject) => {\n            if (is.empty(currency)) {\n                reject(new Error('currency is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n\n                    http.post(config.urls.createCart(this.env, id), {\n                        currency: currencyCode,\n                        discount: !is.empty(discount) ? discount : null,\n                    })\n                        .then(json => {\n                            const cart = new Cart(this, json);\n\n                            // Store reference to cart id for later\n                            this.storage.setCart(id, currencyCode, cart);\n\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart or create one if needed\n     * @param {string} currency - The shopping cart ISO currency code\n     */\n    getCartId(currency) {\n        return new Promise((resolve, reject) => {\n            if (!is.currencyCode(currency)) {\n                reject(new Error('A valid currency code is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n                    const currentCart = this.storage.getCart(id, currencyCode);\n\n                    // Create cart if it doesn't exist\n                    if (is.empty(currentCart)) {\n                        this.createCart(currencyCode)\n                            .then(cart => resolve(cart.id))\n                            .catch(reject);\n                    } else {\n                        resolve(currentCart.id);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart\n     * @param {string} input - The shopping cart ISO currency code or cart ID\n     */\n    getCart(input) {\n        return new Promise((resolve, reject) => {\n            const isCurrency = is.currencyCode(input);\n            const isObjectId = is.objectId(input);\n\n            if (!isCurrency && !isObjectId) {\n                reject(new Error('A valid currency code or cart id are required'));\n                return;\n            }\n\n            if (isCurrency) {\n                const currencyCode = input.toUpperCase();\n\n                this.getCartId(currencyCode)\n                    .then(id => {\n                        if (is.empty(id)) {\n                            reject(new Error(`Could not find matching cart for currency code '${currencyCode}'`));\n                            return;\n                        }\n\n                        this.getCart(id)\n                            .then(cart => {\n                                // Update store\n                                this.setStore(cart.store);\n\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    })\n                    .catch(reject);\n            } else {\n                http.get(config.urls.getCart(this.env, input))\n                    .then(json => {\n                        const activeId = this.getActiveCart();\n                        const cart = new Cart(this, json, json.id === activeId);\n\n                        // Update store\n                        this.setStore(cart.store);\n\n                        resolve(cart);\n                    })\n                    .catch(reject);\n            }\n        });\n    }\n\n    /**\n     * Get all current carts\n     */\n    getCarts(validate = true) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (is.empty(carts)) {\n                        resolve(null);\n                        return;\n                    }\n\n                    // Check the carts still exist in the server\n                    if (validate) {\n                        const ids = Object.keys(carts).map(currency => carts[currency].id);\n\n                        http.get(config.urls.checkCarts(this.env, ids.join(',')))\n                            .then(json => {\n                                // Remove non existant carts\n                                Object.entries(json).forEach(([cartId, exists]) => {\n                                    if (!exists) {\n                                        const currency = Object.keys(carts).find(c => carts[c].id === cartId);\n                                        delete carts[currency];\n                                    }\n                                });\n\n                                // Store again\n                                this.storage.setCarts(id, carts);\n\n                                // Set active\n                                if (!Object.values(carts).find(cart => cart.active)) {\n                                    this.setActiveCart()\n                                        .then(resolve)\n                                        .catch(reject);\n                                } else {\n                                    resolve(carts);\n                                }\n                            })\n                            .catch(reject);\n                    } else {\n                        resolve(carts);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the active cart based on currency\n     * @param {string} input - The shopping cart ISO currency code or cart ID\n     */\n    setActiveCart(input = null) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    this.getCarts(false).then(data => {\n                        const carts = data;\n\n                        // No carts\n                        if (is.empty(carts)) {\n                            resolve(null);\n                            return;\n                        }\n\n                        // Currency code was passed...\n                        if (is.currencyCode(input)) {\n                            const currencyCode = input.toUpperCase();\n                            const currencies = Object.keys(carts);\n\n                            // Bail if not included\n                            if (!currencies.includes(currencyCode)) {\n                                reject(new Error(`No carts for ${currencyCode}`));\n                                return;\n                            }\n\n                            // Set active\n                            currencies.forEach(currency => {\n                                carts[currency].active = currency === currencyCode;\n                            });\n                        } else {\n                            // Set to id if specified, otherwise first\n                            const cartId = is.objectId(input) ? input : carts[Object.keys(carts)[0]].id;\n\n                            // Set active\n                            Object.keys(carts).forEach(currency => {\n                                const cart = carts[currency];\n                                cart.active = cart.id === cartId;\n                            });\n                        }\n\n                        // Store again\n                        this.storage.setCarts(id, carts);\n\n                        resolve(carts);\n                    });\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the current active cart\n     */\n    getActiveCart(fetch = false) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (!Object.keys(carts).length) {\n                        resolve(null);\n                        return;\n                    }\n\n                    const active = Object.values(carts).find(cart => cart.active);\n\n                    if (!active) {\n                        resolve(null);\n                        return;\n                    }\n\n                    if (!fetch) {\n                        resolve(active.id);\n                        return;\n                    }\n\n                    this.getCart(active.id)\n                        .then(resolve)\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Add a product to a cart\n     * @param {string} id - The cart ID\n     * @param {object} product - The product details\n     */\n    addToCart(id, product) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(product)) {\n                reject(new Error('A valid product is required'));\n                return;\n            }\n\n            http.post(config.urls.addToCart(this.env, id), product)\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Update an items quantity in the shopping cart\n     * @param {string} id - The shopping cart ID\n     * @param {string} index - The shopping cart item quid\n     * @param {number} quantity - Desired quantity\n     */\n    updateCartItemQuantity(id, index, quantity = 1) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.updateCartItemQuantity(this.env, id), { index, quantity })\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Remove a product from a cart\n     * @param {string} id - The shopping cart id\n     * @param {string} index - The shopping cart item guid\n     */\n    removeFromCart(id, index) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.removeFromCart(this.env, id), { index })\n                .then(json => {\n                    // If there's actually a cart left, map it\n                    if (!is.empty(json)) {\n                        const cart = new Cart(this, json, true);\n\n                        // Set the active cart\n                        this.setActiveCart(cart.id)\n                            .then(() => {\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    } else {\n                        // Otherwise, update carts (as one removed)\n                        this.getCarts()\n                            .then(() => resolve(null))\n                            .catch(reject);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n}\n\nexport { Product, Cart, Store };\n\nexport default Client;\n"]}