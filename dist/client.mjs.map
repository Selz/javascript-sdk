{"version":3,"sources":["src/client.js","src/utils/is.js","src/config.js","src/models/Product.js","src/models/Cart.js","src/models/Category.js","src/models/Store.js","node_modules/humps/humps.js","src/utils/objects.js","src/utils/strings.js","src/utils/form-data.js","src/utils/fetch.js","src/utils/http.js","src/utils/arrays.js","src/utils/parseUrl.js","src/utils/storage.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","_defineProperty","value","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","Array","isArray","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","getConstructor","input","instanceOf","isObject","isNumber","Number","isNaN","isString","String","isBoolean","Boolean","isFunction","Function","isNullOrUndefined","isObjectId","test","isCurrencyCode","isEmpty","keys","isUrl","strict","arguments","window","URL","string","concat","hostname","e","is","array","object","number","boolean","function","nullOrUndefined","objectId","currencyCode","url","empty","getBase","env","config","urls","product","products","id","keyword","category","page","categories","store","createCart","getCart","checkCarts","ids","addToCart","updateCartItemQuantity","removeFromCart","client","ProductUrls","a","this","assign","ProductImage","image","ProductMedia","media","cover","ProductFile","file","ProductVariant","variant","selected","ProductVariantAttributeOption","label","ProductVariantAttribute","options","map","Product","variantId","images","files","hasVariants","variants","hasVariantAttributes","variantAttributes","attribute","get","find","isProduct","CartItem","item","cartId","CartAddItem","productId","quantity","discountCode","buyersUnitPrice","Cart","cart","active","items","from","index","Category","Store","commonjsGlobal","global","self","createCommonjsModule","fn","module","exports","humps","_processKeys","camelize","pascalize","decamelize","toString","_isFunction","_isObject","_isArray","_isDate","_isRegExp","_isBoolean","_isNumerical","_processor","convert","output","l","hasOwnProperty","call","replace","match","chr","toUpperCase","substr","toLowerCase","camelized","separator","split","join","separateWords","callback","process","depascalize","camelizeKeys","decamelizeKeys","pascalizeKeys","depascalizeKeys","apply","cloneDeep","JSON","parse","stringify","extend","b","sources","d","source","shift","forEach","includes","parseJSON","data","Promise","resolve","reject","error","replaceAll","RegExp","toTitleCase","text","charAt","toPascalCase","buildFormData","formKey","form","namespace","formData","FormData","File","append","defaults","type","body","responseType","fetch","c","xhr","XMLHttpRequest","Error","request","fail","status","addEventListener","response","then","json","success","errors","catch","open","send","queue","http","remove","post","dedupe","filter","indexOf","parseUrl","storage","Map","getKey","parsed","host","pathname","Storage","root","carts","stores","ttl","schema","Date","getTime","purge","supported","stored","localStorage","getItem","merge","set","setItem","removeItem","now","currency","getCarts","s","existing","Client","getStore","cached","setStore","getStoreId","p","discount","setCart","currentCart","isCurrency","getCartId","activeId","getActiveCart","validate","entries","setCarts","values","setActiveCart","currencies","cartItem"],"mappings":"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","file":"client.mjs","sourcesContent":["import config from './config';\nimport { Cart, CartAddItem, CartItem } from './models/Cart';\nimport Category from './models/Category';\nimport Product from './models/Product';\nimport Store from './models/Store';\nimport http from './utils/http';\nimport is from './utils/is';\nimport Storage from './utils/storage';\n\nclass Client {\n    constructor(props) {\n        const { env, store, source } = props;\n\n        this.env = !is.empty(env) ? env : '';\n        this.store = store;\n        this.source = source;\n\n        if (!is.url(store) && !is.number(store)) {\n            throw Error('A store ID or URL is required to create a client');\n        }\n\n        this.storage = new Storage();\n    }\n\n    /**\n     * Get the store ID only\n     */\n    getStoreId() {\n        return new Promise((resolve, reject) => {\n            if (is.number(this.store)) {\n                resolve(this.store);\n                return;\n            }\n\n            if (this.store instanceof Store) {\n                resolve(this.store.id);\n                return;\n            }\n\n            // URL is required\n            if (!is.url(this.store)) {\n                reject(new Error('Url is required for user lookup'));\n            }\n\n            // Get by URL\n            this.getStore()\n                .then(store => {\n                    resolve(store.id);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the Store for current instance\n     */\n    getStore() {\n        return new Promise((resolve, reject) => {\n            // Try from cache by ID or URL\n            if (is.number(this.store) || is.url(this.store)) {\n                const cached = this.storage.getStore(this.store);\n\n                // Return cached if we have it\n                if (cached !== null && cached instanceof Store) {\n                    resolve(cached);\n                    return;\n                }\n            }\n\n            // If already fetched\n            if (this.store instanceof Store) {\n                resolve(this.store);\n                return;\n            }\n\n            // Fetch from remote by ID or URL\n            const url = config.urls.store(this.env, this.store);\n\n            http.get(url)\n                .then(store => {\n                    this.setStore(store);\n                    resolve(this.store);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the store details\n     * @param {object} store\n     */\n    setStore(store) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Store reference to lookup URL\n        const url = is.url(this.store) ? this.store : null;\n\n        // Map to Store\n        this.store = new Store(store);\n\n        // Add to storage for cache\n        this.storage.setStore(this.store, url);\n    }\n\n    /**\n     * Get product data\n     * @param {String} url - Short or full URL for a product\n     */\n    getProduct(url) {\n        return new Promise((resolve, reject) => {\n            http.get(config.urls.product(this.env, url))\n                .then(json => {\n                    if (!(this.store instanceof Store)) {\n                        this.setStore(json.store);\n                    }\n\n                    resolve(new Product(this, json));\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all products\n     */\n    getProducts(keyword = '', category = '', page = 1) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    http.get(\n                        config.urls.products(\n                            this.env,\n                            id,\n                            !is.empty(keyword) ? keyword : '',\n                            is.string(category) ? category : '',\n                            !is.number(page) || page < 1 ? 1 : page,\n                        ),\n                    )\n                        .then(json => {\n                            resolve(\n                                Object.assign({}, json, {\n                                    products: json.products.map(p => new Product(this, p)),\n                                }),\n                            );\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get all categories\n     */\n    getCategories() {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    http.get(config.urls.categories(this.env, id))\n                        .then(json => {\n                            resolve(\n                                Object.assign({}, json, {\n                                    categories: json.categories.map(c => new Category(c)),\n                                }),\n                            );\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Create a new shopping cart\n     * @param {String} currency - ISO currency code\n     * @param {String} discount - Discount code\n     */\n    createCart(currency, discount) {\n        return new Promise((resolve, reject) => {\n            if (is.empty(currency)) {\n                reject(new Error('currency is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n\n                    http.post(config.urls.createCart(this.env, id), {\n                        currency: currencyCode,\n                        discount: !is.empty(discount) ? discount : null,\n                        source: this.source,\n                    })\n                        .then(json => {\n                            const cart = new Cart(this, json);\n\n                            // Store reference to cart id for later\n                            this.storage.setCart(id, currencyCode, cart);\n\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart or create one if needed\n     * @param {String} currency - The shopping cart ISO currency code\n     */\n    getCartId(currency) {\n        return new Promise((resolve, reject) => {\n            if (!is.currencyCode(currency)) {\n                reject(new Error('A valid currency code is required'));\n                return;\n            }\n\n            this.getStoreId()\n                .then(id => {\n                    const currencyCode = currency.toUpperCase();\n                    const currentCart = this.storage.getCart(id, currencyCode);\n\n                    // Create cart if it doesn't exist\n                    if (is.empty(currentCart)) {\n                        this.createCart(currencyCode)\n                            .then(cart => resolve(cart.id))\n                            .catch(reject);\n                    } else {\n                        resolve(currentCart.id);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get a shopping cart\n     * @param {String} input - The shopping cart ISO currency code or cart ID\n     */\n    getCart(input) {\n        return new Promise((resolve, reject) => {\n            const isCurrency = is.currencyCode(input);\n            const isObjectId = is.objectId(input);\n\n            if (!isCurrency && !isObjectId) {\n                reject(new Error('A valid currency code or cart id are required'));\n                return;\n            }\n\n            if (isCurrency) {\n                const currencyCode = input.toUpperCase();\n\n                this.getCartId(currencyCode)\n                    .then(id => {\n                        if (is.empty(id)) {\n                            reject(new Error(`Could not find matching cart for currency code '${currencyCode}'`));\n                            return;\n                        }\n\n                        this.getCart(id)\n                            .then(cart => {\n                                // Update store\n                                this.setStore(cart.store);\n\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    })\n                    .catch(reject);\n            } else {\n                http.get(config.urls.getCart(this.env, input))\n                    .then(json => {\n                        const activeId = this.getActiveCart();\n                        const cart = new Cart(this, json, json.id === activeId);\n\n                        // Update store\n                        this.setStore(cart.store);\n\n                        resolve(cart);\n                    })\n                    .catch(reject);\n            }\n        });\n    }\n\n    /**\n     * Get all current carts\n     */\n    getCarts(validate = true) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (is.empty(carts)) {\n                        resolve(null);\n                        return;\n                    }\n\n                    // Check the carts still exist in the server\n                    if (validate) {\n                        const ids = Object.keys(carts).map(currency => carts[currency].id);\n\n                        http.get(config.urls.checkCarts(this.env, ids.join(',')))\n                            .then(json => {\n                                // Remove non existant carts\n                                Object.entries(json).forEach(([cartId, exists]) => {\n                                    if (!exists) {\n                                        const currency = Object.keys(carts).find(c => carts[c].id === cartId);\n                                        delete carts[currency];\n                                    }\n                                });\n\n                                // Store again\n                                this.storage.setCarts(id, carts);\n\n                                // Set active\n                                if (!Object.values(carts).find(cart => cart.active)) {\n                                    this.setActiveCart()\n                                        .then(resolve)\n                                        .catch(reject);\n                                } else {\n                                    resolve(carts);\n                                }\n                            })\n                            .catch(reject);\n                    } else {\n                        resolve(carts);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Set the active cart based on currency\n     * @param {String} input - The shopping cart ISO currency code or cart ID\n     */\n    setActiveCart(input = null) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    this.getCarts(false).then(data => {\n                        const carts = data;\n\n                        // No carts\n                        if (is.empty(carts)) {\n                            resolve(null);\n                            return;\n                        }\n\n                        // Currency code was passed...\n                        if (is.currencyCode(input)) {\n                            const currencyCode = input.toUpperCase();\n                            const currencies = Object.keys(carts);\n\n                            // Bail if not included\n                            if (!currencies.includes(currencyCode)) {\n                                reject(new Error(`No carts for ${currencyCode}`));\n                                return;\n                            }\n\n                            // Set active\n                            currencies.forEach(currency => {\n                                carts[currency].active = currency === currencyCode;\n                            });\n                        } else {\n                            // Set to id if specified, otherwise first\n                            const cartId = is.objectId(input) ? input : carts[Object.keys(carts)[0]].id;\n\n                            // Set active\n                            Object.keys(carts).forEach(currency => {\n                                const cart = carts[currency];\n                                cart.active = cart.id === cartId;\n                            });\n                        }\n\n                        // Store again\n                        this.storage.setCarts(id, carts);\n\n                        resolve(carts);\n                    });\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Get the current active cart\n     */\n    getActiveCart(fetch = false) {\n        return new Promise((resolve, reject) => {\n            this.getStoreId()\n                .then(id => {\n                    const carts = this.storage.getCarts(id);\n\n                    if (!Object.keys(carts).length) {\n                        resolve(null);\n                        return;\n                    }\n\n                    const active = Object.values(carts).find(cart => cart.active);\n\n                    if (!active) {\n                        resolve(null);\n                        return;\n                    }\n\n                    if (!fetch) {\n                        resolve(active.id);\n                        return;\n                    }\n\n                    this.getCart(active.id)\n                        .then(resolve)\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Add a product to a cart\n     * @param {String} id - The cart ID\n     * @param {Object} item - The cart item\n     */\n    addToCart(id, item) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(item)) {\n                reject(new Error('A cart item is required'));\n                return;\n            }\n\n            // Map the cart item if required\n            let cartItem = item;\n            if (is.object(item) || item instanceof Product) {\n                cartItem = new CartAddItem(item);\n            }\n\n            if (!(cartItem instanceof CartAddItem)) {\n                reject(new Error('A valid cart item is required'));\n            }\n\n            http.post(config.urls.addToCart(this.env, id), cartItem)\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Update an items quantity in the shopping cart\n     * @param {String} id - The shopping cart ID\n     * @param {String} index - The shopping cart item quid\n     * @param {Number} quantity - Desired quantity\n     */\n    updateCartItemQuantity(id, index, quantity = 1) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.updateCartItemQuantity(this.env, id), { index, quantity })\n                .then(json => {\n                    const cart = new Cart(this, json, true);\n\n                    // Update store\n                    this.setStore(cart.store);\n\n                    // Set the active cart\n                    this.setActiveCart(cart.id)\n                        .then(() => {\n                            resolve(cart);\n                        })\n                        .catch(reject);\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Remove a product from a cart\n     * @param {String} id - The shopping cart id\n     * @param {String} index - The shopping cart item guid\n     */\n    removeFromCart(id, index) {\n        return new Promise((resolve, reject) => {\n            if (!is.objectId(id)) {\n                reject(new Error('A valid id is required'));\n                return;\n            }\n\n            if (is.empty(index)) {\n                reject(new Error('A valid index is required'));\n                return;\n            }\n\n            http.post(config.urls.removeFromCart(this.env, id), { index })\n                .then(json => {\n                    // If there's actually a cart left, map it\n                    if (!is.empty(json)) {\n                        const cart = new Cart(this, json, true);\n\n                        // Set the active cart\n                        this.setActiveCart(cart.id)\n                            .then(() => {\n                                resolve(cart);\n                            })\n                            .catch(reject);\n                    } else {\n                        // Otherwise, update carts (as one removed)\n                        this.getCarts()\n                            .then(() => resolve(null))\n                            .catch(reject);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n}\n\nexport { Product, Category, Cart, CartItem, CartAddItem, Store };\n\nexport default Client;\n","// ==========================================================================\n// Type checking\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\nconst isArray = input => Array.isArray(input);\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObjectId = input => isString(input) && /^[a-f\\d]{24}$/i.test(input);\nconst isCurrencyCode = input => isString(input) && /^[A-z]{3}$/.test(input);\n\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nconst isUrl = (input, strict = false) => {\n    // Accept a URL object\n    if (instanceOf(input, window.URL)) {\n        return true;\n    }\n\n    // Add the protocol if required\n    let string = input;\n    if (!strict && !/^https?:\\/\\/*/.test(input)) {\n        string = `http://${input}`;\n    }\n\n    try {\n        return !isEmpty(new URL(string).hostname);\n    } catch (e) {\n        return false;\n    }\n};\n\nconst is = {\n    array: isArray,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    nullOrUndefined: isNullOrUndefined,\n    objectId: isObjectId,\n    currencyCode: isCurrencyCode,\n    url: isUrl,\n    empty: isEmpty,\n};\n\nexport default is;\n","import is from './utils/is';\n\nconst getBase = env => `https://${is.empty(env) || env === 'selz.com' ? 'sdk.selz.com' : `${env}/sdk`}/`;\n\nconst config = {\n    urls: {\n        /**\n         * Get URL for product data by URL\n         * @param {String} env - Environment (for internal use)\n         * @param {String} url - Short or full URL for a product\n         */\n        product(env, url = '') {\n            return `${getBase(env)}products/find?url=${url}`;\n        },\n\n        /**\n         * Get URL for all products by store ID\n         * @param {String} env - Environment (for internal use)\n         * @param {Number|String} id - The store ID\n         * @param {String} keyword - Search keyword\n         * @param {ObjectId|String} category - Category ID or relative path\n         * @param {Number} page - Page to fetch\n         */\n        products(env, id, keyword = '', category = '', page = 1) {\n            return `${getBase(env)}products/all/${id}?q=${keyword}&c=${category}&p=${page}`;\n        },\n\n        /**\n         * Get all categories for a given store ID\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - The store ID\n         */\n        categories(env, id) {\n            return `${getBase(env)}categories/${id}`;\n        },\n\n        /**\n         * Get URL for finding a store by URL or ID\n         * @param {String} env - Environment (for internal use)\n         * @param {Number|String} input - The ID or URL to lookup\n         */\n        store(env, input = null) {\n            if (is.number(input)) {\n                return `${getBase(env)}store/find/${input}`;\n            }\n\n            return `${getBase(env)}store/find?url=${input}`;\n        },\n\n        /**\n         * Create a new cart\n         * @param {String} env - Environment (for internal use)\n         * @param {Number} id - Store ID\n         */\n        createCart(env, id = '') {\n            return `${getBase(env)}cart/create/${id}`;\n        },\n\n        /**\n         * Get cart from ID\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        getCart(env, id = '') {\n            return `${getBase(env)}cart/${id}`;\n        },\n\n        /**\n         * Check carts still exist server side\n         * @param {String} env - Environment (for internal use)\n         * @param {Number} id - Cart IDs\n         */\n        checkCarts(env, ids = '') {\n            return `${getBase(env)}cart/verify?ids=${ids}`;\n        },\n\n        /**\n         * Add product to cart\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        addToCart(env, id = '') {\n            return `${getBase(env)}cart/add/${id}`;\n        },\n\n        /**\n         * Update a cart item quantity\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        updateCartItemQuantity(env, id = '') {\n            return `${getBase(env)}cart/updateitemquantity/${id}`;\n        },\n\n        /**\n         * Remove product from cart\n         * @param {String} env - Environment (for internal use)\n         * @param {String} id - Cart ID\n         */\n        removeFromCart(env, id = '') {\n            return `${getBase(env)}cart/remove/${id}`;\n        },\n    },\n};\n\nexport default config;\n","import is from '../utils/is';\n\nlet client = null;\n\nclass ProductUrls {\n    constructor(urls) {\n        // Take all properties by default\n        Object.assign(this, urls);\n    }\n}\n\nclass ProductImage {\n    constructor(image) {\n        // Take all properties by default\n        Object.assign(this, image);\n    }\n}\n\nclass ProductMedia {\n    constructor(media) {\n        // Take all properties by default\n        Object.assign(this, media);\n\n        // Map cover image\n        this.cover = new ProductImage(media.cover);\n    }\n}\n\nclass ProductFile {\n    constructor(file) {\n        // Take all properties by default\n        Object.assign(this, file);\n    }\n}\n\nclass ProductVariant {\n    constructor(variant, selected = '') {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        this.selected = variant.id === selected;\n    }\n}\n\nclass ProductVariantAttributeOption {\n    constructor(id, label) {\n        this.id = id;\n        this.label = label;\n    }\n}\n\nclass ProductVariantAttribute {\n    constructor(variant) {\n        // Take all properties by default\n        Object.assign(this, variant);\n\n        // Map options\n        this.options = Object.keys(variant.options).map(\n            id => new ProductVariantAttributeOption(id, variant.options[id]),\n        );\n    }\n}\n\nclass Product {\n    constructor(instance, product, variantId = '') {\n        if (!is.object(product)) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, product);\n\n        // Map store\n        this.store = client.store;\n\n        // Product URLs\n        if (is.object(product.urls)) {\n            this.urls = new ProductUrls(product.urls);\n        }\n\n        // Media (Video, YouTube, Vimeo, Audio)\n        if (is.object(product.media)) {\n            this.media = new ProductMedia(product.media);\n        }\n\n        // Images\n        if (is.array(product.images)) {\n            this.images = product.images.map(image => new ProductImage(image));\n        }\n\n        // Files for digital products\n        if (is.array(product.files)) {\n            this.files = product.files.map(file => new ProductFile(file));\n        }\n\n        // Variants\n        if (product.hasVariants) {\n            const selected = !is.empty(variantId) ? variantId : product.variants[0].id;\n            this.variants = product.variants.map(variant => new ProductVariant(variant, selected));\n        }\n        if (product.hasVariantAttributes) {\n            this.variantAttributes = product.variantAttributes.map(attribute => new ProductVariantAttribute(attribute));\n        }\n    }\n\n    get selectedVariant() {\n        if (is.empty(this.variants)) {\n            return null;\n        }\n\n        return this.variants.find(variant => variant.selected);\n    }\n}\n\nexport default Product;\n","import is from '../utils/is';\nimport Product from './Product';\n\nlet client = null;\nconst isProduct = input => !is.empty(input) && input instanceof Product;\n\nexport class CartItem {\n    constructor(item, cartId) {\n        this.cartId = cartId;\n\n        // Take all properties by default\n        Object.assign(this, item);\n\n        // Map product\n        this.product = new Product(client, item.product, item.variantId);\n    }\n}\n\nexport class CartAddItem {\n    constructor(item) {\n        this.productId = null;\n        this.variantId = null;\n        this.quantity = 1;\n        this.discountCode = null;\n        this.buyersUnitPrice = null;\n\n        if (isProduct(item) || is.object(item)) {\n            this.productId = item.id;\n            this.variantId = is.objectId(item.variant) ? item.variant : null;\n        }\n    }\n}\n\nexport class Cart {\n    constructor(instance, cart, active = false) {\n        if (cart === null) {\n            return;\n        }\n\n        client = instance;\n\n        // Take all properties by default\n        Object.assign(this, cart);\n\n        // Map store\n        this.store = client.store;\n\n        // Set active state\n        this.active = active;\n\n        // Map items\n        this.items = Array.from(cart.items).map(item => new CartItem(item, cart.id));\n    }\n\n    /**\n     * Add a product to this cart\n     * @param {Object} item - The cart item\n     */\n    add(item) {\n        return client.addToCart(this.id, item);\n    }\n\n    /**\n     * Remove a product from this cart\n     * @param {String} index\n     */\n    remove(index) {\n        return client.removeFromCart(this.id, index);\n    }\n}\n\nexport default Cart;\n","import is from '../utils/is';\n\nclass Category {\n    constructor(category = null) {\n        if (!is.object(category)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, category);\n    }\n}\n\nexport default Category;\n","import is from '../utils/is';\n\nclass Store {\n    constructor(store = null) {\n        if (!is.object(store)) {\n            return;\n        }\n\n        // Take all properties by default\n        Object.assign(this, store);\n    }\n}\n\nexport default Store;\n","// =========\n// = humps =\n// =========\n// Underscore-to-camelCase converter (and vice versa)\n// for strings and object keys\n\n// humps is copyright © 2012+ Dom Christie\n// Released under the MIT license.\n\n\n;(function(global) {\n\n  var _processKeys = function(convert, obj, options) {\n    if(!_isObject(obj) || _isDate(obj) || _isRegExp(obj) || _isBoolean(obj) || _isFunction(obj)) {\n      return obj;\n    }\n\n    var output,\n        i = 0,\n        l = 0;\n\n    if(_isArray(obj)) {\n      output = [];\n      for(l=obj.length; i<l; i++) {\n        output.push(_processKeys(convert, obj[i], options));\n      }\n    }\n    else {\n      output = {};\n      for(var key in obj) {\n        if(Object.prototype.hasOwnProperty.call(obj, key)) {\n          output[convert(key, options)] = _processKeys(convert, obj[key], options);\n        }\n      }\n    }\n    return output;\n  };\n\n  // String conversion methods\n\n  var separateWords = function(string, options) {\n    options = options || {};\n    var separator = options.separator || '_';\n    var split = options.split || /(?=[A-Z])/;\n\n    return string.split(split).join(separator);\n  };\n\n  var camelize = function(string) {\n    if (_isNumerical(string)) {\n      return string;\n    }\n    string = string.replace(/[\\-_\\s]+(.)?/g, function(match, chr) {\n      return chr ? chr.toUpperCase() : '';\n    });\n    // Ensure 1st char is always lowercase\n    return string.substr(0, 1).toLowerCase() + string.substr(1);\n  };\n\n  var pascalize = function(string) {\n    var camelized = camelize(string);\n    // Ensure 1st char is always uppercase\n    return camelized.substr(0, 1).toUpperCase() + camelized.substr(1);\n  };\n\n  var decamelize = function(string, options) {\n    return separateWords(string, options).toLowerCase();\n  };\n\n  // Utilities\n  // Taken from Underscore.js\n\n  var toString = Object.prototype.toString;\n\n  var _isFunction = function(obj) {\n    return typeof(obj) === 'function';\n  };\n  var _isObject = function(obj) {\n    return obj === Object(obj);\n  };\n  var _isArray = function(obj) {\n    return toString.call(obj) == '[object Array]';\n  };\n  var _isDate = function(obj) {\n    return toString.call(obj) == '[object Date]';\n  };\n  var _isRegExp = function(obj) {\n    return toString.call(obj) == '[object RegExp]';\n  };\n  var _isBoolean = function(obj) {\n    return toString.call(obj) == '[object Boolean]';\n  };\n\n  // Performant way to determine if obj coerces to a number\n  var _isNumerical = function(obj) {\n    obj = obj - 0;\n    return obj === obj;\n  };\n\n  // Sets up function which handles processing keys\n  // allowing the convert function to be modified by a callback\n  var _processor = function(convert, options) {\n    var callback = options && 'process' in options ? options.process : options;\n\n    if(typeof(callback) !== 'function') {\n      return convert;\n    }\n\n    return function(string, options) {\n      return callback(string, convert, options);\n    }\n  };\n\n  var humps = {\n    camelize: camelize,\n    decamelize: decamelize,\n    pascalize: pascalize,\n    depascalize: decamelize,\n    camelizeKeys: function(object, options) {\n      return _processKeys(_processor(camelize, options), object);\n    },\n    decamelizeKeys: function(object, options) {\n      return _processKeys(_processor(decamelize, options), object, options);\n    },\n    pascalizeKeys: function(object, options) {\n      return _processKeys(_processor(pascalize, options), object);\n    },\n    depascalizeKeys: function () {\n      return this.decamelizeKeys.apply(this, arguments);\n    }\n  };\n\n  if (typeof define === 'function' && define.amd) {\n    define(humps);\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = humps;\n  } else {\n    global.humps = humps;\n  }\n\n})(this);\n","// ==========================================================================\n// Extend objects\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Clone nested objects\n * @param {object} object\n */\nexport function cloneDeep(object) {\n    return JSON.parse(JSON.stringify(object));\n}\n\n/**\n * Deep extend destination object with N more objects\n * @param {Object} target\n * @param {...Object} sources\n */\nexport function extend(target = {}, ...sources) {\n    if (!sources.length) {\n        return target;\n    }\n\n    const source = sources.shift();\n\n    if (!is.object(source)) {\n        return target;\n    }\n\n    Object.keys(source).forEach(key => {\n        if (is.object(source[key])) {\n            if (!Object.keys(target).includes(key)) {\n                Object.assign(target, { [key]: {} });\n            }\n\n            extend(target[key], source[key]);\n        } else {\n            Object.assign(target, { [key]: source[key] });\n        }\n    });\n\n    return extend(target, ...sources);\n}\n\n/**\n * Safer JSON parsing\n * @param {Object} data\n */\nexport function parseJSON(data = {}) {\n    return new Promise((resolve, reject) => {\n        try {\n            resolve(JSON.parse(data));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// String utils\n// ==========================================================================\n\n// Replace all occurances of a string in a string\nexport function replaceAll(input = '', find = '', replace = '') {\n    return input.replace(\n        new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'),\n        replace.toString(),\n    );\n}\n\n// Convert to title case\nexport function toTitleCase(input = '') {\n    return input.toString().replace(/\\w\\S*/g, text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase());\n}\n\n// Convert string to pascalCase\nexport function toPascalCase(input = '') {\n    let string = input.toString();\n\n    // Convert kebab case\n    string = replaceAll(string, '-', ' ');\n\n    // Convert snake case\n    string = replaceAll(string, '_', ' ');\n\n    // Convert to title case\n    string = toTitleCase(string);\n\n    // Convert to pascal case\n    return replaceAll(string, ' ', '');\n}\n\n// Convert string to pascalCase\nexport function toCamelCase(input = '') {\n    let string = input.toString();\n\n    // Convert to pascal case\n    string = toPascalCase(string);\n\n    // Convert first character to lowercase\n    return string.charAt(0).toLowerCase() + string.slice(1);\n}\n","// ==========================================================================\n// Form Data utils\n// ==========================================================================\n\nimport is from './is';\nimport { cloneDeep } from './objects';\nimport { toPascalCase } from './strings';\n\n/**\n * Convert an Object to FormData\n * @param {Object} source - source Object\n * @param {FormData} form - existing FormData object\n * @param {String} namespace - namespace for FormData\n */\nconst buildFormData = (source = {}, form, namespace) => {\n    const formData = form || new FormData();\n    let formKey;\n    let data = null;\n\n    // Parse as an object\n    try {\n        data = cloneDeep(source);\n    } catch (error) {\n        return formData;\n    }\n\n    // Source must be an object\n    if (!is.object(data)) {\n        return formData;\n    }\n\n    // Loop through the object to convert\n    Object.keys(data).forEach(key => {\n        if (namespace) {\n            formKey = `${namespace}[${key}]`;\n        } else {\n            formKey = key;\n        }\n\n        // If the property is an object, but not a File, use recursivity\n        if (typeof source[key] === 'object' && !(source[key] instanceof File)) {\n            buildFormData(source[key], formData, key);\n        } else {\n            formData.append(toPascalCase(formKey), source[key]);\n        }\n    });\n\n    return formData;\n};\n\nexport default buildFormData;\n","// ==========================================================================\n// Fetch\n// ==========================================================================\n\nimport humps from 'humps';\nimport buildFormData from './form-data';\nimport { extend, parseJSON } from './objects';\n\nconst defaults = {\n    type: 'GET',\n    body: {},\n    responseType: 'json',\n};\n\n/**\n * Custom immitation fetch using XHR\n * @param {String} url - The URL of the endpoint\n * @param {Object} options - Object of options for the request\n */\nexport default function(url, options = {}) {\n    const { type, body, responseType } = extend({}, defaults, options);\n\n    return new Promise((resolve, reject) => {\n        try {\n            const xhr = new XMLHttpRequest();\n\n            // Check for CORS support\n            if (!('withCredentials' in xhr)) {\n                const error = new Error('No CORS support');\n                error.request = xhr;\n                throw error;\n            }\n\n            // Handle failures\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status\n            const fail = () => {\n                const error = new Error(xhr.status);\n                error.request = xhr;\n                reject(error);\n            };\n\n            // Successfully made the request\n            xhr.addEventListener('load', () => {\n                const { response } = xhr;\n\n                // Something went wrong either with the request or server\n                if (xhr.status >= 400) {\n                    fail();\n                    return;\n                }\n\n                // Parse JSON responses\n                if (responseType === 'json') {\n                    parseJSON(response)\n                        .then(json => {\n                            if (json.success) {\n                                const data = humps.camelizeKeys(json.data);\n                                resolve(data);\n                            } else {\n                                const error = new Error('Request failed');\n                                error.errors = json.errors;\n                                reject(error);\n                            }\n                        })\n                        .catch(reject);\n                } else {\n                    resolve(response);\n                }\n            });\n\n            // Request failed\n            xhr.addEventListener('error', fail);\n\n            // Start the request\n            xhr.open(type, url, true);\n\n            // Set the required response type\n            // 'json' responseType is much slower, so we parse later\n            // https://github.com/arendjr/fetch-vs-xhr-perf\n            if (responseType !== 'json') {\n                xhr.responseType = responseType;\n            }\n\n            // Send data if passed\n            xhr.send(buildFormData(body));\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n","// ==========================================================================\n// Common fetch actions\n// ==========================================================================\n\nimport fetch from './fetch';\n\nconst queue = {};\n\nconst http = {\n    /**\n     * GET remote URL and parse as JSON\n     * @param {String} url - The endpoint URL\n     */\n    get(url) {\n        // Queue requests to prevent hammering\n        if (!Object.keys(queue).includes(url)) {\n            queue[url] = fetch(url);\n\n            const remove = () => {\n                delete queue[url];\n            };\n\n            // Remove from queue on completed\n            queue[url].then(remove).catch(remove);\n        }\n\n        return queue[url];\n    },\n\n    /**\n     * POST to remote URL and parse as JSON\n     * @param {String} url - The endpoint URL\n     * @param {Object} data - The POST data payload\n     */\n    post(url, data = {}) {\n        const options = {\n            type: 'POST',\n            body: data,\n        };\n\n        return fetch(url, options);\n    },\n};\n\nexport default http;\n","// ==========================================================================\n// Array utils\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Remove duplicates in an array\n * @param {array} array\n */\nexport function dedupe(array) {\n    if (!is.array(array)) {\n        return array;\n    }\n\n    return array.filter((item, index) => array.indexOf(item) === index);\n}\n\n// Rounding methods for .closest()\nconst closestRounding = {\n    none: 0,\n    ceil: 1,\n    floor: 2,\n};\nexport { closestRounding };\n\n/**\n * Get the closest value in an array\n * @param {array} array\n * @param {number} value\n * @param {number} rounding\n */\nexport function closest(array, value, rounding = closestRounding.none) {\n    if (!is.array(array) || !array.length) {\n        return null;\n    }\n\n    return array.reduce((prev, curr) => {\n        if (Math.abs(curr - value) <= Math.abs(prev - value)) {\n            switch (rounding) {\n                case closestRounding.ceil:\n                    return curr >= value ? curr : prev;\n\n                case closestRounding.floor:\n                    return curr <= value ? curr : prev;\n\n                default:\n                    return curr;\n            }\n        }\n\n        return prev;\n    });\n}\n","/**\n * Parse a string to URL object\n * @param {String} url\n */\nexport default function parseUrl(url) {\n    let string = url;\n\n    // Add the protocol if required\n    if (!/^https?:\\/\\/*/.test(url)) {\n        string = `http://${url}`;\n    }\n\n    try {\n        return new URL(string);\n    } catch (e) {\n        return null;\n    }\n}\n","// ==========================================================================\n// Local storage wrapper\n// TODO: methods should return promises?\n// ==========================================================================\n\nimport Store from '../models/Store';\nimport { dedupe } from './arrays';\nimport is from './is';\nimport { extend } from './objects';\nimport parseUrl from './parseUrl';\n\nconst storage = new Map();\n\nconst getKey = url => {\n    if (url === null) {\n        return null;\n    }\n\n    const parsed = parseUrl(url);\n\n    if (parsed === null) {\n        return null;\n    }\n\n    return `${parsed.host}${parsed.pathname}`.replace(/\\/$/, '');\n};\n\nclass Storage {\n    constructor(config) {\n        this.config = Object.assign(\n            {\n                keys: {\n                    root: 'selz-js-sdk',\n                    carts: 'carts',\n                    stores: 'stores',\n                },\n                ttl: 3600, // 1 hour\n                schema: new Date('2018-07-02').getTime(), // Schema version (allowing us to change data schema and invalidate storage)\n            },\n            config,\n        );\n\n        this.purge();\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        if (!window.localStorage) {\n            return false;\n        }\n\n        const key = '___test';\n\n        // Try to use it\n        try {\n            window.localStorage.setItem(key, key);\n            window.localStorage.removeItem(key);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        let data = storage.get(this.config.keys.root);\n\n        // Grab from real storage if we can or use faux-storage\n        if (Storage.supported) {\n            const stored = window.localStorage.getItem(this.config.keys.root);\n\n            if (!is.empty(stored)) {\n                data = JSON.parse(stored);\n            }\n        }\n\n        if (is.empty(data)) {\n            return null;\n        }\n\n        if (!is.empty(key)) {\n            return Object.keys(data).includes(key) ? data[key] : null;\n        }\n\n        return data;\n    }\n\n    set(key, value, merge = false) {\n        // Get current storage\n        const data = this.get() || {};\n\n        // Extend with the new data\n        if (merge && Object.keys(data).includes(key)) {\n            data[key] = extend(data[key], value);\n        } else {\n            data[key] = value;\n        }\n\n        // Set in faux-storage\n        storage.set(this.config.keys.root, data);\n\n        // Bail if no real support\n        if (!Storage.supported) {\n            return;\n        }\n\n        // Set schema version\n        data.schema = this.config.schema;\n\n        // Update storage\n        try {\n            window.localStorage.setItem(this.config.keys.root, JSON.stringify(data));\n        } catch (e) {\n            // Do nothing\n        }\n    }\n\n    // Clean up stale storage\n    purge() {\n        // Check schema\n        const data = this.get();\n\n        // Nothing to purge\n        if (is.empty(data)) {\n            return;\n        }\n\n        // If schema does not match, kill it\n        if (Number(data.schema) !== this.config.schema) {\n            window.localStorage.removeItem(this.config.keys.root);\n            return;\n        }\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n\n        // Nothing to cleanup\n        if (is.empty(stores)) {\n            return;\n        }\n\n        // Check TTL is valid\n        this.set(\n            this.config.keys.stores,\n            stores.filter(store => {\n                const ttl = Number(store.ttl);\n                return ttl > 0 && ttl > Date.now();\n            }),\n        );\n    }\n\n    getCarts(store) {\n        const data = this.get(this.config.keys.carts) || {};\n\n        // If no carts\n        if (is.empty(data)) {\n            return null;\n        }\n\n        // Get all carts\n        if (!is.number(store)) {\n            return data;\n        }\n\n        // Store not found\n        if (!Object.keys(data).includes(store.toString())) {\n            return null;\n        }\n\n        // Get all for a store\n        return data[store.toString()];\n    }\n\n    getCart(store, currency) {\n        const carts = this.getCarts(store);\n\n        // No carts\n        if (is.empty(carts)) {\n            return null;\n        }\n\n        // Get all for a store\n        if (!is.string(currency)) {\n            return carts;\n        }\n\n        // Currency not found\n        if (!Object.keys(carts).includes(currency.toUpperCase())) {\n            return null;\n        }\n\n        return carts[currency.toUpperCase()];\n    }\n\n    setCart(store, currency, cart) {\n        this.set(\n            this.config.keys.carts,\n            {\n                [store]: {\n                    [currency.toUpperCase()]: {\n                        id: cart.id,\n                        active: cart.active,\n                    },\n                },\n            },\n            true,\n        );\n    }\n\n    setCarts(store, carts = {}) {\n        this.set(this.config.keys.carts, {\n            [store]: carts,\n        });\n    }\n\n    getStore(input) {\n        let store = null;\n\n        if (!is.number(input) && !is.url(input)) {\n            return null;\n        }\n\n        const stores = this.get(this.config.keys.stores) || [];\n\n        if (is.number(input)) {\n            store = stores.find(s => is.object(s.data) && s.data.id === input);\n        } else if (is.url(input)) {\n            const key = getKey(input);\n\n            // Bail if invalid URL\n            if (key === null) {\n                return null;\n            }\n\n            store = stores.find(s => is.array(s.urls) && s.urls.includes(key));\n        }\n\n        if (!is.object(store)) {\n            return null;\n        }\n\n        // Check TTL is valid\n        const ttl = Number(store.ttl);\n\n        if (ttl > 0 && ttl < Date.now()) {\n            this.purge();\n            return null;\n        }\n\n        return new Store(store.data);\n    }\n\n    setStore(data, url = null) {\n        // Strip the protocol from the lookup url\n        const key = getKey(url);\n\n        // Get current list of stores\n        const stores = this.get(this.config.keys.stores) || [];\n        let existing = null;\n\n        if (!is.empty(stores)) {\n            // Find existing store by id\n            existing = stores.find(s => s.data.id === data.id);\n        }\n\n        // Extend TTL each\n        const ttl = Date.now() + this.config.ttl;\n\n        // If we found something\n        if (is.object(existing)) {\n            // Update data and extend TTL\n            Object.assign(existing, {\n                data,\n                ttl,\n            });\n\n            if (key !== null) {\n                // Add the URL key for later lookup\n                if (!is.array(existing.urls)) {\n                    existing.urls = [key];\n                } else {\n                    existing.urls.push(key);\n                }\n\n                // Remove duplicate entries\n                const urls = dedupe(existing.urls);\n\n                // Add to existing record\n                Object.assign(existing, {\n                    urls,\n                });\n            }\n        } else {\n            const store = {\n                data,\n                ttl,\n            };\n\n            if (key !== null) {\n                Object.assign(store, {\n                    urls: [key],\n                });\n            }\n\n            stores.push(store);\n        }\n\n        this.set(this.config.keys.stores, stores);\n    }\n}\n\nexport default Storage;\n"]}